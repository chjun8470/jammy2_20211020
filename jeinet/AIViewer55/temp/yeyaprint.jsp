<%
/************************************************************************************
Generated by AIDesigner 5.6.0.3
************************************************************************************
보고서 제목 : 보고서 (2016/8/8 17:8:6)
작성일 : 2016년8월8일 17시8분6초
수정일 : 2016년8월16일 18시9분20초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>

<%@ page import="com.activeintra.util.*" %>

<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_equSql
	StringBuilder sql_equSql = new StringBuilder();
	sql_equSql.setLength(0);
	sql_equSql.append("SELECT ");
	sql_equSql.append(" ");
	sql_equSql.append("						A.RND_EQU_IDX ");
	sql_equSql.append("				,		A.FIXED_ASET_NO ");
	sql_equSql.append("				,		A.KOR_NM ");
	sql_equSql.append("				,		A.ENG_NM ");
	sql_equSql.append("				,		A.NTIS_EQUIP_INFO ");
	sql_equSql.append(" ");
	sql_equSql.append("			FROM TB_EQU_INFO AS A ");
	sql_equSql.append(" ");
	sql_equSql.append("			LEFT JOIN TB_EQU_INFO_UPDATE AS C ON (A.RND_EQU_IDX = C.RND_EQU_IDX) ");
	sql_equSql.append(" ");
	sql_equSql.append("			LEFT JOIN TB_USER_COPY AS B ON (A.EQU_USER_IDX = B.USER_IDX) ");
	sql_equSql.append(" ");
	sql_equSql.append("			WHERE 1=1 ");
	sql_equSql.append("			  AND A.RND_EQU_IDX = '^rndEquIdx^' ");
	sql_equSql.append("			  AND (A.DELETE_YN != 'Y' or A.DELETE_YN IS NULL) ");
	sql_equSql.append("			  AND (C.UP_DELETE_YN != 'Y' or C.UP_DELETE_YN IS NULL) ");
	initializer.prepareQuery("sql_equSql", sql_equSql.toString());

	//sql_yeyaSql
	StringBuilder sql_yeyaSql = new StringBuilder();
	sql_yeyaSql.setLength(0);
	sql_yeyaSql.append("SELECT ");
	sql_yeyaSql.append("	CONCAT(A.USE_ST_DT,' ~ ',A.USE_ED_DT) AS USE_DT, ");
	sql_yeyaSql.append("	CONCAT(A.REAL_USE_ST_DT,' ~ ',A.REAL_USE_ED_DT) AS REAL_DT, ");
	sql_yeyaSql.append("	A.USE_ST_DT, ");
	sql_yeyaSql.append("	A.USE_ED_DT, ");
	sql_yeyaSql.append("	DATE_FORMAT(A.ORDER_DT, '%Y-%m-%d %H:%i') AS ORDER_DT, ");
	sql_yeyaSql.append("	DATE_FORMAT(A.ORDER_OPERATOR_DT, '%Y-%m-%d %H:%i') AS ORDER_DATA, ");
	sql_yeyaSql.append("	A.REAL_USE_ST_DT, ");
	sql_yeyaSql.append("	A.REAL_USE_ED_DT, ");
	sql_yeyaSql.append("	B.PSN_NM, ");
	sql_yeyaSql.append("	B.EMAIL, ");
	sql_yeyaSql.append("	A.PHONE, ");
	sql_yeyaSql.append("	A.DEPT_NM, ");
	sql_yeyaSql.append("	A.CORP_RESPONSIBLE_USER, ");
	sql_yeyaSql.append("	C.KOR_NM, ");
	sql_yeyaSql.append("	C.ENG_NM, ");
	sql_yeyaSql.append("	C.MODEL_NM, ");
	sql_yeyaSql.append("	A.SAMPLE_NM, ");
	sql_yeyaSql.append("	A.SAMPLE_NO, ");
	sql_yeyaSql.append(" ");
	sql_yeyaSql.append("	CASE ");
	sql_yeyaSql.append("		WHEN A.USE_MEAN = '1' THEN '서비스의뢰' ");
	sql_yeyaSql.append("		WHEN A.USE_MEAN = '2' THEN '직접사용' ");
	sql_yeyaSql.append("		WHEN A.USE_MEAN = '3' THEN '야간 및 휴일사용' ");
	sql_yeyaSql.append("	ELSE '' ");
	sql_yeyaSql.append("	END AS USE_MEAN, ");
	sql_yeyaSql.append("	D.RENTAL_INFO, ");
	sql_yeyaSql.append("	D.USE_MARK_TEXT, ");
	sql_yeyaSql.append("	A.USE_PURPOSE, ");
	sql_yeyaSql.append("	A.SAMPLE_MATTER, ");
	sql_yeyaSql.append("	IFNULL('',A.ORG_RECEIPT_NO) AS ORG_RECEIPT_NO ");
	sql_yeyaSql.append("FROM ");
	sql_yeyaSql.append("	    TB_EQU_ORDER A ");
	sql_yeyaSql.append(" ");
	sql_yeyaSql.append("LEFT JOIN ");
	sql_yeyaSql.append("		TB_USER_COPY B ");
	sql_yeyaSql.append("	ON A.USER_IDX = B.USER_IDX ");
	sql_yeyaSql.append("LEFT JOIN ");
	sql_yeyaSql.append("		TB_EQU_INFO C ");
	sql_yeyaSql.append("	ON A.RND_EQU_IDX = C.RND_EQU_IDX ");
	sql_yeyaSql.append("LEFT JOIN ");
	sql_yeyaSql.append("		TB_EQU_GOODS D ");
	sql_yeyaSql.append("	ON A.RND_EQU_IDX = D.RND_EQU_IDX ");
	sql_yeyaSql.append(" ");
	sql_yeyaSql.append("WHERE EQU_ORDER_IDX = '^equOrderIdx^' ");
	initializer.prepareQuery("sql_yeyaSql", sql_yeyaSql.toString());

	//sql_userSql
	StringBuilder sql_userSql = new StringBuilder();
	sql_userSql.setLength(0);
	sql_userSql.append("SELECT ");
	sql_userSql.append(" ");
	sql_userSql.append("                           U.PSN_NM, ");
	sql_userSql.append("                           O.ORG_GRP_NM, ");
	sql_userSql.append("                           U.POSITION_NM, ");
	sql_userSql.append("                           U.EMAIL ");
	sql_userSql.append(" ");
	sql_userSql.append(" ");
	sql_userSql.append(" ");
	sql_userSql.append("                FROM ");
	sql_userSql.append("                                 TB_USER_COPY AS U ");
	sql_userSql.append("                LEFT JOIN ");
	sql_userSql.append("                                 TB_ORG_GRP AS O ");
	sql_userSql.append("                ON ");
	sql_userSql.append("                                 U.ORG_GRP_CD = O.ORG_GRP_CD ");
	sql_userSql.append("                LEFT JOIN ");
	sql_userSql.append("                                 JMY_BOARD_ARTICLE AS A ");
	sql_userSql.append("                ON ");
	sql_userSql.append("                                 U.USER_IDX = A.NUM1 AND  A.BOARD_ID = '00014' ");
	sql_userSql.append("                WHERE ");
	sql_userSql.append("                                 1=1 ");
	sql_userSql.append("                AND ");
	sql_userSql.append("                                 U.USER_IDX = '^userIdx^' ");
	sql_userSql.append("                AND ");
	sql_userSql.append("                                 U.DELETE_YN != 'Y' ");
	initializer.prepareQuery("sql_userSql", sql_userSql.toString());
}

private Logger logger = Logger.getLogger("com.activeintra");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_B2 = "";
	String sheet10_G2 = "";
	String sheet10_B3 = "";
	String sheet10_O3 = "";
	String sheet10_T3 = "";
	String sheet10_Y3 = "";
	String sheet10_O6 = "";
	String sheet10_T6 = "";
	String sheet10_Y6 = "";
	String sheet10_B8 = "";
	String sheet10_B11 = "";
	String sheet10_G11 = "";
	String sheet10_B12 = "";
	String sheet10_G12 = "";
	String sheet10_B13 = "";
	String sheet10_G13 = "";
	String sheet10_B14 = "";
	String sheet10_G14 = "";
	String sheet10_B15 = "";
	String sheet10_G15 = "";
	String sheet10_B17 = "";
	String sheet10_B20 = "";
	String sheet10_G20 = "";
	String sheet10_H20 = "";
	String sheet10_B21 = "";
	String sheet10_G21 = "";
	String sheet10_O21 = "";
	String sheet10_T21 = "";
	String sheet10_B22 = "";
	String sheet10_G22 = "";
	String sheet10_O22 = "";
	String sheet10_T22 = "";
	String sheet10_B23 = "";
	String sheet10_G23 = "";
	String sheet10_O23 = "";
	String sheet10_T23 = "";
	String sheet10_B24 = "";
	String sheet10_G24 = "";
	String sheet10_O24 = "";
	String sheet10_T24 = "";
	String sheet10_B25 = "";
	String sheet10_G25 = "";
	String sheet10_O25 = "";
	String sheet10_T25 = "";
	String sheet10_B26 = "";
	String sheet10_G26 = "";
	String sheet10_O26 = "";
	String sheet10_T26 = "";
	String sheet10_B27 = "";
	String sheet10_G27 = "";
	String sheet10_O27 = "";
	String sheet10_T27 = "";
	String sheet10_B28 = "";
	String sheet10_G28 = "";
	String sheet10_B29 = "";
	String sheet10_G29 = "";
	String sheet10_B30 = "";
	String sheet10_G30 = "";
	String sheet10_B32 = "";

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_jnspcms; 	 //jnspcms Connection 객체
	private java.sql.PreparedStatement stat_equSql;		//ResultSet equSql 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet equSql;		//ResultSet equSql 객체
	private java.sql.PreparedStatement stat_yeyaSql;		//ResultSet yeyaSql 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet yeyaSql;		//ResultSet yeyaSql 객체
	private java.sql.PreparedStatement stat_userSql;		//ResultSet userSql 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet userSql;		//ResultSet userSql 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_equSql = new StringBuilder();		//ResultSet equSql 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_yeyaSql = new StringBuilder();		//ResultSet yeyaSql 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_userSql = new StringBuilder();		//ResultSet userSql 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet equSql 객체에서 필드 값을 받는 쿼리 필드 변수
	private String equSql_RND_EQU_IDX;
	private String equSql_FIXED_ASET_NO;
	private String equSql_KOR_NM;
	private String equSql_ENG_NM;
	private String equSql_NTIS_EQUIP_INFO;

	//ResultSet yeyaSql 객체에서 필드 값을 받는 쿼리 필드 변수
	private String yeyaSql_USE_DT;
	private String yeyaSql_REAL_DT;
	private String yeyaSql_USE_ST_DT;
	private String yeyaSql_USE_ED_DT;
	private String yeyaSql_ORDER_DT;
	private String yeyaSql_ORDER_DATA;
	private String yeyaSql_REAL_USE_ST_DT;
	private String yeyaSql_REAL_USE_ED_DT;
	private String yeyaSql_PSN_NM;
	private String yeyaSql_EMAIL;
	private String yeyaSql_PHONE;
	private String yeyaSql_DEPT_NM;
	private String yeyaSql_CORP_RESPONSIBLE_USER;
	private String yeyaSql_KOR_NM;
	private String yeyaSql_ENG_NM;
	private String yeyaSql_MODEL_NM;
	private String yeyaSql_SAMPLE_NM;
	private String yeyaSql_SAMPLE_NO;
	private String yeyaSql_USE_MEAN;
	private String yeyaSql_RENTAL_INFO;
	private String yeyaSql_USE_MARK_TEXT;
	private String yeyaSql_USE_PURPOSE;
	private String yeyaSql_SAMPLE_MATTER;
	private String yeyaSql_ORG_RECEIPT_NO;

	//ResultSet userSql 객체에서 필드 값을 받는 쿼리 필드 변수
	private String userSql_PSN_NM;
	private String userSql_ORG_GRP_NM;
	private String userSql_POSITION_NM;
	private String userSql_EMAIL;

	//파라미터 변수 선언
	String rndEquIdx_Param;
	String equOrderIdx_Param;
	String userIdx_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "56 70 56 70");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(e);
			throw e;
		}finally{    //finally 구문
			//DataSet Close
			cleanup(userSql, stat_userSql, null, null);
			cleanup(yeyaSql, stat_yeyaSql, null, null);
			cleanup(equSql, stat_equSql, null, null);
			cleanup(null, null, null, conn_jnspcms);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "56 70 56 70");
		initSheetVariant(68, 82, 528, 758, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromview(true, true);    //Void 밴드 호출
		getScriptFromview4(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----view VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : view
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromview(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=668;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet yeyaSql 객체의 생성
			if(yeyaSql==null){
				yeyaSql = stat_yeyaSql.executeQuery();
			}else{
				yeyaSql.beforeFirst();
			}
			//ResultSet equSql 객체의 생성
			if(equSql==null){
				equSql = stat_equSql.executeQuery();
			}else{
				equSql.beforeFirst();
			}
			//ResultSet userSql 객체의 생성
			if(userSql==null){
				userSql = stat_userSql.executeQuery();
			}else{
				userSql.beforeFirst();
			}

			//데이터 fetch
			if(yeyaSql.next()){
				setFieldVariableFromyeyaSql();	//ResultSet yeyaSql에서 필드 값 설정
			}else{
				setFieldInitFromyeyaSql();	//ResultSet yeyaSql의 필드 값 초기화
			}
			if(equSql.next()){
				setFieldVariableFromequSql();	//ResultSet equSql에서 필드 값 설정
			}else{
				setFieldInitFromequSql();	//ResultSet equSql의 필드 값 초기화
			}
			if(userSql.next()){
				setFieldVariableFromuserSql();	//ResultSet userSql에서 필드 값 설정
			}else{
				setFieldInitFromuserSql();	//ResultSet userSql의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_G2="";
			sheet10_G11="";
			sheet10_G12="";
			sheet10_G13="";
			sheet10_G14="";
			sheet10_G15="";
			sheet10_G21="";
			sheet10_T21="";
			sheet10_G22="";
			sheet10_T22="";
			sheet10_G23="";
			sheet10_T23="";
			sheet10_G24="";
			sheet10_T24="";
			sheet10_G25="";
			sheet10_T25="";
			sheet10_G26="";
			sheet10_T26="";
			sheet10_G27="";
			sheet10_T27="";
			sheet10_G28="";
			sheet10_G29="";
			sheet10_G30="";
			sheet10_B32="";

			//데이터 변수 할당
			sheet10_B2="접수번호\n";
			sheet10_G2 = String.valueOf(yeyaSql_ORG_RECEIPT_NO);
			sheet10_B3="장비 이용 신청서";
			sheet10_O3="담당";
			sheet10_T3="확인";
			sheet10_Y3="결재";
			sheet10_O6="/";
			sheet10_T6="/";
			sheet10_Y6="/";
			sheet10_B8="장비 정보";
			sheet10_B11="NTIS등록번호";
			sheet10_G11 = equSql_NTIS_EQUIP_INFO;
			sheet10_B12="JEINET 등록번호";
			sheet10_G12 = equSql_RND_EQU_IDX;
			sheet10_B13="고정자산관리번호";
			sheet10_G13 = equSql_FIXED_ASET_NO;
			sheet10_B14="한글장비명";
			sheet10_G14 = equSql_KOR_NM;
			sheet10_B15="영문장비명";
			sheet10_G15 = equSql_ENG_NM;
			sheet10_B17="예약정보";
			sheet10_B20="JEINET 예약번호";
			sheet10_G20="J - ";
			sheet10_H20="" + equOrderIdx_Param + "";
			sheet10_B21="예약신청일";
			sheet10_G21 = yeyaSql_ORDER_DT;
			sheet10_O21="기관접수일";
			sheet10_T21 = yeyaSql_ORDER_DATA;
			sheet10_B22="이용희망기간";
			sheet10_G22 = yeyaSql_USE_DT;
			sheet10_O22="이용확정기간";
			sheet10_T22 = yeyaSql_REAL_DT;
			sheet10_B23="이용자명";
			sheet10_G23 = yeyaSql_PSN_NM;
			sheet10_O23="연락처";
			sheet10_T23 = yeyaSql_EMAIL;
			sheet10_B24="소속기관명";
			sheet10_G24 = userSql_ORG_GRP_NM;
			sheet10_O24="소속부서/센터";
			sheet10_T24 = yeyaSql_DEPT_NM;
			sheet10_B25="신청자 직위";
			sheet10_G25 = userSql_POSITION_NM;
			sheet10_O25="책임자";
			sheet10_T25 = yeyaSql_CORP_RESPONSIBLE_USER;
			sheet10_B26="장비명";
			sheet10_G26 = yeyaSql_KOR_NM;
			sheet10_O26="모델명";
			sheet10_T26 = yeyaSql_MODEL_NM;
			sheet10_B27="시료명(시료수)";
			sheet10_G27 = yeyaSql_SAMPLE_NM;
			sheet10_O27="사용구분";
			sheet10_T27 = yeyaSql_USE_MEAN;
			sheet10_B28="이용료안내";
			sheet10_G28 = yeyaSql_RENTAL_INFO;
			sheet10_B29="이용목적";
			sheet10_G29 = yeyaSql_USE_PURPOSE;
			sheet10_B30="특이사항";
			sheet10_G30 = yeyaSql_SAMPLE_MATTER;
			sheet10_B32 = yeyaSql_USE_MARK_TEXT;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptview();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----view4 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : view4
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromview4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=7;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptview4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----view 스크립트 문 출력 함수----
	private void writeScriptview( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), "", "sheet10_A1", mapStyle.get("sheet10_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B1"), nYCurPos+mapTop.get("sheet10_B1"), mapWidth.get("sheet10_B1"), mapHeight.get("sheet10_B1"), "", "sheet10_B1", mapStyle.get("sheet10_B1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C1"), nYCurPos+mapTop.get("sheet10_C1"), mapWidth.get("sheet10_C1"), mapHeight.get("sheet10_C1"), "", "sheet10_C1", mapStyle.get("sheet10_C1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_D1"), nYCurPos+mapTop.get("sheet10_D1"), mapWidth.get("sheet10_D1"), mapHeight.get("sheet10_D1"), "", "sheet10_D1", mapStyle.get("sheet10_D1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_E1"), nYCurPos+mapTop.get("sheet10_E1"), mapWidth.get("sheet10_E1"), mapHeight.get("sheet10_E1"), "", "sheet10_E1", mapStyle.get("sheet10_E1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F1"), nYCurPos+mapTop.get("sheet10_F1"), mapWidth.get("sheet10_F1"), mapHeight.get("sheet10_F1"), "", "sheet10_F1", mapStyle.get("sheet10_F1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G1"), nYCurPos+mapTop.get("sheet10_G1"), mapWidth.get("sheet10_G1"), mapHeight.get("sheet10_G1"), "", "sheet10_G1", mapStyle.get("sheet10_G1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_H1"), nYCurPos+mapTop.get("sheet10_H1"), mapWidth.get("sheet10_H1"), mapHeight.get("sheet10_H1"), "", "sheet10_H1", mapStyle.get("sheet10_H1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_I1"), nYCurPos+mapTop.get("sheet10_I1"), mapWidth.get("sheet10_I1"), mapHeight.get("sheet10_I1"), "", "sheet10_I1", mapStyle.get("sheet10_I1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_J1"), nYCurPos+mapTop.get("sheet10_J1"), mapWidth.get("sheet10_J1"), mapHeight.get("sheet10_J1"), "", "sheet10_J1", mapStyle.get("sheet10_J1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_K1"), nYCurPos+mapTop.get("sheet10_K1"), mapWidth.get("sheet10_K1"), mapHeight.get("sheet10_K1"), "", "sheet10_K1", mapStyle.get("sheet10_K1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_L1"), nYCurPos+mapTop.get("sheet10_L1"), mapWidth.get("sheet10_L1"), mapHeight.get("sheet10_L1"), "", "sheet10_L1", mapStyle.get("sheet10_L1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_M1"), nYCurPos+mapTop.get("sheet10_M1"), mapWidth.get("sheet10_M1"), mapHeight.get("sheet10_M1"), "", "sheet10_M1", mapStyle.get("sheet10_M1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_N1"), nYCurPos+mapTop.get("sheet10_N1"), mapWidth.get("sheet10_N1"), mapHeight.get("sheet10_N1"), "", "sheet10_N1", mapStyle.get("sheet10_N1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O1"), nYCurPos+mapTop.get("sheet10_O1"), mapWidth.get("sheet10_O1"), mapHeight.get("sheet10_O1"), "", "sheet10_O1", mapStyle.get("sheet10_O1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_P1"), nYCurPos+mapTop.get("sheet10_P1"), mapWidth.get("sheet10_P1"), mapHeight.get("sheet10_P1"), "", "sheet10_P1", mapStyle.get("sheet10_P1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Q1"), nYCurPos+mapTop.get("sheet10_Q1"), mapWidth.get("sheet10_Q1"), mapHeight.get("sheet10_Q1"), "", "sheet10_Q1", mapStyle.get("sheet10_Q1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_R1"), nYCurPos+mapTop.get("sheet10_R1"), mapWidth.get("sheet10_R1"), mapHeight.get("sheet10_R1"), "", "sheet10_R1", mapStyle.get("sheet10_R1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_S1"), nYCurPos+mapTop.get("sheet10_S1"), mapWidth.get("sheet10_S1"), mapHeight.get("sheet10_S1"), "", "sheet10_S1", mapStyle.get("sheet10_S1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T1"), nYCurPos+mapTop.get("sheet10_T1"), mapWidth.get("sheet10_T1"), mapHeight.get("sheet10_T1"), "", "sheet10_T1", mapStyle.get("sheet10_T1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_U1"), nYCurPos+mapTop.get("sheet10_U1"), mapWidth.get("sheet10_U1"), mapHeight.get("sheet10_U1"), "", "sheet10_U1", mapStyle.get("sheet10_U1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_V1"), nYCurPos+mapTop.get("sheet10_V1"), mapWidth.get("sheet10_V1"), mapHeight.get("sheet10_V1"), "", "sheet10_V1", mapStyle.get("sheet10_V1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_W1"), nYCurPos+mapTop.get("sheet10_W1"), mapWidth.get("sheet10_W1"), mapHeight.get("sheet10_W1"), "", "sheet10_W1", mapStyle.get("sheet10_W1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_X1"), nYCurPos+mapTop.get("sheet10_X1"), mapWidth.get("sheet10_X1"), mapHeight.get("sheet10_X1"), "", "sheet10_X1", mapStyle.get("sheet10_X1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Y1"), nYCurPos+mapTop.get("sheet10_Y1"), mapWidth.get("sheet10_Y1"), mapHeight.get("sheet10_Y1"), "", "sheet10_Y1", mapStyle.get("sheet10_Y1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Z1"), nYCurPos+mapTop.get("sheet10_Z1"), mapWidth.get("sheet10_Z1"), mapHeight.get("sheet10_Z1"), "", "sheet10_Z1", mapStyle.get("sheet10_Z1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AA1"), nYCurPos+mapTop.get("sheet10_AA1"), mapWidth.get("sheet10_AA1"), mapHeight.get("sheet10_AA1"), "", "sheet10_AA1", mapStyle.get("sheet10_AA1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AB1"), nYCurPos+mapTop.get("sheet10_AB1"), mapWidth.get("sheet10_AB1"), mapHeight.get("sheet10_AB1"), "", "sheet10_AB1", mapStyle.get("sheet10_AB1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AC1"), nYCurPos+mapTop.get("sheet10_AC1"), mapWidth.get("sheet10_AC1"), mapHeight.get("sheet10_AC1"), "", "sheet10_AC1", mapStyle.get("sheet10_AC1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD1"), nYCurPos+mapTop.get("sheet10_AD1"), mapWidth.get("sheet10_AD1"), mapHeight.get("sheet10_AD1"), "", "sheet10_AD1", mapStyle.get("sheet10_AD1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A2"), nYCurPos+mapTop.get("sheet10_A2"), mapWidth.get("sheet10_A2"), mapHeight.get("sheet10_A2"), "", "sheet10_A2", mapStyle.get("sheet10_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B2"), nYCurPos+mapTop.get("sheet10_B2"), mapWidth.get("sheet10_B2"), mapHeight.get("sheet10_B2"), sheet10_B2, "sheet10_B2", mapStyle.get("sheet10_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G2"), nYCurPos+mapTop.get("sheet10_G2"), mapWidth.get("sheet10_G2"), mapHeight.get("sheet10_G2"), sheet10_G2, "sheet10_G2", mapStyle.get("sheet10_G2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD2"), nYCurPos+mapTop.get("sheet10_AD2"), mapWidth.get("sheet10_AD2"), mapHeight.get("sheet10_AD2"), "", "sheet10_AD2", mapStyle.get("sheet10_AD2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A3"), nYCurPos+mapTop.get("sheet10_A3"), mapWidth.get("sheet10_A3"), mapHeight.get("sheet10_A3"), "", "sheet10_A3", mapStyle.get("sheet10_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B3"), nYCurPos+mapTop.get("sheet10_B3"), mapWidth.get("sheet10_B3"), mapHeight.get("sheet10_B3"), sheet10_B3, "sheet10_B3", mapStyle.get("sheet10_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O3"), nYCurPos+mapTop.get("sheet10_O3"), mapWidth.get("sheet10_O3"), mapHeight.get("sheet10_O3"), sheet10_O3, "sheet10_O3", mapStyle.get("sheet10_O3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T3"), nYCurPos+mapTop.get("sheet10_T3"), mapWidth.get("sheet10_T3"), mapHeight.get("sheet10_T3"), sheet10_T3, "sheet10_T3", mapStyle.get("sheet10_T3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Y3"), nYCurPos+mapTop.get("sheet10_Y3"), mapWidth.get("sheet10_Y3"), mapHeight.get("sheet10_Y3"), sheet10_Y3, "sheet10_Y3", mapStyle.get("sheet10_Y3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD3"), nYCurPos+mapTop.get("sheet10_AD3"), mapWidth.get("sheet10_AD3"), mapHeight.get("sheet10_AD3"), "", "sheet10_AD3", mapStyle.get("sheet10_AD3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A4"), nYCurPos+mapTop.get("sheet10_A4"), mapWidth.get("sheet10_A4"), mapHeight.get("sheet10_A4"), "", "sheet10_A4", mapStyle.get("sheet10_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O4"), nYCurPos+mapTop.get("sheet10_O4"), mapWidth.get("sheet10_O4"), mapHeight.get("sheet10_O4"), "", "sheet10_O4", mapStyle.get("sheet10_O4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T4"), nYCurPos+mapTop.get("sheet10_T4"), mapWidth.get("sheet10_T4"), mapHeight.get("sheet10_T4"), "", "sheet10_T4", mapStyle.get("sheet10_T4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Y4"), nYCurPos+mapTop.get("sheet10_Y4"), mapWidth.get("sheet10_Y4"), mapHeight.get("sheet10_Y4"), "", "sheet10_Y4", mapStyle.get("sheet10_Y4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD4"), nYCurPos+mapTop.get("sheet10_AD4"), mapWidth.get("sheet10_AD4"), mapHeight.get("sheet10_AD4"), "", "sheet10_AD4", mapStyle.get("sheet10_AD4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A5"), nYCurPos+mapTop.get("sheet10_A5"), mapWidth.get("sheet10_A5"), mapHeight.get("sheet10_A5"), "", "sheet10_A5", mapStyle.get("sheet10_A5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD5"), nYCurPos+mapTop.get("sheet10_AD5"), mapWidth.get("sheet10_AD5"), mapHeight.get("sheet10_AD5"), "", "sheet10_AD5", mapStyle.get("sheet10_AD5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A6"), nYCurPos+mapTop.get("sheet10_A6"), mapWidth.get("sheet10_A6"), mapHeight.get("sheet10_A6"), "", "sheet10_A6", mapStyle.get("sheet10_A6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O6"), nYCurPos+mapTop.get("sheet10_O6"), mapWidth.get("sheet10_O6"), mapHeight.get("sheet10_O6"), sheet10_O6, "sheet10_O6", mapStyle.get("sheet10_O6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T6"), nYCurPos+mapTop.get("sheet10_T6"), mapWidth.get("sheet10_T6"), mapHeight.get("sheet10_T6"), sheet10_T6, "sheet10_T6", mapStyle.get("sheet10_T6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Y6"), nYCurPos+mapTop.get("sheet10_Y6"), mapWidth.get("sheet10_Y6"), mapHeight.get("sheet10_Y6"), sheet10_Y6, "sheet10_Y6", mapStyle.get("sheet10_Y6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD6"), nYCurPos+mapTop.get("sheet10_AD6"), mapWidth.get("sheet10_AD6"), mapHeight.get("sheet10_AD6"), "", "sheet10_AD6", mapStyle.get("sheet10_AD6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A7"), nYCurPos+mapTop.get("sheet10_A7"), mapWidth.get("sheet10_A7"), mapHeight.get("sheet10_A7"), "", "sheet10_A7", mapStyle.get("sheet10_A7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD7"), nYCurPos+mapTop.get("sheet10_AD7"), mapWidth.get("sheet10_AD7"), mapHeight.get("sheet10_AD7"), "", "sheet10_AD7", mapStyle.get("sheet10_AD7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A8"), nYCurPos+mapTop.get("sheet10_A8"), mapWidth.get("sheet10_A8"), mapHeight.get("sheet10_A8"), "", "sheet10_A8", mapStyle.get("sheet10_A8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B8"), nYCurPos+mapTop.get("sheet10_B8"), mapWidth.get("sheet10_B8"), mapHeight.get("sheet10_B8"), sheet10_B8, "sheet10_B8", mapStyle.get("sheet10_B8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD8"), nYCurPos+mapTop.get("sheet10_AD8"), mapWidth.get("sheet10_AD8"), mapHeight.get("sheet10_AD8"), "", "sheet10_AD8", mapStyle.get("sheet10_AD8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A9"), nYCurPos+mapTop.get("sheet10_A9"), mapWidth.get("sheet10_A9"), mapHeight.get("sheet10_A9"), "", "sheet10_A9", mapStyle.get("sheet10_A9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD9"), nYCurPos+mapTop.get("sheet10_AD9"), mapWidth.get("sheet10_AD9"), mapHeight.get("sheet10_AD9"), "", "sheet10_AD9", mapStyle.get("sheet10_AD9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A10"), nYCurPos+mapTop.get("sheet10_A10"), mapWidth.get("sheet10_A10"), mapHeight.get("sheet10_A10"), "", "sheet10_A10", mapStyle.get("sheet10_A10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD10"), nYCurPos+mapTop.get("sheet10_AD10"), mapWidth.get("sheet10_AD10"), mapHeight.get("sheet10_AD10"), "", "sheet10_AD10", mapStyle.get("sheet10_AD10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A11"), nYCurPos+mapTop.get("sheet10_A11"), mapWidth.get("sheet10_A11"), mapHeight.get("sheet10_A11"), "", "sheet10_A11", mapStyle.get("sheet10_A11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B11"), nYCurPos+mapTop.get("sheet10_B11"), mapWidth.get("sheet10_B11"), mapHeight.get("sheet10_B11"), sheet10_B11, "sheet10_B11", mapStyle.get("sheet10_B11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G11"), nYCurPos+mapTop.get("sheet10_G11"), mapWidth.get("sheet10_G11"), mapHeight.get("sheet10_G11"), sheet10_G11, "sheet10_G11", mapStyle.get("sheet10_G11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD11"), nYCurPos+mapTop.get("sheet10_AD11"), mapWidth.get("sheet10_AD11"), mapHeight.get("sheet10_AD11"), "", "sheet10_AD11", mapStyle.get("sheet10_AD11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A12"), nYCurPos+mapTop.get("sheet10_A12"), mapWidth.get("sheet10_A12"), mapHeight.get("sheet10_A12"), "", "sheet10_A12", mapStyle.get("sheet10_A12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B12"), nYCurPos+mapTop.get("sheet10_B12"), mapWidth.get("sheet10_B12"), mapHeight.get("sheet10_B12"), sheet10_B12, "sheet10_B12", mapStyle.get("sheet10_B12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G12"), nYCurPos+mapTop.get("sheet10_G12"), mapWidth.get("sheet10_G12"), mapHeight.get("sheet10_G12"), sheet10_G12, "sheet10_G12", mapStyle.get("sheet10_G12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD12"), nYCurPos+mapTop.get("sheet10_AD12"), mapWidth.get("sheet10_AD12"), mapHeight.get("sheet10_AD12"), "", "sheet10_AD12", mapStyle.get("sheet10_AD12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A13"), nYCurPos+mapTop.get("sheet10_A13"), mapWidth.get("sheet10_A13"), mapHeight.get("sheet10_A13"), "", "sheet10_A13", mapStyle.get("sheet10_A13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B13"), nYCurPos+mapTop.get("sheet10_B13"), mapWidth.get("sheet10_B13"), mapHeight.get("sheet10_B13"), sheet10_B13, "sheet10_B13", mapStyle.get("sheet10_B13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G13"), nYCurPos+mapTop.get("sheet10_G13"), mapWidth.get("sheet10_G13"), mapHeight.get("sheet10_G13"), sheet10_G13, "sheet10_G13", mapStyle.get("sheet10_G13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD13"), nYCurPos+mapTop.get("sheet10_AD13"), mapWidth.get("sheet10_AD13"), mapHeight.get("sheet10_AD13"), "", "sheet10_AD13", mapStyle.get("sheet10_AD13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A14"), nYCurPos+mapTop.get("sheet10_A14"), mapWidth.get("sheet10_A14"), mapHeight.get("sheet10_A14"), "", "sheet10_A14", mapStyle.get("sheet10_A14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B14"), nYCurPos+mapTop.get("sheet10_B14"), mapWidth.get("sheet10_B14"), mapHeight.get("sheet10_B14"), sheet10_B14, "sheet10_B14", mapStyle.get("sheet10_B14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G14"), nYCurPos+mapTop.get("sheet10_G14"), mapWidth.get("sheet10_G14"), mapHeight.get("sheet10_G14"), sheet10_G14, "sheet10_G14", mapStyle.get("sheet10_G14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD14"), nYCurPos+mapTop.get("sheet10_AD14"), mapWidth.get("sheet10_AD14"), mapHeight.get("sheet10_AD14"), "", "sheet10_AD14", mapStyle.get("sheet10_AD14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A15"), nYCurPos+mapTop.get("sheet10_A15"), mapWidth.get("sheet10_A15"), mapHeight.get("sheet10_A15"), "", "sheet10_A15", mapStyle.get("sheet10_A15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B15"), nYCurPos+mapTop.get("sheet10_B15"), mapWidth.get("sheet10_B15"), mapHeight.get("sheet10_B15"), sheet10_B15, "sheet10_B15", mapStyle.get("sheet10_B15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G15"), nYCurPos+mapTop.get("sheet10_G15"), mapWidth.get("sheet10_G15"), mapHeight.get("sheet10_G15"), sheet10_G15, "sheet10_G15", mapStyle.get("sheet10_G15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD15"), nYCurPos+mapTop.get("sheet10_AD15"), mapWidth.get("sheet10_AD15"), mapHeight.get("sheet10_AD15"), "", "sheet10_AD15", mapStyle.get("sheet10_AD15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A16"), nYCurPos+mapTop.get("sheet10_A16"), mapWidth.get("sheet10_A16"), mapHeight.get("sheet10_A16"), "", "sheet10_A16", mapStyle.get("sheet10_A16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD16"), nYCurPos+mapTop.get("sheet10_AD16"), mapWidth.get("sheet10_AD16"), mapHeight.get("sheet10_AD16"), "", "sheet10_AD16", mapStyle.get("sheet10_AD16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A17"), nYCurPos+mapTop.get("sheet10_A17"), mapWidth.get("sheet10_A17"), mapHeight.get("sheet10_A17"), "", "sheet10_A17", mapStyle.get("sheet10_A17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B17"), nYCurPos+mapTop.get("sheet10_B17"), mapWidth.get("sheet10_B17"), mapHeight.get("sheet10_B17"), sheet10_B17, "sheet10_B17", mapStyle.get("sheet10_B17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD17"), nYCurPos+mapTop.get("sheet10_AD17"), mapWidth.get("sheet10_AD17"), mapHeight.get("sheet10_AD17"), "", "sheet10_AD17", mapStyle.get("sheet10_AD17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A18"), nYCurPos+mapTop.get("sheet10_A18"), mapWidth.get("sheet10_A18"), mapHeight.get("sheet10_A18"), "", "sheet10_A18", mapStyle.get("sheet10_A18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD18"), nYCurPos+mapTop.get("sheet10_AD18"), mapWidth.get("sheet10_AD18"), mapHeight.get("sheet10_AD18"), "", "sheet10_AD18", mapStyle.get("sheet10_AD18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A19"), nYCurPos+mapTop.get("sheet10_A19"), mapWidth.get("sheet10_A19"), mapHeight.get("sheet10_A19"), "", "sheet10_A19", mapStyle.get("sheet10_A19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD19"), nYCurPos+mapTop.get("sheet10_AD19"), mapWidth.get("sheet10_AD19"), mapHeight.get("sheet10_AD19"), "", "sheet10_AD19", mapStyle.get("sheet10_AD19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A20"), nYCurPos+mapTop.get("sheet10_A20"), mapWidth.get("sheet10_A20"), mapHeight.get("sheet10_A20"), "", "sheet10_A20", mapStyle.get("sheet10_A20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B20"), nYCurPos+mapTop.get("sheet10_B20"), mapWidth.get("sheet10_B20"), mapHeight.get("sheet10_B20"), sheet10_B20, "sheet10_B20", mapStyle.get("sheet10_B20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G20"), nYCurPos+mapTop.get("sheet10_G20"), mapWidth.get("sheet10_G20"), mapHeight.get("sheet10_G20"), sheet10_G20, "sheet10_G20", mapStyle.get("sheet10_G20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_H20"), nYCurPos+mapTop.get("sheet10_H20"), mapWidth.get("sheet10_H20"), mapHeight.get("sheet10_H20"), sheet10_H20, "sheet10_H20", mapStyle.get("sheet10_H20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD20"), nYCurPos+mapTop.get("sheet10_AD20"), mapWidth.get("sheet10_AD20"), mapHeight.get("sheet10_AD20"), "", "sheet10_AD20", mapStyle.get("sheet10_AD20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A21"), nYCurPos+mapTop.get("sheet10_A21"), mapWidth.get("sheet10_A21"), mapHeight.get("sheet10_A21"), "", "sheet10_A21", mapStyle.get("sheet10_A21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B21"), nYCurPos+mapTop.get("sheet10_B21"), mapWidth.get("sheet10_B21"), mapHeight.get("sheet10_B21"), sheet10_B21, "sheet10_B21", mapStyle.get("sheet10_B21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G21"), nYCurPos+mapTop.get("sheet10_G21"), mapWidth.get("sheet10_G21"), mapHeight.get("sheet10_G21"), sheet10_G21, "sheet10_G21", mapStyle.get("sheet10_G21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O21"), nYCurPos+mapTop.get("sheet10_O21"), mapWidth.get("sheet10_O21"), mapHeight.get("sheet10_O21"), sheet10_O21, "sheet10_O21", mapStyle.get("sheet10_O21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T21"), nYCurPos+mapTop.get("sheet10_T21"), mapWidth.get("sheet10_T21"), mapHeight.get("sheet10_T21"), sheet10_T21, "sheet10_T21", mapStyle.get("sheet10_T21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD21"), nYCurPos+mapTop.get("sheet10_AD21"), mapWidth.get("sheet10_AD21"), mapHeight.get("sheet10_AD21"), "", "sheet10_AD21", mapStyle.get("sheet10_AD21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A22"), nYCurPos+mapTop.get("sheet10_A22"), mapWidth.get("sheet10_A22"), mapHeight.get("sheet10_A22"), "", "sheet10_A22", mapStyle.get("sheet10_A22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B22"), nYCurPos+mapTop.get("sheet10_B22"), mapWidth.get("sheet10_B22"), mapHeight.get("sheet10_B22"), sheet10_B22, "sheet10_B22", mapStyle.get("sheet10_B22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G22"), nYCurPos+mapTop.get("sheet10_G22"), mapWidth.get("sheet10_G22"), mapHeight.get("sheet10_G22"), sheet10_G22, "sheet10_G22", mapStyle.get("sheet10_G22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O22"), nYCurPos+mapTop.get("sheet10_O22"), mapWidth.get("sheet10_O22"), mapHeight.get("sheet10_O22"), sheet10_O22, "sheet10_O22", mapStyle.get("sheet10_O22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T22"), nYCurPos+mapTop.get("sheet10_T22"), mapWidth.get("sheet10_T22"), mapHeight.get("sheet10_T22"), sheet10_T22, "sheet10_T22", mapStyle.get("sheet10_T22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD22"), nYCurPos+mapTop.get("sheet10_AD22"), mapWidth.get("sheet10_AD22"), mapHeight.get("sheet10_AD22"), "", "sheet10_AD22", mapStyle.get("sheet10_AD22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A23"), nYCurPos+mapTop.get("sheet10_A23"), mapWidth.get("sheet10_A23"), mapHeight.get("sheet10_A23"), "", "sheet10_A23", mapStyle.get("sheet10_A23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B23"), nYCurPos+mapTop.get("sheet10_B23"), mapWidth.get("sheet10_B23"), mapHeight.get("sheet10_B23"), sheet10_B23, "sheet10_B23", mapStyle.get("sheet10_B23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G23"), nYCurPos+mapTop.get("sheet10_G23"), mapWidth.get("sheet10_G23"), mapHeight.get("sheet10_G23"), sheet10_G23, "sheet10_G23", mapStyle.get("sheet10_G23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O23"), nYCurPos+mapTop.get("sheet10_O23"), mapWidth.get("sheet10_O23"), mapHeight.get("sheet10_O23"), sheet10_O23, "sheet10_O23", mapStyle.get("sheet10_O23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T23"), nYCurPos+mapTop.get("sheet10_T23"), mapWidth.get("sheet10_T23"), mapHeight.get("sheet10_T23"), sheet10_T23, "sheet10_T23", mapStyle.get("sheet10_T23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD23"), nYCurPos+mapTop.get("sheet10_AD23"), mapWidth.get("sheet10_AD23"), mapHeight.get("sheet10_AD23"), "", "sheet10_AD23", mapStyle.get("sheet10_AD23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A24"), nYCurPos+mapTop.get("sheet10_A24"), mapWidth.get("sheet10_A24"), mapHeight.get("sheet10_A24"), "", "sheet10_A24", mapStyle.get("sheet10_A24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B24"), nYCurPos+mapTop.get("sheet10_B24"), mapWidth.get("sheet10_B24"), mapHeight.get("sheet10_B24"), sheet10_B24, "sheet10_B24", mapStyle.get("sheet10_B24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G24"), nYCurPos+mapTop.get("sheet10_G24"), mapWidth.get("sheet10_G24"), mapHeight.get("sheet10_G24"), sheet10_G24, "sheet10_G24", mapStyle.get("sheet10_G24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O24"), nYCurPos+mapTop.get("sheet10_O24"), mapWidth.get("sheet10_O24"), mapHeight.get("sheet10_O24"), sheet10_O24, "sheet10_O24", mapStyle.get("sheet10_O24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T24"), nYCurPos+mapTop.get("sheet10_T24"), mapWidth.get("sheet10_T24"), mapHeight.get("sheet10_T24"), sheet10_T24, "sheet10_T24", mapStyle.get("sheet10_T24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD24"), nYCurPos+mapTop.get("sheet10_AD24"), mapWidth.get("sheet10_AD24"), mapHeight.get("sheet10_AD24"), "", "sheet10_AD24", mapStyle.get("sheet10_AD24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A25"), nYCurPos+mapTop.get("sheet10_A25"), mapWidth.get("sheet10_A25"), mapHeight.get("sheet10_A25"), "", "sheet10_A25", mapStyle.get("sheet10_A25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B25"), nYCurPos+mapTop.get("sheet10_B25"), mapWidth.get("sheet10_B25"), mapHeight.get("sheet10_B25"), sheet10_B25, "sheet10_B25", mapStyle.get("sheet10_B25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G25"), nYCurPos+mapTop.get("sheet10_G25"), mapWidth.get("sheet10_G25"), mapHeight.get("sheet10_G25"), sheet10_G25, "sheet10_G25", mapStyle.get("sheet10_G25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O25"), nYCurPos+mapTop.get("sheet10_O25"), mapWidth.get("sheet10_O25"), mapHeight.get("sheet10_O25"), sheet10_O25, "sheet10_O25", mapStyle.get("sheet10_O25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T25"), nYCurPos+mapTop.get("sheet10_T25"), mapWidth.get("sheet10_T25"), mapHeight.get("sheet10_T25"), sheet10_T25, "sheet10_T25", mapStyle.get("sheet10_T25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD25"), nYCurPos+mapTop.get("sheet10_AD25"), mapWidth.get("sheet10_AD25"), mapHeight.get("sheet10_AD25"), "", "sheet10_AD25", mapStyle.get("sheet10_AD25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A26"), nYCurPos+mapTop.get("sheet10_A26"), mapWidth.get("sheet10_A26"), mapHeight.get("sheet10_A26"), "", "sheet10_A26", mapStyle.get("sheet10_A26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B26"), nYCurPos+mapTop.get("sheet10_B26"), mapWidth.get("sheet10_B26"), mapHeight.get("sheet10_B26"), sheet10_B26, "sheet10_B26", mapStyle.get("sheet10_B26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G26"), nYCurPos+mapTop.get("sheet10_G26"), mapWidth.get("sheet10_G26"), mapHeight.get("sheet10_G26"), sheet10_G26, "sheet10_G26", mapStyle.get("sheet10_G26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_H26"), nYCurPos+mapTop.get("sheet10_H26"), mapWidth.get("sheet10_H26"), mapHeight.get("sheet10_H26"), "", "sheet10_H26", mapStyle.get("sheet10_H26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_I26"), nYCurPos+mapTop.get("sheet10_I26"), mapWidth.get("sheet10_I26"), mapHeight.get("sheet10_I26"), "", "sheet10_I26", mapStyle.get("sheet10_I26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_J26"), nYCurPos+mapTop.get("sheet10_J26"), mapWidth.get("sheet10_J26"), mapHeight.get("sheet10_J26"), "", "sheet10_J26", mapStyle.get("sheet10_J26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_K26"), nYCurPos+mapTop.get("sheet10_K26"), mapWidth.get("sheet10_K26"), mapHeight.get("sheet10_K26"), "", "sheet10_K26", mapStyle.get("sheet10_K26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_L26"), nYCurPos+mapTop.get("sheet10_L26"), mapWidth.get("sheet10_L26"), mapHeight.get("sheet10_L26"), "", "sheet10_L26", mapStyle.get("sheet10_L26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_M26"), nYCurPos+mapTop.get("sheet10_M26"), mapWidth.get("sheet10_M26"), mapHeight.get("sheet10_M26"), "", "sheet10_M26", mapStyle.get("sheet10_M26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_N26"), nYCurPos+mapTop.get("sheet10_N26"), mapWidth.get("sheet10_N26"), mapHeight.get("sheet10_N26"), "", "sheet10_N26", mapStyle.get("sheet10_N26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O26"), nYCurPos+mapTop.get("sheet10_O26"), mapWidth.get("sheet10_O26"), mapHeight.get("sheet10_O26"), sheet10_O26, "sheet10_O26", mapStyle.get("sheet10_O26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T26"), nYCurPos+mapTop.get("sheet10_T26"), mapWidth.get("sheet10_T26"), mapHeight.get("sheet10_T26"), sheet10_T26, "sheet10_T26", mapStyle.get("sheet10_T26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD26"), nYCurPos+mapTop.get("sheet10_AD26"), mapWidth.get("sheet10_AD26"), mapHeight.get("sheet10_AD26"), "", "sheet10_AD26", mapStyle.get("sheet10_AD26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A27"), nYCurPos+mapTop.get("sheet10_A27"), mapWidth.get("sheet10_A27"), mapHeight.get("sheet10_A27"), "", "sheet10_A27", mapStyle.get("sheet10_A27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B27"), nYCurPos+mapTop.get("sheet10_B27"), mapWidth.get("sheet10_B27"), mapHeight.get("sheet10_B27"), sheet10_B27, "sheet10_B27", mapStyle.get("sheet10_B27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G27"), nYCurPos+mapTop.get("sheet10_G27"), mapWidth.get("sheet10_G27"), mapHeight.get("sheet10_G27"), sheet10_G27, "sheet10_G27", mapStyle.get("sheet10_G27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_H27"), nYCurPos+mapTop.get("sheet10_H27"), mapWidth.get("sheet10_H27"), mapHeight.get("sheet10_H27"), "", "sheet10_H27", mapStyle.get("sheet10_H27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_I27"), nYCurPos+mapTop.get("sheet10_I27"), mapWidth.get("sheet10_I27"), mapHeight.get("sheet10_I27"), "", "sheet10_I27", mapStyle.get("sheet10_I27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_J27"), nYCurPos+mapTop.get("sheet10_J27"), mapWidth.get("sheet10_J27"), mapHeight.get("sheet10_J27"), "", "sheet10_J27", mapStyle.get("sheet10_J27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_K27"), nYCurPos+mapTop.get("sheet10_K27"), mapWidth.get("sheet10_K27"), mapHeight.get("sheet10_K27"), "", "sheet10_K27", mapStyle.get("sheet10_K27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_L27"), nYCurPos+mapTop.get("sheet10_L27"), mapWidth.get("sheet10_L27"), mapHeight.get("sheet10_L27"), "", "sheet10_L27", mapStyle.get("sheet10_L27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_M27"), nYCurPos+mapTop.get("sheet10_M27"), mapWidth.get("sheet10_M27"), mapHeight.get("sheet10_M27"), "", "sheet10_M27", mapStyle.get("sheet10_M27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_N27"), nYCurPos+mapTop.get("sheet10_N27"), mapWidth.get("sheet10_N27"), mapHeight.get("sheet10_N27"), "", "sheet10_N27", mapStyle.get("sheet10_N27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O27"), nYCurPos+mapTop.get("sheet10_O27"), mapWidth.get("sheet10_O27"), mapHeight.get("sheet10_O27"), sheet10_O27, "sheet10_O27", mapStyle.get("sheet10_O27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T27"), nYCurPos+mapTop.get("sheet10_T27"), mapWidth.get("sheet10_T27"), mapHeight.get("sheet10_T27"), sheet10_T27, "sheet10_T27", mapStyle.get("sheet10_T27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD27"), nYCurPos+mapTop.get("sheet10_AD27"), mapWidth.get("sheet10_AD27"), mapHeight.get("sheet10_AD27"), "", "sheet10_AD27", mapStyle.get("sheet10_AD27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A28"), nYCurPos+mapTop.get("sheet10_A28"), mapWidth.get("sheet10_A28"), mapHeight.get("sheet10_A28"), "", "sheet10_A28", mapStyle.get("sheet10_A28"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B28"), nYCurPos+mapTop.get("sheet10_B28"), mapWidth.get("sheet10_B28"), mapHeight.get("sheet10_B28"), sheet10_B28, "sheet10_B28", mapStyle.get("sheet10_B28"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G28"), nYCurPos+mapTop.get("sheet10_G28"), mapWidth.get("sheet10_G28"), mapHeight.get("sheet10_G28"), sheet10_G28, "sheet10_G28", mapStyle.get("sheet10_G28"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD28"), nYCurPos+mapTop.get("sheet10_AD28"), mapWidth.get("sheet10_AD28"), mapHeight.get("sheet10_AD28"), "", "sheet10_AD28", mapStyle.get("sheet10_AD28"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A29"), nYCurPos+mapTop.get("sheet10_A29"), mapWidth.get("sheet10_A29"), mapHeight.get("sheet10_A29"), "", "sheet10_A29", mapStyle.get("sheet10_A29"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B29"), nYCurPos+mapTop.get("sheet10_B29"), mapWidth.get("sheet10_B29"), mapHeight.get("sheet10_B29"), sheet10_B29, "sheet10_B29", mapStyle.get("sheet10_B29"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G29"), nYCurPos+mapTop.get("sheet10_G29"), mapWidth.get("sheet10_G29"), mapHeight.get("sheet10_G29"), sheet10_G29, "sheet10_G29", mapStyle.get("sheet10_G29"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD29"), nYCurPos+mapTop.get("sheet10_AD29"), mapWidth.get("sheet10_AD29"), mapHeight.get("sheet10_AD29"), "", "sheet10_AD29", mapStyle.get("sheet10_AD29"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A30"), nYCurPos+mapTop.get("sheet10_A30"), mapWidth.get("sheet10_A30"), mapHeight.get("sheet10_A30"), "", "sheet10_A30", mapStyle.get("sheet10_A30"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B30"), nYCurPos+mapTop.get("sheet10_B30"), mapWidth.get("sheet10_B30"), mapHeight.get("sheet10_B30"), sheet10_B30, "sheet10_B30", mapStyle.get("sheet10_B30"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G30"), nYCurPos+mapTop.get("sheet10_G30"), mapWidth.get("sheet10_G30"), mapHeight.get("sheet10_G30"), sheet10_G30, "sheet10_G30", mapStyle.get("sheet10_G30"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD30"), nYCurPos+mapTop.get("sheet10_AD30"), mapWidth.get("sheet10_AD30"), mapHeight.get("sheet10_AD30"), "", "sheet10_AD30", mapStyle.get("sheet10_AD30"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A31"), nYCurPos+mapTop.get("sheet10_A31"), mapWidth.get("sheet10_A31"), mapHeight.get("sheet10_A31"), "", "sheet10_A31", mapStyle.get("sheet10_A31"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD31"), nYCurPos+mapTop.get("sheet10_AD31"), mapWidth.get("sheet10_AD31"), mapHeight.get("sheet10_AD31"), "", "sheet10_AD31", mapStyle.get("sheet10_AD31"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A32"), nYCurPos+mapTop.get("sheet10_A32"), mapWidth.get("sheet10_A32"), mapHeight.get("sheet10_A32"), "", "sheet10_A32", mapStyle.get("sheet10_A32"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B32"), nYCurPos+mapTop.get("sheet10_B32"), mapWidth.get("sheet10_B32"), mapHeight.get("sheet10_B32"), sheet10_B32, "sheet10_B32", mapStyle.get("sheet10_B32"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD32"), nYCurPos+mapTop.get("sheet10_AD32"), mapWidth.get("sheet10_AD32"), mapHeight.get("sheet10_AD32"), "", "sheet10_AD32", mapStyle.get("sheet10_AD32"));
	}

	//----view4 스크립트 문 출력 함수----
	private void writeScriptview4( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A33"), nYCurPos+mapTop.get("sheet10_A33"), mapWidth.get("sheet10_A33"), mapHeight.get("sheet10_A33"), "", "sheet10_A33", mapStyle.get("sheet10_A33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B33"), nYCurPos+mapTop.get("sheet10_B33"), mapWidth.get("sheet10_B33"), mapHeight.get("sheet10_B33"), "", "sheet10_B33", mapStyle.get("sheet10_B33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C33"), nYCurPos+mapTop.get("sheet10_C33"), mapWidth.get("sheet10_C33"), mapHeight.get("sheet10_C33"), "", "sheet10_C33", mapStyle.get("sheet10_C33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_D33"), nYCurPos+mapTop.get("sheet10_D33"), mapWidth.get("sheet10_D33"), mapHeight.get("sheet10_D33"), "", "sheet10_D33", mapStyle.get("sheet10_D33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_E33"), nYCurPos+mapTop.get("sheet10_E33"), mapWidth.get("sheet10_E33"), mapHeight.get("sheet10_E33"), "", "sheet10_E33", mapStyle.get("sheet10_E33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F33"), nYCurPos+mapTop.get("sheet10_F33"), mapWidth.get("sheet10_F33"), mapHeight.get("sheet10_F33"), "", "sheet10_F33", mapStyle.get("sheet10_F33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G33"), nYCurPos+mapTop.get("sheet10_G33"), mapWidth.get("sheet10_G33"), mapHeight.get("sheet10_G33"), "", "sheet10_G33", mapStyle.get("sheet10_G33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_H33"), nYCurPos+mapTop.get("sheet10_H33"), mapWidth.get("sheet10_H33"), mapHeight.get("sheet10_H33"), "", "sheet10_H33", mapStyle.get("sheet10_H33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_I33"), nYCurPos+mapTop.get("sheet10_I33"), mapWidth.get("sheet10_I33"), mapHeight.get("sheet10_I33"), "", "sheet10_I33", mapStyle.get("sheet10_I33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_J33"), nYCurPos+mapTop.get("sheet10_J33"), mapWidth.get("sheet10_J33"), mapHeight.get("sheet10_J33"), "", "sheet10_J33", mapStyle.get("sheet10_J33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_K33"), nYCurPos+mapTop.get("sheet10_K33"), mapWidth.get("sheet10_K33"), mapHeight.get("sheet10_K33"), "", "sheet10_K33", mapStyle.get("sheet10_K33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_L33"), nYCurPos+mapTop.get("sheet10_L33"), mapWidth.get("sheet10_L33"), mapHeight.get("sheet10_L33"), "", "sheet10_L33", mapStyle.get("sheet10_L33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_M33"), nYCurPos+mapTop.get("sheet10_M33"), mapWidth.get("sheet10_M33"), mapHeight.get("sheet10_M33"), "", "sheet10_M33", mapStyle.get("sheet10_M33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_N33"), nYCurPos+mapTop.get("sheet10_N33"), mapWidth.get("sheet10_N33"), mapHeight.get("sheet10_N33"), "", "sheet10_N33", mapStyle.get("sheet10_N33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O33"), nYCurPos+mapTop.get("sheet10_O33"), mapWidth.get("sheet10_O33"), mapHeight.get("sheet10_O33"), "", "sheet10_O33", mapStyle.get("sheet10_O33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_P33"), nYCurPos+mapTop.get("sheet10_P33"), mapWidth.get("sheet10_P33"), mapHeight.get("sheet10_P33"), "", "sheet10_P33", mapStyle.get("sheet10_P33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Q33"), nYCurPos+mapTop.get("sheet10_Q33"), mapWidth.get("sheet10_Q33"), mapHeight.get("sheet10_Q33"), "", "sheet10_Q33", mapStyle.get("sheet10_Q33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_R33"), nYCurPos+mapTop.get("sheet10_R33"), mapWidth.get("sheet10_R33"), mapHeight.get("sheet10_R33"), "", "sheet10_R33", mapStyle.get("sheet10_R33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_S33"), nYCurPos+mapTop.get("sheet10_S33"), mapWidth.get("sheet10_S33"), mapHeight.get("sheet10_S33"), "", "sheet10_S33", mapStyle.get("sheet10_S33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T33"), nYCurPos+mapTop.get("sheet10_T33"), mapWidth.get("sheet10_T33"), mapHeight.get("sheet10_T33"), "", "sheet10_T33", mapStyle.get("sheet10_T33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_U33"), nYCurPos+mapTop.get("sheet10_U33"), mapWidth.get("sheet10_U33"), mapHeight.get("sheet10_U33"), "", "sheet10_U33", mapStyle.get("sheet10_U33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_V33"), nYCurPos+mapTop.get("sheet10_V33"), mapWidth.get("sheet10_V33"), mapHeight.get("sheet10_V33"), "", "sheet10_V33", mapStyle.get("sheet10_V33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_W33"), nYCurPos+mapTop.get("sheet10_W33"), mapWidth.get("sheet10_W33"), mapHeight.get("sheet10_W33"), "", "sheet10_W33", mapStyle.get("sheet10_W33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_X33"), nYCurPos+mapTop.get("sheet10_X33"), mapWidth.get("sheet10_X33"), mapHeight.get("sheet10_X33"), "", "sheet10_X33", mapStyle.get("sheet10_X33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Y33"), nYCurPos+mapTop.get("sheet10_Y33"), mapWidth.get("sheet10_Y33"), mapHeight.get("sheet10_Y33"), "", "sheet10_Y33", mapStyle.get("sheet10_Y33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Z33"), nYCurPos+mapTop.get("sheet10_Z33"), mapWidth.get("sheet10_Z33"), mapHeight.get("sheet10_Z33"), "", "sheet10_Z33", mapStyle.get("sheet10_Z33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AA33"), nYCurPos+mapTop.get("sheet10_AA33"), mapWidth.get("sheet10_AA33"), mapHeight.get("sheet10_AA33"), "", "sheet10_AA33", mapStyle.get("sheet10_AA33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AB33"), nYCurPos+mapTop.get("sheet10_AB33"), mapWidth.get("sheet10_AB33"), mapHeight.get("sheet10_AB33"), "", "sheet10_AB33", mapStyle.get("sheet10_AB33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AC33"), nYCurPos+mapTop.get("sheet10_AC33"), mapWidth.get("sheet10_AC33"), mapHeight.get("sheet10_AC33"), "", "sheet10_AC33", mapStyle.get("sheet10_AC33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_AD33"), nYCurPos+mapTop.get("sheet10_AD33"), mapWidth.get("sheet10_AD33"), mapHeight.get("sheet10_AD33"), "", "sheet10_AD33", mapStyle.get("sheet10_AD33"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//jnspcms Connection 객체 생성
		Class.forName("com.mysql.jdbc.Driver");
		conn_jnspcms = DriverManager.getConnection("jdbc:mysql://jnsp.re.kr:3306/jnspcms?useUnicode=true&characterEncoding=utf-8", "jnspcms", "jnspcms!@12");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_equSql = initializer.configPreparedStatement("sql_equSql", mapParam, conn_jnspcms, null);

		stat_yeyaSql = initializer.configPreparedStatement("sql_yeyaSql", mapParam, conn_jnspcms, null);

		stat_userSql = initializer.configPreparedStatement("sql_userSql", mapParam, conn_jnspcms, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet equSql 객체에서 필드 값 설정 함수
	private void setFieldVariableFromequSql() throws Exception{
		equSql_RND_EQU_IDX = GetB(equSql.getString(1));
		equSql_FIXED_ASET_NO = GetB(equSql.getString(2));
		equSql_KOR_NM = GetB(equSql.getString(3));
		equSql_ENG_NM = GetB(equSql.getString(4));
		equSql_NTIS_EQUIP_INFO = GetB(equSql.getString(5));
	}

	//ResultSet equSql 객체의 필드 값 초기화 함수
	private void setFieldInitFromequSql(){
		equSql_RND_EQU_IDX = "";
		equSql_FIXED_ASET_NO = "";
		equSql_KOR_NM = "";
		equSql_ENG_NM = "";
		equSql_NTIS_EQUIP_INFO = "";
	}

	//ResultSet equSql 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromequSql() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(equSql.getObject(1));
		row.add(equSql.getObject(2));
		row.add(equSql.getObject(3));
		row.add(equSql.getObject(4));
		row.add(equSql.getObject(5));

		return row;
	}

	//ResultSet yeyaSql 객체에서 필드 값 설정 함수
	private void setFieldVariableFromyeyaSql() throws Exception{
		int size;
		Blob blob;
		byte[] buf;

		yeyaSql_USE_DT = GetB(yeyaSql.getString(1));
		yeyaSql_REAL_DT = GetB(yeyaSql.getString(2));
		yeyaSql_USE_ST_DT = GetB(yeyaSql.getString(3));
		yeyaSql_USE_ED_DT = GetB(yeyaSql.getString(4));
		yeyaSql_ORDER_DT = GetB(yeyaSql.getString(5));
		yeyaSql_ORDER_DATA = GetB(yeyaSql.getString(6));
		yeyaSql_REAL_USE_ST_DT = GetB(yeyaSql.getString(7));
		yeyaSql_REAL_USE_ED_DT = GetB(yeyaSql.getString(8));
		yeyaSql_PSN_NM = GetB(yeyaSql.getString(9));
		yeyaSql_EMAIL = GetB(yeyaSql.getString(10));
		yeyaSql_PHONE = GetB(yeyaSql.getString(11));
		yeyaSql_DEPT_NM = GetB(yeyaSql.getString(12));
		yeyaSql_CORP_RESPONSIBLE_USER = GetB(yeyaSql.getString(13));
		yeyaSql_KOR_NM = GetB(yeyaSql.getString(14));
		yeyaSql_ENG_NM = GetB(yeyaSql.getString(15));
		yeyaSql_MODEL_NM = GetB(yeyaSql.getString(16));
		yeyaSql_SAMPLE_NM = GetB(yeyaSql.getString(17));
		yeyaSql_SAMPLE_NO = GetB(yeyaSql.getString(18));
		yeyaSql_USE_MEAN = GetB(yeyaSql.getString(19));
		yeyaSql_RENTAL_INFO = GetB(yeyaSql.getString(20));
		yeyaSql_USE_MARK_TEXT = GetB(yeyaSql.getString(21));
		yeyaSql_USE_PURPOSE = GetB(yeyaSql.getString(22));
		yeyaSql_SAMPLE_MATTER = GetB(yeyaSql.getString(23));
		blob=yeyaSql.getBlob(24);
		if(blob==null){
			size=0;
		}
		else{
			size=(int)blob.length();
		}

		if(size!=0){
			buf=blob.getBytes(1, size);
			yeyaSql_ORG_RECEIPT_NO=new String(com.activeintra.util.Base64.encode(buf));
		}
		else{
			yeyaSql_ORG_RECEIPT_NO="";
		}
	}

	//ResultSet yeyaSql 객체의 필드 값 초기화 함수
	private void setFieldInitFromyeyaSql(){
		yeyaSql_USE_DT = "";
		yeyaSql_REAL_DT = "";
		yeyaSql_USE_ST_DT = "";
		yeyaSql_USE_ED_DT = "";
		yeyaSql_ORDER_DT = "";
		yeyaSql_ORDER_DATA = "";
		yeyaSql_REAL_USE_ST_DT = "";
		yeyaSql_REAL_USE_ED_DT = "";
		yeyaSql_PSN_NM = "";
		yeyaSql_EMAIL = "";
		yeyaSql_PHONE = "";
		yeyaSql_DEPT_NM = "";
		yeyaSql_CORP_RESPONSIBLE_USER = "";
		yeyaSql_KOR_NM = "";
		yeyaSql_ENG_NM = "";
		yeyaSql_MODEL_NM = "";
		yeyaSql_SAMPLE_NM = "";
		yeyaSql_SAMPLE_NO = "";
		yeyaSql_USE_MEAN = "";
		yeyaSql_RENTAL_INFO = "";
		yeyaSql_USE_MARK_TEXT = "";
		yeyaSql_USE_PURPOSE = "";
		yeyaSql_SAMPLE_MATTER = "";
		yeyaSql_ORG_RECEIPT_NO="";
	}

	//ResultSet yeyaSql 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromyeyaSql() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(yeyaSql.getObject(1));
		row.add(yeyaSql.getObject(2));
		row.add(yeyaSql.getObject(3));
		row.add(yeyaSql.getObject(4));
		row.add(yeyaSql.getObject(5));
		row.add(yeyaSql.getObject(6));
		row.add(yeyaSql.getObject(7));
		row.add(yeyaSql.getObject(8));
		row.add(yeyaSql.getObject(9));
		row.add(yeyaSql.getObject(10));
		row.add(yeyaSql.getObject(11));
		row.add(yeyaSql.getObject(12));
		row.add(yeyaSql.getObject(13));
		row.add(yeyaSql.getObject(14));
		row.add(yeyaSql.getObject(15));
		row.add(yeyaSql.getObject(16));
		row.add(yeyaSql.getObject(17));
		row.add(yeyaSql.getObject(18));
		row.add(yeyaSql.getObject(19));
		row.add(yeyaSql.getObject(20));
		row.add(yeyaSql.getObject(21));
		row.add(yeyaSql.getObject(22));
		row.add(yeyaSql.getObject(23));
		row.add(yeyaSql.getBlob(24));

		return row;
	}

	//ResultSet userSql 객체에서 필드 값 설정 함수
	private void setFieldVariableFromuserSql() throws Exception{
		userSql_PSN_NM = GetB(userSql.getString(1));
		userSql_ORG_GRP_NM = GetB(userSql.getString(2));
		userSql_POSITION_NM = GetB(userSql.getString(3));
		userSql_EMAIL = GetB(userSql.getString(4));
	}

	//ResultSet userSql 객체의 필드 값 초기화 함수
	private void setFieldInitFromuserSql(){
		userSql_PSN_NM = "";
		userSql_ORG_GRP_NM = "";
		userSql_POSITION_NM = "";
		userSql_EMAIL = "";
	}

	//ResultSet userSql 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromuserSql() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(userSql.getObject(1));
		row.add(userSql.getObject(2));
		row.add(userSql.getObject(3));
		row.add(userSql.getObject(4));

		return row;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		rndEquIdx_Param=decoder.getParameterB("rndEquIdx");
		//rndEquIdx_Param=aiReplace(rndEquIdx_Param, str, "\n");
		mapParam.put("rndEquIdx", rndEquIdx_Param);

		equOrderIdx_Param=decoder.getParameterB("equOrderIdx");
		//equOrderIdx_Param=aiReplace(equOrderIdx_Param, str, "\n");
		mapParam.put("equOrderIdx", equOrderIdx_Param);

		userIdx_Param=decoder.getParameterB("userIdx");
		//userIdx_Param=aiReplace(userIdx_Param, str, "\n");
		mapParam.put("userIdx", userIdx_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|0|Temporary.style|보고서 (2016/8/8 17:8:6)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 9, 17, "cell_style_0");
		setCellInfoMap_Internal("sheet10_AA1", 409, 0, 15, 17, "cell_style_2");
		setCellInfoMap_Internal("sheet10_AB1", 424, 0, 14, 17, "cell_style_2");
		setCellInfoMap_Internal("sheet10_AC1", 438, 0, 13, 17, "cell_style_2");
		setCellInfoMap_Internal("sheet10_AD1", 451, 0, 8, 17, "cell_style_3");
		setCellInfoMap_Internal("sheet10_B1", 9, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_C1", 25, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_D1", 41, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_E1", 57, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_F1", 73, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_G1", 89, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_H1", 105, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_I1", 121, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_J1", 137, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_K1", 153, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_L1", 169, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_M1", 185, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_N1", 201, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_O1", 217, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_P1", 233, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_Q1", 249, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_R1", 265, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_S1", 281, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_T1", 297, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_U1", 313, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_V1", 329, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_W1", 345, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_X1", 361, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_Y1", 377, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_Z1", 393, 0, 16, 17, "cell_style_1");
		setCellInfoMap_Internal("sheet10_A10", 0, 180, 9, 10, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD10", 451, 180, 8, 10, "cell_style_7");
		setCellInfoMap_Internal("sheet10_A11", 0, 190, 9, 26, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD11", 451, 190, 8, 26, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B11", 9, 190, 80, 26, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G11", 89, 190, 362, 26, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A12", 0, 216, 9, 26, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD12", 451, 216, 8, 26, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B12", 9, 216, 80, 26, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G12", 89, 216, 362, 26, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A13", 0, 242, 9, 26, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD13", 451, 242, 8, 26, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B13", 9, 242, 80, 26, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G13", 89, 242, 362, 26, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A14", 0, 268, 9, 26, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD14", 451, 268, 8, 26, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B14", 9, 268, 80, 26, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G14", 89, 268, 362, 26, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A15", 0, 294, 9, 26, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD15", 451, 294, 8, 26, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B15", 9, 294, 80, 26, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G15", 89, 294, 362, 26, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A16", 0, 320, 9, 8, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD16", 451, 320, 8, 8, "cell_style_7");
		setCellInfoMap_Internal("sheet10_A17", 0, 328, 9, 16, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD17", 451, 328, 8, 16, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B17", 9, 328, 208, 32, "cell_style_10");
		setCellInfoMap_Internal("sheet10_A18", 0, 344, 9, 16, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD18", 451, 344, 8, 16, "cell_style_7");
		setCellInfoMap_Internal("sheet10_A19", 0, 360, 9, 7, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD19", 451, 360, 8, 7, "cell_style_7");
		setCellInfoMap_Internal("sheet10_A2", 0, 17, 9, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_AD2", 451, 17, 8, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B2", 9, 17, 80, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet10_G2", 89, 17, 128, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet10_A20", 0, 367, 9, 24, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD20", 451, 367, 8, 24, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B20", 9, 367, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G20", 89, 367, 16, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_H20", 105, 367, 346, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A21", 0, 391, 9, 24, "cell_style_13");
		setCellInfoMap_Internal("sheet10_AD21", 451, 391, 8, 24, "cell_style_14");
		setCellInfoMap_Internal("sheet10_B21", 9, 391, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G21", 89, 391, 128, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_O21", 217, 391, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_T21", 297, 391, 154, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A22", 0, 415, 9, 24, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD22", 451, 415, 8, 24, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B22", 9, 415, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G22", 89, 415, 128, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_O22", 217, 415, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_T22", 297, 415, 154, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A23", 0, 439, 9, 24, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD23", 451, 439, 8, 24, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B23", 9, 439, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G23", 89, 439, 128, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_O23", 217, 439, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_T23", 297, 439, 154, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A24", 0, 463, 9, 24, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD24", 451, 463, 8, 24, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B24", 9, 463, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G24", 89, 463, 128, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_O24", 217, 463, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_T24", 297, 463, 154, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A25", 0, 487, 9, 24, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD25", 451, 487, 8, 24, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B25", 9, 487, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G25", 89, 487, 128, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_O25", 217, 487, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_T25", 297, 487, 154, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A26", 0, 511, 9, 32, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD26", 451, 511, 8, 32, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B26", 9, 511, 80, 32, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G26", 89, 511, 16, 32, "cell_style_12");
		setCellInfoMap_Internal("sheet10_H26", 105, 511, 16, 32, "cell_style_12");
		setCellInfoMap_Internal("sheet10_I26", 121, 511, 16, 32, "cell_style_15");
		setCellInfoMap_Internal("sheet10_J26", 137, 511, 16, 32, "cell_style_15");
		setCellInfoMap_Internal("sheet10_K26", 153, 511, 16, 32, "cell_style_15");
		setCellInfoMap_Internal("sheet10_L26", 169, 511, 16, 32, "cell_style_15");
		setCellInfoMap_Internal("sheet10_M26", 185, 511, 16, 32, "cell_style_15");
		setCellInfoMap_Internal("sheet10_N26", 201, 511, 16, 32, "cell_style_15");
		setCellInfoMap_Internal("sheet10_O26", 217, 511, 80, 32, "cell_style_11");
		setCellInfoMap_Internal("sheet10_T26", 297, 511, 154, 32, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A27", 0, 543, 9, 24, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD27", 451, 543, 8, 24, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B27", 9, 543, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G27", 89, 543, 16, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_H27", 105, 543, 16, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_I27", 121, 543, 16, 24, "cell_style_15");
		setCellInfoMap_Internal("sheet10_J27", 137, 543, 16, 24, "cell_style_15");
		setCellInfoMap_Internal("sheet10_K27", 153, 543, 16, 24, "cell_style_15");
		setCellInfoMap_Internal("sheet10_L27", 169, 543, 16, 24, "cell_style_15");
		setCellInfoMap_Internal("sheet10_M27", 185, 543, 16, 24, "cell_style_15");
		setCellInfoMap_Internal("sheet10_N27", 201, 543, 16, 24, "cell_style_15");
		setCellInfoMap_Internal("sheet10_O27", 217, 543, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_T27", 297, 543, 154, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A28", 0, 567, 9, 24, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD28", 451, 567, 8, 24, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B28", 9, 567, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G28", 89, 567, 362, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A29", 0, 591, 9, 24, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD29", 451, 591, 8, 24, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B29", 9, 591, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G29", 89, 591, 362, 24, "cell_style_16");
		setCellInfoMap_Internal("sheet10_A3", 0, 37, 9, 24, "cell_style_4");
		setCellInfoMap_Internal("sheet10_AD3", 451, 37, 8, 24, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B3", 9, 37, 208, 106, "cell_style_6");
		setCellInfoMap_Internal("sheet10_O3", 217, 37, 80, 24, "cell_style_6");
		setCellInfoMap_Internal("sheet10_T3", 297, 37, 80, 24, "cell_style_6");
		setCellInfoMap_Internal("sheet10_Y3", 377, 37, 74, 24, "cell_style_6");
		setCellInfoMap_Internal("sheet10_A30", 0, 615, 9, 24, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD30", 451, 615, 8, 24, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B30", 9, 615, 80, 24, "cell_style_11");
		setCellInfoMap_Internal("sheet10_G30", 89, 615, 362, 24, "cell_style_12");
		setCellInfoMap_Internal("sheet10_A31", 0, 639, 9, 6, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD31", 451, 639, 8, 6, "cell_style_7");
		setCellInfoMap_Internal("sheet10_A32", 0, 645, 9, 23, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD32", 451, 645, 8, 23, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B32", 9, 645, 442, 23, "cell_style_17");
		setCellInfoMap_Internal("sheet10_A33", 0, 0, 9, 7, "cell_style_18");
		setCellInfoMap_Internal("sheet10_AA33", 409, 0, 15, 7, "cell_style_20");
		setCellInfoMap_Internal("sheet10_AB33", 424, 0, 14, 7, "cell_style_20");
		setCellInfoMap_Internal("sheet10_AC33", 438, 0, 13, 7, "cell_style_20");
		setCellInfoMap_Internal("sheet10_AD33", 451, 0, 8, 7, "cell_style_21");
		setCellInfoMap_Internal("sheet10_B33", 9, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_C33", 25, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_D33", 41, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_E33", 57, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_F33", 73, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_G33", 89, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_H33", 105, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_I33", 121, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_J33", 137, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_K33", 153, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_L33", 169, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_M33", 185, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_N33", 201, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_O33", 217, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_P33", 233, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_Q33", 249, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_R33", 265, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_S33", 281, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_T33", 297, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_U33", 313, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_V33", 329, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_W33", 345, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_X33", 361, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_Y33", 377, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_Z33", 393, 0, 16, 7, "cell_style_19");
		setCellInfoMap_Internal("sheet10_A4", 0, 61, 9, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_AD4", 451, 61, 8, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet10_O4", 217, 61, 80, 59, "cell_style_8");
		setCellInfoMap_Internal("sheet10_T4", 297, 61, 80, 59, "cell_style_8");
		setCellInfoMap_Internal("sheet10_Y4", 377, 61, 74, 59, "cell_style_8");
		setCellInfoMap_Internal("sheet10_A5", 0, 81, 9, 39, "cell_style_4");
		setCellInfoMap_Internal("sheet10_AD5", 451, 81, 8, 39, "cell_style_7");
		setCellInfoMap_Internal("sheet10_A6", 0, 120, 9, 23, "cell_style_4");
		setCellInfoMap_Internal("sheet10_AD6", 451, 120, 8, 23, "cell_style_7");
		setCellInfoMap_Internal("sheet10_O6", 217, 120, 80, 23, "cell_style_6");
		setCellInfoMap_Internal("sheet10_T6", 297, 120, 80, 23, "cell_style_6");
		setCellInfoMap_Internal("sheet10_Y6", 377, 120, 74, 23, "cell_style_6");
		setCellInfoMap_Internal("sheet10_A7", 0, 143, 9, 7, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD7", 451, 143, 8, 7, "cell_style_7");
		setCellInfoMap_Internal("sheet10_A8", 0, 150, 9, 15, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD8", 451, 150, 8, 15, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B8", 9, 150, 208, 30, "cell_style_10");
		setCellInfoMap_Internal("sheet10_A9", 0, 165, 9, 15, "cell_style_9");
		setCellInfoMap_Internal("sheet10_AD9", 451, 165, 8, 15, "cell_style_7");
	}

	private ResultSet acquireResultSet(CallableStatement cstmt, int cursorIdx) throws SQLException {
		if (cstmt.execute()) {
			if (cursorIdx == -1) {
				return (cstmt.getResultSet());
			} else {
				return ((ResultSet) cstmt.getObject(cursorIdx));
			}
		} else {
			int count;
			if ((count = cstmt.getUpdateCount()) == -1) {
				if (cursorIdx == -1) {
					throw (new UnsupportedOperationException("None result"));
				} else {
					return ((ResultSet) cstmt.getObject(cursorIdx));
				}
			}
			while (true) {
				if (cstmt.getMoreResults()) {
					if (cursorIdx == -1) {
						return (cstmt.getResultSet());
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				} else if ((count = cstmt.getUpdateCount()) == -1) {
					if (cursorIdx == -1) {
						throw (new UnsupportedOperationException("None result-2"));
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				}
			}
		}
	}
}
%>
<script type="text/javascript">
$('#report').css('overflow', 'scroll');
$('#report').css('background-color', '#aeaeae');
$('#p1').css('margin-top', '0px');
$('#p1').css('border-color', '#000000');
// $('#subreport').css('transform', 'scale(0.7)');
</script>