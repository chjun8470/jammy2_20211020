<%
/************************************************************************************
Generated by AIDesigner 5.6.0.3
************************************************************************************
보고서 제목 : 통계
작성일 : 2016년4월22일 10시42분9초
수정일 : 2016년8월12일 15시54분25초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_gg
	StringBuilder sql_gg = new StringBuilder();
	sql_gg.setLength(0);
	sql_gg.append("SELECT ");
	sql_gg.append("	A.ORG_GRP_NM, ");
	sql_gg.append("	B.USER_IDX, ");
	sql_gg.append("	C.RND_MAIN_ORG, ");
	sql_gg.append("	SUBSTRING(C.LOCATION,4,3) AS AXIS, ");
	sql_gg.append("	COUNT(*) AS CNT ");
	sql_gg.append("FROM ");
	sql_gg.append("	TB_ORG_GRP AS A ");
	sql_gg.append("LEFT JOIN TB_USER_COPY AS B ");
	sql_gg.append("ON A.USER_IDX = B.USER_IDX ");
	sql_gg.append("LEFT JOIN TB_EQU_INFO AS C ");
	sql_gg.append("ON A.ORG_GRP_NM = C.RND_MAIN_ORG ");
	sql_gg.append("WHERE 1 = 1 ");
	sql_gg.append("AND A.AREA_CD = 1 ");
	sql_gg.append("GROUP BY AXIS ");
	sql_gg.append("ORDER BY CNT DESC ");
	sql_gg.append("LIMIT 20; ");
	initializer.prepareQuery("sql_gg", sql_gg.toString());

	//sql_ge
	StringBuilder sql_ge = new StringBuilder();
	sql_ge.setLength(0);
	sql_ge.append("SELECT ");
	sql_ge.append("	A.ORG_GRP_NM, ");
	sql_ge.append("	B.USER_IDX, ");
	sql_ge.append("	C.RND_MAIN_ORG AS AXIS, ");
	sql_ge.append("	COUNT(*) AS CNT ");
	sql_ge.append("FROM ");
	sql_ge.append("	TB_ORG_GRP AS A ");
	sql_ge.append("LEFT JOIN TB_USER_COPY AS B ");
	sql_ge.append("ON A.USER_IDX = B.USER_IDX ");
	sql_ge.append("LEFT JOIN TB_EQU_INFO AS C ");
	sql_ge.append("ON A.ORG_GRP_NM = C.RND_MAIN_ORG ");
	sql_ge.append("WHERE 1 = 1 ");
	sql_ge.append("AND A.AREA_CD = 1 ");
	sql_ge.append("GROUP BY AXIS ");
	sql_ge.append("ORDER BY CNT DESC ");
	sql_ge.append("LIMIT 20; ");
	initializer.prepareQuery("sql_ge", sql_ge.toString());

	//sql_gge
	StringBuilder sql_gge = new StringBuilder();
	sql_gge.setLength(0);
	sql_gge.append("SELECT ");
	sql_gge.append("	A.ORG_GRP_NM, ");
	sql_gge.append("	B.USER_IDX, ");
	sql_gge.append("	C.RND_MAIN_ORG, ");
	sql_gge.append("	SUBSTRING(C.LOCATION,4,3) AS AXIS, ");
	sql_gge.append("	COUNT(*) AS CNT ");
	sql_gge.append("FROM ");
	sql_gge.append("	TB_ORG_GRP AS A ");
	sql_gge.append("LEFT JOIN TB_USER_COPY AS B ");
	sql_gge.append("ON A.USER_IDX = B.USER_IDX ");
	sql_gge.append("LEFT JOIN TB_EQU_INFO AS C ");
	sql_gge.append("ON A.ORG_GRP_NM = C.RND_MAIN_ORG ");
	sql_gge.append("WHERE 1 = 1 ");
	sql_gge.append("AND A.AREA_CD = 1 ");
	sql_gge.append("GROUP BY AXIS , C.RND_MAIN_ORG ");
	sql_gge.append("ORDER BY CNT DESC ");
	sql_gge.append("LIMIT 20; ");
	initializer.prepareQuery("sql_gge", sql_gge.toString());

	//sql_a
	StringBuilder sql_a = new StringBuilder();
	sql_a.setLength(0);
	sql_a.append("SELECT ");
	sql_a.append("	AA.ORG_GRP_NM AS AREA , ");
	sql_a.append("	AA.DEPT_NM, ");
	sql_a.append("	AA.SM, ");
	sql_a.append("	AA.EQUIP, ");
	sql_a.append("	SUM(AA.EQU_CNT) AS CNT ");
	sql_a.append("	FROM ");
	sql_a.append("	( ");
	sql_a.append("		SELECT ");
	sql_a.append("			A.ORG_GRP_NM, ");
	sql_a.append("			C.DEPT_NM, ");
	sql_a.append("			SUM(B.TAKE_PRC_FOREIGN) AS SM, ");
	sql_a.append("			( ");
	sql_a.append("				SELECT COUNT(0) FROM TB_EQU_INFO AS AAA ");
	sql_a.append("				WHERE AAA.RND_MAIN_ORG = A.ORG_GRP_NM ");
	sql_a.append("				AND AAA.EQUIP_CD = 2 ");
	sql_a.append("			)AS EQUIP, ");
	sql_a.append("		( ");
	sql_a.append("			SELECT ");
	sql_a.append("				COUNT(0) ");
	sql_a.append("			FROM ");
	sql_a.append("				TB_EQU_INFO ");
	sql_a.append("			WHERE TB_EQU_INFO.USER_IDX IN ");
	sql_a.append("						( ");
	sql_a.append("							SELECT ");
	sql_a.append("								USER_IDX ");
	sql_a.append("							FROM ");
	sql_a.append("								TB_USER_COPY ");
	sql_a.append("							WHERE TB_USER_COPY.ORG_GRP_CD = A.ORG_GRP_CD ");
	sql_a.append("						) ");
	sql_a.append("		) AS EQU_CNT ");
	sql_a.append("	FROM TB_ORG_GRP AS A ");
	sql_a.append("	LEFT JOIN TB_EQU_INFO AS B ");
	sql_a.append("		ON A.ORG_GRP_NM = B.RND_MAIN_ORG ");
	sql_a.append("	LEFT JOIN TB_USER_COPY AS C ");
	sql_a.append("		ON A.USER_IDX = C.USER_IDX ");
	sql_a.append("	WHERE A.AREA_CD = 1 ");
	sql_a.append("	GROUP BY A.ORG_GRP_NM ");
	sql_a.append("	) AS AA ");
	sql_a.append("	WHERE 1=1 ");
	sql_a.append("GROUP BY AA.ORG_GRP_NM ");
	sql_a.append("LIMIT 10 ");
	initializer.prepareQuery("sql_a", sql_a.toString());

	//sql_b
	StringBuilder sql_b = new StringBuilder();
	sql_b.setLength(0);
	sql_b.append("SELECT ");
	sql_b.append("				AA.AREA , ");
	sql_b.append("				AA.ORG_CNT, ");
	sql_b.append("				AA.EQUIP, ");
	sql_b.append("				AA.SM, ");
	sql_b.append("				SUM(AA.EQU_CNT) AS CNT ");
	sql_b.append("			FROM ");
	sql_b.append("				( ");
	sql_b.append("					SELECT ");
	sql_b.append("					SUBSTRING(A.ADDR1,3,5) AS AREA, ");
	sql_b.append("					SUM(B.TAKE_PRC_FOREIGN) AS SM, ");
	sql_b.append("					( ");
	sql_b.append("						SELECT ");
	sql_b.append(" ");
	sql_b.append("							COUNT(0) AS CNT ");
	sql_b.append("						FROM TB_ORG_GRP AS AAA ");
	sql_b.append("						WHERE AAA.AREA_CD = 1 ");
	sql_b.append("						AND SUBSTRING(AAA.ADDR1,3,5) = SUBSTRING(A.ADDR1,3,5) ");
	sql_b.append("					) AS ORG_CNT, ");
	sql_b.append("					( ");
	sql_b.append("						SELECT COUNT(0) FROM TB_EQU_INFO AS BBB ");
	sql_b.append("						WHERE BBB.RND_MAIN_ORG = A.ORG_GRP_NM ");
	sql_b.append("						AND BBB.EQUIP_CD = 2 ");
	sql_b.append("					)AS EQUIP, ");
	sql_b.append("					( ");
	sql_b.append("						SELECT ");
	sql_b.append("							COUNT(0) ");
	sql_b.append("						FROM ");
	sql_b.append("							TB_EQU_INFO ");
	sql_b.append("						WHERE TB_EQU_INFO.USER_IDX IN ( ");
	sql_b.append("														SELECT ");
	sql_b.append("															USER_IDX ");
	sql_b.append("														FROM ");
	sql_b.append("															TB_USER_COPY ");
	sql_b.append("														WHERE TB_USER_COPY.ORG_GRP_CD = A.ORG_GRP_CD ");
	sql_b.append("													  ) ");
	sql_b.append("					) AS EQU_CNT ");
	sql_b.append("			FROM TB_ORG_GRP AS A ");
	sql_b.append("				LEFT JOIN TB_EQU_INFO AS B ");
	sql_b.append("					ON A.ORG_GRP_NM = B.RND_MAIN_ORG ");
	sql_b.append("			WHERE A.AREA_CD = 1 ");
	sql_b.append("			GROUP BY A.ORG_GRP_NM ");
	sql_b.append("				) AS AA ");
	sql_b.append("			WHERE 1=1 ");
	sql_b.append("			GROUP BY AA.AREA ");
	sql_b.append("			ORDER BY CNT DESC ");
	sql_b.append("			LIMIT 10 ");
	initializer.prepareQuery("sql_b", sql_b.toString());

	//sql_c
	StringBuilder sql_c = new StringBuilder();
	sql_c.setLength(0);
	sql_c.append("SELECT ");
	sql_c.append("	A.ORG_GRP_CD, ");
	sql_c.append("	A.ORG_GRP_NM AS AREA, ");
	sql_c.append("	SUM(C.TAKE_PRC_FOREIGN) AS SM, ");
	sql_c.append("	( ");
	sql_c.append("		SELECT COUNT(0) FROM TB_USER_COPY WHERE TB_USER_COPY.ORG_GRP_CD = A.ORG_GRP_CD ");
	sql_c.append("	) AS CNT ");
	sql_c.append("FROM TB_ORG_GRP AS A ");
	sql_c.append("LEFT JOIN TB_USER_COPY AS B ");
	sql_c.append("	ON A.USER_IDX = B.USER_IDX ");
	sql_c.append("LEFT JOIN TB_EQU_INFO AS C ");
	sql_c.append("	ON A.USER_IDX = C.USER_IDX ");
	sql_c.append("WHERE A.AREA_CD = 1 ");
	sql_c.append("GROUP BY A.ORG_GRP_NM ");
	sql_c.append("ORDER BY CNT DESC ");
	sql_c.append("LIMIT 10 ");
	initializer.prepareQuery("sql_c", sql_c.toString());

	//sql_d
	StringBuilder sql_d = new StringBuilder();
	sql_d.setLength(0);
	sql_d.append("SELECT ");
	sql_d.append("	AA.AREA , ");
	sql_d.append("	AA.ORG_GRP_CD, ");
	sql_d.append("	AA.ORG_GRP_NM, ");
	sql_d.append("	AA.DEPT_NM, ");
	sql_d.append("	AA.ORG_CNT, ");
	sql_d.append("	AA.SM, ");
	sql_d.append("	SUM(AA.EQU_CNT) AS CNT ");
	sql_d.append("FROM ");
	sql_d.append("	( ");
	sql_d.append("		SELECT ");
	sql_d.append("		SUBSTRING(A.ADDR1,3,5) AS AREA, ");
	sql_d.append("		A.ORG_GRP_CD, ");
	sql_d.append("		A.ORG_GRP_NM, ");
	sql_d.append("		C.DEPT_NM, ");
	sql_d.append("		SUM(B.TAKE_PRC_FOREIGN) AS SM, ");
	sql_d.append("		( ");
	sql_d.append("			SELECT ");
	sql_d.append("				COUNT(0) AS CNT ");
	sql_d.append("			FROM TB_ORG_GRP AS AAA ");
	sql_d.append("			WHERE AAA.AREA_CD = 1 ");
	sql_d.append("			AND SUBSTRING(AAA.ADDR1,3,5) = SUBSTRING(A.ADDR1,3,5) ");
	sql_d.append("		) AS ORG_CNT, ");
	sql_d.append("		( ");
	sql_d.append("			SELECT COUNT(0) FROM TB_USER_COPY WHERE TB_USER_COPY.ORG_GRP_CD = A.ORG_GRP_CD ");
	sql_d.append("		) AS EQU_CNT ");
	sql_d.append("FROM TB_ORG_GRP AS A ");
	sql_d.append("	LEFT JOIN TB_EQU_INFO AS B ");
	sql_d.append("		ON A.ORG_GRP_NM = B.RND_MAIN_ORG ");
	sql_d.append("	LEFT JOIN TB_USER_COPY AS C ");
	sql_d.append("		ON A.USER_IDX = B.USER_IDX ");
	sql_d.append("WHERE A.AREA_CD = 1 ");
	sql_d.append("AND (B.DELETE_YN != 'Y' or B.DELETE_YN IS NULL) ");
	sql_d.append("GROUP BY A.ORG_GRP_NM ");
	sql_d.append("	) AS AA ");
	sql_d.append("WHERE 1=1 ");
	sql_d.append("GROUP BY AA.AREA ");
	sql_d.append("ORDER BY CNT DESC ");
	sql_d.append("LIMIT 10 ");
	initializer.prepareQuery("sql_d", sql_d.toString());

	//sql_cc
	StringBuilder sql_cc = new StringBuilder();
	sql_cc.setLength(0);
	sql_cc.append("SELECT ");
	sql_cc.append("	A.ORG_GRP_CD, ");
	sql_cc.append("	A.ORG_GRP_NM AS AREA, ");
	sql_cc.append("	SUM(C.TAKE_PRC_FOREIGN) AS SM, ");
	sql_cc.append("	( ");
	sql_cc.append("		SELECT COUNT(0) FROM TB_USER_COPY WHERE TB_USER_COPY.ORG_GRP_CD = A.ORG_GRP_CD ");
	sql_cc.append("	) AS CNT ");
	sql_cc.append("FROM TB_ORG_GRP AS A ");
	sql_cc.append("LEFT JOIN TB_USER_COPY AS B ");
	sql_cc.append("	ON A.USER_IDX = B.USER_IDX ");
	sql_cc.append("LEFT JOIN TB_EQU_INFO AS C ");
	sql_cc.append("	ON A.USER_IDX = C.USER_IDX ");
	sql_cc.append("WHERE A.AREA_CD = 1 ");
	sql_cc.append("GROUP BY A.ORG_GRP_NM ");
	sql_cc.append("ORDER BY CNT DESC ");
	sql_cc.append("LIMIT 10 ");
	initializer.prepareQuery("sql_cc", sql_cc.toString());

	//sql_getJnspRePerAge
	StringBuilder sql_getJnspRePerAge = new StringBuilder();
	sql_getJnspRePerAge.setLength(0);
	sql_getJnspRePerAge.append("SELECT ");
	sql_getJnspRePerAge.append("				A.ORG_GRP_CD, ");
	sql_getJnspRePerAge.append("				A.ORG_GRP_NM AS AREA, ");
	sql_getJnspRePerAge.append("				SUM(C.TAKE_PRC_FOREIGN) AS SM, ");
	sql_getJnspRePerAge.append("				( ");
	sql_getJnspRePerAge.append("					SELECT COUNT(0) FROM TB_USER_COPY ");
	sql_getJnspRePerAge.append("					WHERE TB_USER_COPY.ORG_GRP_CD = A.ORG_GRP_CD ");
	sql_getJnspRePerAge.append("					AND (TB_USER_COPY.DELETE_YN != 'Y' or TB_USER_COPY.DELETE_YN IS NULL) ");
	sql_getJnspRePerAge.append("					AND TB_USER_COPY.USER_APP_STATE = '20' ");
	sql_getJnspRePerAge.append("				) AS CNT ");
	sql_getJnspRePerAge.append("			FROM TB_ORG_GRP AS A ");
	sql_getJnspRePerAge.append("			LEFT JOIN TB_EQU_INFO AS C ");
	sql_getJnspRePerAge.append("				ON A.USER_IDX = C.USER_IDX ");
	sql_getJnspRePerAge.append("			WHERE A.AREA_CD = 1 ");
	sql_getJnspRePerAge.append("			AND (C.DELETE_YN != 'Y' or C.DELETE_YN IS NULL) ");
	sql_getJnspRePerAge.append("			AND A.ORG_TYPE = 2 ");
	sql_getJnspRePerAge.append("			AND C.STATE = '2' ");
	sql_getJnspRePerAge.append("			AND A.AUTH_ORG_SITE_1 = 'Y' ");
	sql_getJnspRePerAge.append("			GROUP BY A.ORG_GRP_NM ");
	sql_getJnspRePerAge.append("			ORDER BY CNT DESC ");
	sql_getJnspRePerAge.append("			LIMIT 10 ");
	initializer.prepareQuery("sql_getJnspRePerAge", sql_getJnspRePerAge.toString());

	//sql_getJnspRePerAgeTt
	StringBuilder sql_getJnspRePerAgeTt = new StringBuilder();
	sql_getJnspRePerAgeTt.setLength(0);
	sql_getJnspRePerAgeTt.append("SELECT ");
	sql_getJnspRePerAgeTt.append("				A.ORG_GRP_CD, ");
	sql_getJnspRePerAgeTt.append("				A.ORG_GRP_NM AS AREA, ");
	sql_getJnspRePerAgeTt.append("				SUM(C.TAKE_PRC_FOREIGN) AS SM, ");
	sql_getJnspRePerAgeTt.append("				( ");
	sql_getJnspRePerAgeTt.append("					SELECT COUNT(0) FROM TB_USER_COPY ");
	sql_getJnspRePerAgeTt.append("					WHERE TB_USER_COPY.ORG_GRP_CD = A.ORG_GRP_CD ");
	sql_getJnspRePerAgeTt.append("					AND (TB_USER_COPY.DELETE_YN != 'Y' or TB_USER_COPY.DELETE_YN IS NULL) ");
	sql_getJnspRePerAgeTt.append("					AND TB_USER_COPY.USER_APP_STATE = '20' ");
	sql_getJnspRePerAgeTt.append("				) AS CNT ");
	sql_getJnspRePerAgeTt.append("			FROM TB_ORG_GRP AS A ");
	sql_getJnspRePerAgeTt.append("			LEFT JOIN TB_EQU_INFO AS C ");
	sql_getJnspRePerAgeTt.append("				ON A.USER_IDX = C.USER_IDX ");
	sql_getJnspRePerAgeTt.append("			WHERE A.AREA_CD = 1 ");
	sql_getJnspRePerAgeTt.append("			AND (C.DELETE_YN != 'Y' or C.DELETE_YN IS NULL) ");
	sql_getJnspRePerAgeTt.append("			AND A.ORG_TYPE = 2 ");
	sql_getJnspRePerAgeTt.append("			AND C.STATE = '2' ");
	sql_getJnspRePerAgeTt.append("			AND A.AUTH_ORG_SITE_1 = 'Y' ");
	sql_getJnspRePerAgeTt.append("			GROUP BY A.ORG_GRP_NM ");
	sql_getJnspRePerAgeTt.append("			ORDER BY CNT DESC ");
	sql_getJnspRePerAgeTt.append("			LIMIT 10 ");
	initializer.prepareQuery("sql_getJnspRePerAgeTt", sql_getJnspRePerAgeTt.toString());

	//sql_getJnspRePerAgeTb
	StringBuilder sql_getJnspRePerAgeTb = new StringBuilder();
	sql_getJnspRePerAgeTb.setLength(0);
	sql_getJnspRePerAgeTb.append("SELECT ");
	sql_getJnspRePerAgeTb.append("				A.ORG_GRP_CD, ");
	sql_getJnspRePerAgeTb.append("				A.ORG_GRP_NM AS AREA, ");
	sql_getJnspRePerAgeTb.append("				SUM(C.TAKE_PRC_FOREIGN) AS SM, ");
	sql_getJnspRePerAgeTb.append("				( ");
	sql_getJnspRePerAgeTb.append("					SELECT COUNT(0) FROM TB_USER_COPY ");
	sql_getJnspRePerAgeTb.append("					WHERE TB_USER_COPY.ORG_GRP_CD = A.ORG_GRP_CD ");
	sql_getJnspRePerAgeTb.append("					AND (TB_USER_COPY.DELETE_YN != 'Y' or TB_USER_COPY.DELETE_YN IS NULL) ");
	sql_getJnspRePerAgeTb.append("					AND TB_USER_COPY.USER_APP_STATE = '20' ");
	sql_getJnspRePerAgeTb.append("				) AS CNT ");
	sql_getJnspRePerAgeTb.append("			FROM TB_ORG_GRP AS A ");
	sql_getJnspRePerAgeTb.append("			LEFT JOIN TB_EQU_INFO AS C ");
	sql_getJnspRePerAgeTb.append("				ON A.USER_IDX = C.USER_IDX ");
	sql_getJnspRePerAgeTb.append("			WHERE A.AREA_CD = 1 ");
	sql_getJnspRePerAgeTb.append("			AND (C.DELETE_YN != 'Y' or C.DELETE_YN IS NULL) ");
	sql_getJnspRePerAgeTb.append("			AND A.ORG_TYPE = 2 ");
	sql_getJnspRePerAgeTb.append("			AND C.STATE = '2' ");
	sql_getJnspRePerAgeTb.append("			AND A.AUTH_ORG_SITE_1 = 'Y' ");
	sql_getJnspRePerAgeTb.append("			GROUP BY A.ORG_GRP_NM ");
	sql_getJnspRePerAgeTb.append("			ORDER BY CNT DESC ");
	initializer.prepareQuery("sql_getJnspRePerAgeTb", sql_getJnspRePerAgeTb.toString());
}

private Logger logger = Logger.getLogger("com.activeintra");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	long sheet10_A1 = 0L;
	String sheet10_A2 = "";
	String sheet10_B20 = "";
	String sheet10_N20 = "";
	String AI_CHART_OBJ32;
	String sheet10_B21 = "";
	long sheet10_N21 = 0L;
	String sheet10_B22 = "";

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_jnsp; 	 //jnsp Connection 객체
	private java.sql.PreparedStatement stat_gg;		//ResultSet gg 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet gg;		//ResultSet gg 객체
	private java.sql.PreparedStatement stat_ge;		//ResultSet ge 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet ge;		//ResultSet ge 객체
	private java.sql.PreparedStatement stat_gge;		//ResultSet gge 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet gge;		//ResultSet gge 객체
	private java.sql.PreparedStatement stat_a;		//ResultSet a 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet a;		//ResultSet a 객체
	private java.sql.PreparedStatement stat_b;		//ResultSet b 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet b;		//ResultSet b 객체
	private java.sql.PreparedStatement stat_c;		//ResultSet c 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet c;		//ResultSet c 객체
	private java.sql.PreparedStatement stat_d;		//ResultSet d 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet d;		//ResultSet d 객체
	private java.sql.PreparedStatement stat_cc;		//ResultSet cc 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet cc;		//ResultSet cc 객체
	private java.sql.PreparedStatement stat_getJnspRePerAge;		//ResultSet getJnspRePerAge 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet getJnspRePerAge;		//ResultSet getJnspRePerAge 객체
	private java.sql.PreparedStatement stat_getJnspRePerAgeTt;		//ResultSet getJnspRePerAgeTt 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet getJnspRePerAgeTt;		//ResultSet getJnspRePerAgeTt 객체
	private java.sql.PreparedStatement stat_getJnspRePerAgeTb;		//ResultSet getJnspRePerAgeTb 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet getJnspRePerAgeTb;		//ResultSet getJnspRePerAgeTb 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_gg = new StringBuilder();		//ResultSet gg 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_ge = new StringBuilder();		//ResultSet ge 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_gge = new StringBuilder();		//ResultSet gge 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_a = new StringBuilder();		//ResultSet a 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_b = new StringBuilder();		//ResultSet b 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_c = new StringBuilder();		//ResultSet c 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_d = new StringBuilder();		//ResultSet d 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_cc = new StringBuilder();		//ResultSet cc 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_getJnspRePerAge = new StringBuilder();		//ResultSet getJnspRePerAge 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_getJnspRePerAgeTt = new StringBuilder();		//ResultSet getJnspRePerAgeTt 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_getJnspRePerAgeTb = new StringBuilder();		//ResultSet getJnspRePerAgeTb 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet gg 객체에서 필드 값을 받는 쿼리 필드 변수
	private String gg_ORG_GRP_NM;
	private long gg_USER_IDX;
	private String gg_RND_MAIN_ORG;
	private String gg_AXIS;
	private long gg_CNT;

	//ResultSet ge 객체에서 필드 값을 받는 쿼리 필드 변수
	private String ge_ORG_GRP_NM;
	private long ge_USER_IDX;
	private String ge_AXIS;
	private long ge_CNT;

	//ResultSet gge 객체에서 필드 값을 받는 쿼리 필드 변수
	private String gge_ORG_GRP_NM;
	private long gge_USER_IDX;
	private String gge_RND_MAIN_ORG;
	private String gge_AXIS;
	private long gge_CNT;

	//ResultSet a 객체에서 필드 값을 받는 쿼리 필드 변수
	private String a_AREA;
	private String a_DEPT_NM;
	private double a_SM;
	private long a_EQUIP;
	private long a_CNT;

	//ResultSet b 객체에서 필드 값을 받는 쿼리 필드 변수
	private String b_AREA;
	private long b_ORG_CNT;
	private long b_EQUIP;
	private double b_SM;
	private long b_CNT;

	//ResultSet c 객체에서 필드 값을 받는 쿼리 필드 변수
	private String c_ORG_GRP_CD;
	private String c_AREA;
	private double c_SM;
	private long c_CNT;

	//ResultSet d 객체에서 필드 값을 받는 쿼리 필드 변수
	private String d_AREA;
	private String d_ORG_GRP_CD;
	private String d_ORG_GRP_NM;
	private String d_DEPT_NM;
	private long d_ORG_CNT;
	private double d_SM;
	private long d_CNT;

	//ResultSet cc 객체에서 필드 값을 받는 쿼리 필드 변수
	private String cc_ORG_GRP_CD;
	private String cc_AREA;
	private double cc_SM;
	private long cc_CNT;

	//ResultSet getJnspRePerAge 객체에서 필드 값을 받는 쿼리 필드 변수
	private String getJnspRePerAge_ORG_GRP_CD;
	private String getJnspRePerAge_AREA;
	private double getJnspRePerAge_SM;
	private long getJnspRePerAge_CNT;

	//ResultSet getJnspRePerAgeTt 객체에서 필드 값을 받는 쿼리 필드 변수
	private String getJnspRePerAgeTt_ORG_GRP_CD;
	private String getJnspRePerAgeTt_AREA;
	private double getJnspRePerAgeTt_SM;
	private long getJnspRePerAgeTt_CNT;

	//ResultSet getJnspRePerAgeTb 객체에서 필드 값을 받는 쿼리 필드 변수
	private String getJnspRePerAgeTb_ORG_GRP_CD;
	private String getJnspRePerAgeTb_AREA;
	private double getJnspRePerAgeTb_SM;
	private long getJnspRePerAgeTb_CNT;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "56 70 56 70");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(e);
			throw e;
		}finally{    //finally 구문
			//DataSet Close
			cleanup(getJnspRePerAgeTb, stat_getJnspRePerAgeTb, null, null);
			cleanup(getJnspRePerAgeTt, stat_getJnspRePerAgeTt, null, null);
			cleanup(getJnspRePerAge, stat_getJnspRePerAge, null, null);
			cleanup(cc, stat_cc, null, null);
			cleanup(d, stat_d, null, null);
			cleanup(c, stat_c, null, null);
			cleanup(b, stat_b, null, null);
			cleanup(a, stat_a, null, null);
			cleanup(gge, stat_gge, null, null);
			cleanup(ge, stat_ge, null, null);
			cleanup(gg, stat_gg, null, null);
			cleanup(null, null, null, conn_jnsp);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "2700x2970", "256", "VERTICAL", "7 0 7 0");
		initSheetVariant(19, 12, 747, 831, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromyyyy(true, false);    //Void 밴드 호출
		getScriptFromtest(true, true);    //Void 밴드 호출
		getScriptFromTbList(true);    //반복 밴드 호출
		getScriptFromttttttt(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----yyyy VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : yyyy
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromyyyy(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet getJnspRePerAgeTt 객체의 생성
			if(getJnspRePerAgeTt==null){
				getJnspRePerAgeTt = stat_getJnspRePerAgeTt.executeQuery();
			}else{
				getJnspRePerAgeTt.beforeFirst();
			}

			//데이터 fetch
			if(getJnspRePerAgeTt.next()){
				setFieldVariableFromgetJnspRePerAgeTt();	//ResultSet getJnspRePerAgeTt에서 필드 값 설정
			}else{
				setFieldInitFromgetJnspRePerAgeTt();	//ResultSet getJnspRePerAgeTt의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A1=0L;

			//데이터 변수 할당
			sheet10_A1 = getJnspRePerAgeTt_CNT;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptyyyy();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----test VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : test
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromtest(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=392;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ32="";

			//데이터 변수 할당
			sheet10_A2="    연구장비 구축 통계";
			sheet10_B20="기관명";
			sheet10_N20="운용인력 (명)";
			getChartDataAI_CHART_OBJ32( );
		}    //end if(bIsFirst)

		if(getJnspRePerAgeTt_CNT != 0 )
		{
		}
		else
		{
			return;
		}
		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScripttest();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----TbList RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : TbList
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromTbList(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_B21="";
		sheet10_N21=0L;

		//DataSet 객체 생성
		//ResultSet getJnspRePerAgeTb 객체의 생성
		if(getJnspRePerAgeTb==null){
			getJnspRePerAgeTb = stat_getJnspRePerAgeTb.executeQuery();
		}else{
			getJnspRePerAgeTb.beforeFirst();
		}

		if(getJnspRePerAgeTt_CNT != 0 )
		{
		}
		else
		{
			return;
		}
		//--while Loop Start--##
		while(getJnspRePerAgeTb.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromgetJnspRePerAgeTb();	//RecordSet getJnspRePerAgeTb에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_B21 = getJnspRePerAgeTb_AREA;
			sheet10_N21 = getJnspRePerAgeTb_CNT;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptTbList();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----ttttttt VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : ttttttt
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromttttttt(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet10_B22="데이터가 없습니다";
		}    //end if(bIsFirst)

		if(getJnspRePerAgeTt_CNT == 0 )
		{
		}
		else
		{
			return;
		}
		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptttttttt();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----yyyy 스크립트 문 출력 함수----
	private void writeScriptyyyy( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), String.valueOf(sheet10_A1), "sheet10_A1", mapStyle.get("sheet10_A1"));
	}

	//----test 스크립트 문 출력 함수----
	private void writeScripttest( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A2"), nYCurPos+mapTop.get("sheet10_A2"), mapWidth.get("sheet10_A2"), mapHeight.get("sheet10_A2"), sheet10_A2, "sheet10_A2", mapStyle.get("sheet10_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_J2"), nYCurPos+mapTop.get("sheet10_J2"), mapWidth.get("sheet10_J2"), mapHeight.get("sheet10_J2"), "", "sheet10_J2", mapStyle.get("sheet10_J2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_K2"), nYCurPos+mapTop.get("sheet10_K2"), mapWidth.get("sheet10_K2"), mapHeight.get("sheet10_K2"), "", "sheet10_K2", mapStyle.get("sheet10_K2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_L2"), nYCurPos+mapTop.get("sheet10_L2"), mapWidth.get("sheet10_L2"), mapHeight.get("sheet10_L2"), "", "sheet10_L2", mapStyle.get("sheet10_L2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_M2"), nYCurPos+mapTop.get("sheet10_M2"), mapWidth.get("sheet10_M2"), mapHeight.get("sheet10_M2"), "", "sheet10_M2", mapStyle.get("sheet10_M2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_N2"), nYCurPos+mapTop.get("sheet10_N2"), mapWidth.get("sheet10_N2"), mapHeight.get("sheet10_N2"), "", "sheet10_N2", mapStyle.get("sheet10_N2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O2"), nYCurPos+mapTop.get("sheet10_O2"), mapWidth.get("sheet10_O2"), mapHeight.get("sheet10_O2"), "", "sheet10_O2", mapStyle.get("sheet10_O2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_P2"), nYCurPos+mapTop.get("sheet10_P2"), mapWidth.get("sheet10_P2"), mapHeight.get("sheet10_P2"), "", "sheet10_P2", mapStyle.get("sheet10_P2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Q2"), nYCurPos+mapTop.get("sheet10_Q2"), mapWidth.get("sheet10_Q2"), mapHeight.get("sheet10_Q2"), "", "sheet10_Q2", mapStyle.get("sheet10_Q2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_R2"), nYCurPos+mapTop.get("sheet10_R2"), mapWidth.get("sheet10_R2"), mapHeight.get("sheet10_R2"), "", "sheet10_R2", mapStyle.get("sheet10_R2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_S2"), nYCurPos+mapTop.get("sheet10_S2"), mapWidth.get("sheet10_S2"), mapHeight.get("sheet10_S2"), "", "sheet10_S2", mapStyle.get("sheet10_S2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T2"), nYCurPos+mapTop.get("sheet10_T2"), mapWidth.get("sheet10_T2"), mapHeight.get("sheet10_T2"), "", "sheet10_T2", mapStyle.get("sheet10_T2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_U2"), nYCurPos+mapTop.get("sheet10_U2"), mapWidth.get("sheet10_U2"), mapHeight.get("sheet10_U2"), "", "sheet10_U2", mapStyle.get("sheet10_U2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_V2"), nYCurPos+mapTop.get("sheet10_V2"), mapWidth.get("sheet10_V2"), mapHeight.get("sheet10_V2"), "", "sheet10_V2", mapStyle.get("sheet10_V2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_W2"), nYCurPos+mapTop.get("sheet10_W2"), mapWidth.get("sheet10_W2"), mapHeight.get("sheet10_W2"), "", "sheet10_W2", mapStyle.get("sheet10_W2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_X2"), nYCurPos+mapTop.get("sheet10_X2"), mapWidth.get("sheet10_X2"), mapHeight.get("sheet10_X2"), "", "sheet10_X2", mapStyle.get("sheet10_X2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Y2"), nYCurPos+mapTop.get("sheet10_Y2"), mapWidth.get("sheet10_Y2"), mapHeight.get("sheet10_Y2"), "", "sheet10_Y2", mapStyle.get("sheet10_Y2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B20"), nYCurPos+mapTop.get("sheet10_B20"), mapWidth.get("sheet10_B20"), mapHeight.get("sheet10_B20"), sheet10_B20, "sheet10_B20", mapStyle.get("sheet10_B20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_N20"), nYCurPos+mapTop.get("sheet10_N20"), mapWidth.get("sheet10_N20"), mapHeight.get("sheet10_N20"), sheet10_N20, "sheet10_N20", mapStyle.get("sheet10_N20"));
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos+31, 726, 322, AI_CHART_OBJ32, "AI_CHART_OBJ32", "draw_style_0");
	}

	//----TbList 스크립트 문 출력 함수----
	private void writeScriptTbList(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B21"), nYCurPos+mapTop.get("sheet10_B21"), mapWidth.get("sheet10_B21"), mapHeight.get("sheet10_B21"), sheet10_B21, "sheet10_B21", mapStyle.get("sheet10_B21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_N21"), nYCurPos+mapTop.get("sheet10_N21"), mapWidth.get("sheet10_N21"), mapHeight.get("sheet10_N21"), String.valueOf(sheet10_N21), "sheet10_N21", mapStyle.get("sheet10_N21"));
	}

	//----ttttttt 스크립트 문 출력 함수----
	private void writeScriptttttttt( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B22"), nYCurPos+mapTop.get("sheet10_B22"), mapWidth.get("sheet10_B22"), mapHeight.get("sheet10_B22"), sheet10_B22, "sheet10_B22", mapStyle.get("sheet10_B22"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//jnsp Connection 객체 생성
		Class.forName("com.mysql.jdbc.Driver");
		conn_jnsp = DriverManager.getConnection("jdbc:mysql://jnsp.re.kr:3306/jnspcms", "jnspcms", "jnspcms!@12");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_gg = initializer.configPreparedStatement("sql_gg", mapParam, conn_jnsp, null);

		stat_ge = initializer.configPreparedStatement("sql_ge", mapParam, conn_jnsp, null);

		stat_gge = initializer.configPreparedStatement("sql_gge", mapParam, conn_jnsp, null);

		stat_a = initializer.configPreparedStatement("sql_a", mapParam, conn_jnsp, null);

		stat_b = initializer.configPreparedStatement("sql_b", mapParam, conn_jnsp, null);

		stat_c = initializer.configPreparedStatement("sql_c", mapParam, conn_jnsp, null);

		stat_d = initializer.configPreparedStatement("sql_d", mapParam, conn_jnsp, null);

		stat_cc = initializer.configPreparedStatement("sql_cc", mapParam, conn_jnsp, null);

		stat_getJnspRePerAge = initializer.configPreparedStatement("sql_getJnspRePerAge", mapParam, conn_jnsp, null);

		stat_getJnspRePerAgeTt = initializer.configPreparedStatement("sql_getJnspRePerAgeTt", mapParam, conn_jnsp, null);

		stat_getJnspRePerAgeTb = initializer.configPreparedStatement("sql_getJnspRePerAgeTb", mapParam, conn_jnsp, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet gg 객체에서 필드 값 설정 함수
	private void setFieldVariableFromgg() throws Exception{
		gg_ORG_GRP_NM = GetB(gg.getString(1));
		gg_USER_IDX = gg.getLong(2);
		gg_RND_MAIN_ORG = GetB(gg.getString(3));
		gg_AXIS = GetB(gg.getString(4));
		gg_CNT = gg.getLong(5);
	}

	//ResultSet gg 객체의 필드 값 초기화 함수
	private void setFieldInitFromgg(){
		gg_ORG_GRP_NM = "";
		gg_USER_IDX = 0L;
		gg_RND_MAIN_ORG = "";
		gg_AXIS = "";
		gg_CNT = 0L;
	}

	//ResultSet gg 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromgg() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(gg.getObject(1));
		row.add(gg.getLong(2));
		row.add(gg.getObject(3));
		row.add(gg.getObject(4));
		row.add(gg.getLong(5));

		return row;
	}

	//ResultSet ge 객체에서 필드 값 설정 함수
	private void setFieldVariableFromge() throws Exception{
		ge_ORG_GRP_NM = GetB(ge.getString(1));
		ge_USER_IDX = ge.getLong(2);
		ge_AXIS = GetB(ge.getString(3));
		ge_CNT = ge.getLong(4);
	}

	//ResultSet ge 객체의 필드 값 초기화 함수
	private void setFieldInitFromge(){
		ge_ORG_GRP_NM = "";
		ge_USER_IDX = 0L;
		ge_AXIS = "";
		ge_CNT = 0L;
	}

	//ResultSet ge 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromge() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(ge.getObject(1));
		row.add(ge.getLong(2));
		row.add(ge.getObject(3));
		row.add(ge.getLong(4));

		return row;
	}

	//ResultSet gge 객체에서 필드 값 설정 함수
	private void setFieldVariableFromgge() throws Exception{
		gge_ORG_GRP_NM = GetB(gge.getString(1));
		gge_USER_IDX = gge.getLong(2);
		gge_RND_MAIN_ORG = GetB(gge.getString(3));
		gge_AXIS = GetB(gge.getString(4));
		gge_CNT = gge.getLong(5);
	}

	//ResultSet gge 객체의 필드 값 초기화 함수
	private void setFieldInitFromgge(){
		gge_ORG_GRP_NM = "";
		gge_USER_IDX = 0L;
		gge_RND_MAIN_ORG = "";
		gge_AXIS = "";
		gge_CNT = 0L;
	}

	//ResultSet gge 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromgge() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(gge.getObject(1));
		row.add(gge.getLong(2));
		row.add(gge.getObject(3));
		row.add(gge.getObject(4));
		row.add(gge.getLong(5));

		return row;
	}

	//ResultSet a 객체에서 필드 값 설정 함수
	private void setFieldVariableFroma() throws Exception{
		a_AREA = GetB(a.getString(1));
		a_DEPT_NM = GetB(a.getString(2));
		a_SM = a.getDouble(3);
		a_EQUIP = a.getLong(4);
		a_CNT = a.getLong(5);
	}

	//ResultSet a 객체의 필드 값 초기화 함수
	private void setFieldInitFroma(){
		a_AREA = "";
		a_DEPT_NM = "";
		a_SM = 0;
		a_EQUIP = 0L;
		a_CNT = 0L;
	}

	//ResultSet a 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFroma() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(a.getObject(1));
		row.add(a.getObject(2));
		row.add(a.getDouble(3));
		row.add(a.getLong(4));
		row.add(a.getLong(5));

		return row;
	}

	//ResultSet b 객체에서 필드 값 설정 함수
	private void setFieldVariableFromb() throws Exception{
		b_AREA = GetB(b.getString(1));
		b_ORG_CNT = b.getLong(2);
		b_EQUIP = b.getLong(3);
		b_SM = b.getDouble(4);
		b_CNT = b.getLong(5);
	}

	//ResultSet b 객체의 필드 값 초기화 함수
	private void setFieldInitFromb(){
		b_AREA = "";
		b_ORG_CNT = 0L;
		b_EQUIP = 0L;
		b_SM = 0;
		b_CNT = 0L;
	}

	//ResultSet b 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromb() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(b.getObject(1));
		row.add(b.getLong(2));
		row.add(b.getLong(3));
		row.add(b.getDouble(4));
		row.add(b.getLong(5));

		return row;
	}

	//ResultSet c 객체에서 필드 값 설정 함수
	private void setFieldVariableFromc() throws Exception{
		c_ORG_GRP_CD = GetB(c.getString(1));
		c_AREA = GetB(c.getString(2));
		c_SM = c.getDouble(3);
		c_CNT = c.getLong(4);
	}

	//ResultSet c 객체의 필드 값 초기화 함수
	private void setFieldInitFromc(){
		c_ORG_GRP_CD = "";
		c_AREA = "";
		c_SM = 0;
		c_CNT = 0L;
	}

	//ResultSet c 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromc() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(c.getObject(1));
		row.add(c.getObject(2));
		row.add(c.getDouble(3));
		row.add(c.getLong(4));

		return row;
	}

	//ResultSet d 객체에서 필드 값 설정 함수
	private void setFieldVariableFromd() throws Exception{
		d_AREA = GetB(d.getString(1));
		d_ORG_GRP_CD = GetB(d.getString(2));
		d_ORG_GRP_NM = GetB(d.getString(3));
		d_DEPT_NM = GetB(d.getString(4));
		d_ORG_CNT = d.getLong(5);
		d_SM = d.getDouble(6);
		d_CNT = d.getLong(7);
	}

	//ResultSet d 객체의 필드 값 초기화 함수
	private void setFieldInitFromd(){
		d_AREA = "";
		d_ORG_GRP_CD = "";
		d_ORG_GRP_NM = "";
		d_DEPT_NM = "";
		d_ORG_CNT = 0L;
		d_SM = 0;
		d_CNT = 0L;
	}

	//ResultSet d 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromd() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(d.getObject(1));
		row.add(d.getObject(2));
		row.add(d.getObject(3));
		row.add(d.getObject(4));
		row.add(d.getLong(5));
		row.add(d.getDouble(6));
		row.add(d.getLong(7));

		return row;
	}

	//ResultSet cc 객체에서 필드 값 설정 함수
	private void setFieldVariableFromcc() throws Exception{
		cc_ORG_GRP_CD = GetB(cc.getString(1));
		cc_AREA = GetB(cc.getString(2));
		cc_SM = cc.getDouble(3);
		cc_CNT = cc.getLong(4);
	}

	//ResultSet cc 객체의 필드 값 초기화 함수
	private void setFieldInitFromcc(){
		cc_ORG_GRP_CD = "";
		cc_AREA = "";
		cc_SM = 0;
		cc_CNT = 0L;
	}

	//ResultSet cc 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromcc() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(cc.getObject(1));
		row.add(cc.getObject(2));
		row.add(cc.getDouble(3));
		row.add(cc.getLong(4));

		return row;
	}

	//ResultSet getJnspRePerAge 객체에서 필드 값 설정 함수
	private void setFieldVariableFromgetJnspRePerAge() throws Exception{
		getJnspRePerAge_ORG_GRP_CD = GetB(getJnspRePerAge.getString(1));
		getJnspRePerAge_AREA = GetB(getJnspRePerAge.getString(2));
		getJnspRePerAge_SM = getJnspRePerAge.getDouble(3);
		getJnspRePerAge_CNT = getJnspRePerAge.getLong(4);
	}

	//ResultSet getJnspRePerAge 객체의 필드 값 초기화 함수
	private void setFieldInitFromgetJnspRePerAge(){
		getJnspRePerAge_ORG_GRP_CD = "";
		getJnspRePerAge_AREA = "";
		getJnspRePerAge_SM = 0;
		getJnspRePerAge_CNT = 0L;
	}

	//ResultSet getJnspRePerAge 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromgetJnspRePerAge() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(getJnspRePerAge.getObject(1));
		row.add(getJnspRePerAge.getObject(2));
		row.add(getJnspRePerAge.getDouble(3));
		row.add(getJnspRePerAge.getLong(4));

		return row;
	}

	//ResultSet getJnspRePerAgeTt 객체에서 필드 값 설정 함수
	private void setFieldVariableFromgetJnspRePerAgeTt() throws Exception{
		getJnspRePerAgeTt_ORG_GRP_CD = GetB(getJnspRePerAgeTt.getString(1));
		getJnspRePerAgeTt_AREA = GetB(getJnspRePerAgeTt.getString(2));
		getJnspRePerAgeTt_SM = getJnspRePerAgeTt.getDouble(3);
		getJnspRePerAgeTt_CNT = getJnspRePerAgeTt.getLong(4);
	}

	//ResultSet getJnspRePerAgeTt 객체의 필드 값 초기화 함수
	private void setFieldInitFromgetJnspRePerAgeTt(){
		getJnspRePerAgeTt_ORG_GRP_CD = "";
		getJnspRePerAgeTt_AREA = "";
		getJnspRePerAgeTt_SM = 0;
		getJnspRePerAgeTt_CNT = 0L;
	}

	//ResultSet getJnspRePerAgeTt 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromgetJnspRePerAgeTt() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(getJnspRePerAgeTt.getObject(1));
		row.add(getJnspRePerAgeTt.getObject(2));
		row.add(getJnspRePerAgeTt.getDouble(3));
		row.add(getJnspRePerAgeTt.getLong(4));

		return row;
	}

	//ResultSet getJnspRePerAgeTb 객체에서 필드 값 설정 함수
	private void setFieldVariableFromgetJnspRePerAgeTb() throws Exception{
		getJnspRePerAgeTb_ORG_GRP_CD = GetB(getJnspRePerAgeTb.getString(1));
		getJnspRePerAgeTb_AREA = GetB(getJnspRePerAgeTb.getString(2));
		getJnspRePerAgeTb_SM = getJnspRePerAgeTb.getDouble(3);
		getJnspRePerAgeTb_CNT = getJnspRePerAgeTb.getLong(4);
	}

	//ResultSet getJnspRePerAgeTb 객체의 필드 값 초기화 함수
	private void setFieldInitFromgetJnspRePerAgeTb(){
		getJnspRePerAgeTb_ORG_GRP_CD = "";
		getJnspRePerAgeTb_AREA = "";
		getJnspRePerAgeTb_SM = 0;
		getJnspRePerAgeTb_CNT = 0L;
	}

	//ResultSet getJnspRePerAgeTb 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromgetJnspRePerAgeTb() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(getJnspRePerAgeTb.getObject(1));
		row.add(getJnspRePerAgeTb.getObject(2));
		row.add(getJnspRePerAgeTb.getDouble(3));
		row.add(getJnspRePerAgeTb.getLong(4));

		return row;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//----AI_CHART_OBJ32 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ32( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet getJnspRePerAge 객체의 생성
		if(getJnspRePerAge==null){
			getJnspRePerAge = stat_getJnspRePerAge.executeQuery();
		}else{
			getJnspRePerAge.beforeFirst();
		}
		if(!getJnspRePerAge.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ32="\t";
		AI_CHART_OBJ32=AI_CHART_OBJ32 + "CNT\r\n";

		while(getJnspRePerAge.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromgetJnspRePerAge();   //RecordSet getJnspRePerAge에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ32=AI_CHART_OBJ32 + getJnspRePerAge_AREA + "\t";

			//데이터 설정
			AI_CHART_OBJ32=AI_CHART_OBJ32 + getJnspRePerAge_CNT + "\r\n";
		}   //while end
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|0|Temporary.style|통계", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 24, 20, "cell_style_0");
		setCellInfoMap_Internal("sheet10_A2", 0, 0, 256, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_J2", 256, 0, 29, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_K2", 285, 0, 29, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_L2", 314, 0, 29, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_M2", 343, 0, 29, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_N2", 372, 0, 29, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_O2", 401, 0, 29, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_P2", 430, 0, 29, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_Q2", 459, 0, 28, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_R2", 487, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_S2", 515, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_T2", 543, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_U2", 571, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_V2", 599, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_W2", 627, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_X2", 655, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_Y2", 683, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_B20", 24, 372, 348, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_N20", 372, 372, 339, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet10_B21", 24, 0, 348, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet10_N21", 372, 0, 339, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B22", 24, 0, 29, 20, "cell_style_8");
	}

	private ResultSet acquireResultSet(CallableStatement cstmt, int cursorIdx) throws SQLException {
		if (cstmt.execute()) {
			if (cursorIdx == -1) {
				return (cstmt.getResultSet());
			} else {
				return ((ResultSet) cstmt.getObject(cursorIdx));
			}
		} else {
			int count;
			if ((count = cstmt.getUpdateCount()) == -1) {
				if (cursorIdx == -1) {
					throw (new UnsupportedOperationException("None result"));
				} else {
					return ((ResultSet) cstmt.getObject(cursorIdx));
				}
			}
			while (true) {
				if (cstmt.getMoreResults()) {
					if (cursorIdx == -1) {
						return (cstmt.getResultSet());
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				} else if ((count = cstmt.getUpdateCount()) == -1) {
					if (cursorIdx == -1) {
						throw (new UnsupportedOperationException("None result-2"));
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				}
			}
		}
	}
}
%>
