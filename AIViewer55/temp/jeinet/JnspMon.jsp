<%
/************************************************************************************
Generated by AIDesigner 5.6.0.3
************************************************************************************
보고서 제목 : 통계
작성일 : 2016년4월22일 10시42분9초
수정일 : 2016년8월12일 17시3분13초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_getJnspYearTt
	StringBuilder sql_getJnspYearTt = new StringBuilder();
	sql_getJnspYearTt.setLength(0);
	sql_getJnspYearTt.append("SELECT ");
	sql_getJnspYearTt.append("				DATE_FORMAT(A.COUNT_DE,'%Y년') AS AXIS, ");
	sql_getJnspYearTt.append("				A.COUNT_DE countDe, ");
	sql_getJnspYearTt.append("				A.YY yy, ");
	sql_getJnspYearTt.append("				A.MM mm, ");
	sql_getJnspYearTt.append("				A.DD dd, ");
	sql_getJnspYearTt.append("				A.WW ww, ");
	sql_getJnspYearTt.append("				A.HH0 hh0, ");
	sql_getJnspYearTt.append("				A.HH1 hh1, ");
	sql_getJnspYearTt.append("				A.HH2 hh2, ");
	sql_getJnspYearTt.append("				A.HH3 hh3, ");
	sql_getJnspYearTt.append("				A.HH4 hh4, ");
	sql_getJnspYearTt.append("				A.HH5 hh5, ");
	sql_getJnspYearTt.append("				A.HH6 hh6, ");
	sql_getJnspYearTt.append("				A.HH7 hh7, ");
	sql_getJnspYearTt.append("				A.HH8 hh8, ");
	sql_getJnspYearTt.append("				A.HH9 hh9, ");
	sql_getJnspYearTt.append("				A.HH10 hh10, ");
	sql_getJnspYearTt.append("				A.HH11 hh11, ");
	sql_getJnspYearTt.append("				A.HH12 hh12, ");
	sql_getJnspYearTt.append("				A.HH13 hh13, ");
	sql_getJnspYearTt.append("				A.HH14 hh14, ");
	sql_getJnspYearTt.append("				A.HH15 hh15, ");
	sql_getJnspYearTt.append("				A.HH16 hh16, ");
	sql_getJnspYearTt.append("				A.HH17 hh17, ");
	sql_getJnspYearTt.append("				A.HH18 hh18, ");
	sql_getJnspYearTt.append("				A.HH19 hh19, ");
	sql_getJnspYearTt.append("				A.HH20 hh20, ");
	sql_getJnspYearTt.append("				A.HH21 hh21, ");
	sql_getJnspYearTt.append("				A.HH22 hh22, ");
	sql_getJnspYearTt.append("				A.HH23 hh23, ");
	sql_getJnspYearTt.append("				A.UHH0 uhh0, ");
	sql_getJnspYearTt.append("				A.UHH1 uhh1, ");
	sql_getJnspYearTt.append("				A.UHH2 uhh2, ");
	sql_getJnspYearTt.append("				A.UHH3 uhh3, ");
	sql_getJnspYearTt.append("				A.UHH4 uhh4, ");
	sql_getJnspYearTt.append("				A.UHH5 uhh5, ");
	sql_getJnspYearTt.append("				A.UHH6 uhh6, ");
	sql_getJnspYearTt.append("				A.UHH7 uhh7, ");
	sql_getJnspYearTt.append("				A.UHH8 uhh8, ");
	sql_getJnspYearTt.append("				A.UHH9 uhh9, ");
	sql_getJnspYearTt.append("				A.UHH10 uhh10, ");
	sql_getJnspYearTt.append("				A.UHH11 uhh11, ");
	sql_getJnspYearTt.append("				A.UHH12 uhh12, ");
	sql_getJnspYearTt.append("				A.UHH13 uhh13, ");
	sql_getJnspYearTt.append("				A.UHH14 uhh14, ");
	sql_getJnspYearTt.append("				A.UHH15 uhh15, ");
	sql_getJnspYearTt.append("				A.UHH16 uhh16, ");
	sql_getJnspYearTt.append("				A.UHH17 uhh17, ");
	sql_getJnspYearTt.append("				A.UHH18 uhh18, ");
	sql_getJnspYearTt.append("				A.UHH19 uhh19, ");
	sql_getJnspYearTt.append("				A.UHH20 uhh20, ");
	sql_getJnspYearTt.append("				A.UHH21 uhh21, ");
	sql_getJnspYearTt.append("				A.UHH22 uhh22, ");
	sql_getJnspYearTt.append("				A.UHH23 uhh23, ");
	sql_getJnspYearTt.append("				A.HITS hits, ");
	sql_getJnspYearTt.append("				A.UNIQ_HITS uniqHits, ");
	sql_getJnspYearTt.append("				SUM(A.HITS) AS CNT ");
	sql_getJnspYearTt.append("			FROM ");
	sql_getJnspYearTt.append("				JMY_COUNTER_DAY AS A ");
	sql_getJnspYearTt.append("			WHERE 1 = 1 ");
	sql_getJnspYearTt.append("			AND A.SITE_ID = 'jeinet' ");
	sql_getJnspYearTt.append("			AND A.COUNT_DE >= DATE_ADD(NOW(), INTERVAL -6 YEAR) ");
	sql_getJnspYearTt.append("			AND A.COUNT_DE <= CONCAT(DATE_FORMAT(A.COUNT_DE, NOW())) ");
	sql_getJnspYearTt.append("GROUP BY AXIS ");
	initializer.prepareQuery("sql_getJnspYearTt", sql_getJnspYearTt.toString());

	//sql_getJnspMon
	StringBuilder sql_getJnspMon = new StringBuilder();
	sql_getJnspMon.setLength(0);
	sql_getJnspMon.append("SELECT ");
	sql_getJnspMon.append("				DATE_FORMAT(A.COUNT_DE,'%Y년%m월') AS AXIS, ");
	sql_getJnspMon.append("				A.COUNT_DE countDe, ");
	sql_getJnspMon.append("				A.YY yy, ");
	sql_getJnspMon.append("				A.MM mm, ");
	sql_getJnspMon.append("				A.DD dd, ");
	sql_getJnspMon.append("				A.WW ww, ");
	sql_getJnspMon.append("				A.HH0 hh0, ");
	sql_getJnspMon.append("				A.HH1 hh1, ");
	sql_getJnspMon.append("				A.HH2 hh2, ");
	sql_getJnspMon.append("				A.HH3 hh3, ");
	sql_getJnspMon.append("				A.HH4 hh4, ");
	sql_getJnspMon.append("				A.HH5 hh5, ");
	sql_getJnspMon.append("				A.HH6 hh6, ");
	sql_getJnspMon.append("				A.HH7 hh7, ");
	sql_getJnspMon.append("				A.HH8 hh8, ");
	sql_getJnspMon.append("				A.HH9 hh9, ");
	sql_getJnspMon.append("				A.HH10 hh10, ");
	sql_getJnspMon.append("				A.HH11 hh11, ");
	sql_getJnspMon.append("				A.HH12 hh12, ");
	sql_getJnspMon.append("				A.HH13 hh13, ");
	sql_getJnspMon.append("				A.HH14 hh14, ");
	sql_getJnspMon.append("				A.HH15 hh15, ");
	sql_getJnspMon.append("				A.HH16 hh16, ");
	sql_getJnspMon.append("				A.HH17 hh17, ");
	sql_getJnspMon.append("				A.HH18 hh18, ");
	sql_getJnspMon.append("				A.HH19 hh19, ");
	sql_getJnspMon.append("				A.HH20 hh20, ");
	sql_getJnspMon.append("				A.HH21 hh21, ");
	sql_getJnspMon.append("				A.HH22 hh22, ");
	sql_getJnspMon.append("				A.HH23 hh23, ");
	sql_getJnspMon.append("				A.UHH0 uhh0, ");
	sql_getJnspMon.append("				A.UHH1 uhh1, ");
	sql_getJnspMon.append("				A.UHH2 uhh2, ");
	sql_getJnspMon.append("				A.UHH3 uhh3, ");
	sql_getJnspMon.append("				A.UHH4 uhh4, ");
	sql_getJnspMon.append("				A.UHH5 uhh5, ");
	sql_getJnspMon.append("				A.UHH6 uhh6, ");
	sql_getJnspMon.append("				A.UHH7 uhh7, ");
	sql_getJnspMon.append("				A.UHH8 uhh8, ");
	sql_getJnspMon.append("				A.UHH9 uhh9, ");
	sql_getJnspMon.append("				A.UHH10 uhh10, ");
	sql_getJnspMon.append("				A.UHH11 uhh11, ");
	sql_getJnspMon.append("				A.UHH12 uhh12, ");
	sql_getJnspMon.append("				A.UHH13 uhh13, ");
	sql_getJnspMon.append("				A.UHH14 uhh14, ");
	sql_getJnspMon.append("				A.UHH15 uhh15, ");
	sql_getJnspMon.append("				A.UHH16 uhh16, ");
	sql_getJnspMon.append("				A.UHH17 uhh17, ");
	sql_getJnspMon.append("				A.UHH18 uhh18, ");
	sql_getJnspMon.append("				A.UHH19 uhh19, ");
	sql_getJnspMon.append("				A.UHH20 uhh20, ");
	sql_getJnspMon.append("				A.UHH21 uhh21, ");
	sql_getJnspMon.append("				A.UHH22 uhh22, ");
	sql_getJnspMon.append("				A.UHH23 uhh23, ");
	sql_getJnspMon.append("				A.HITS hits, ");
	sql_getJnspMon.append("				A.UNIQ_HITS uniqHits, ");
	sql_getJnspMon.append("				SUM(A.HITS) AS CNT ");
	sql_getJnspMon.append("			FROM ");
	sql_getJnspMon.append("				JMY_COUNTER_DAY AS A ");
	sql_getJnspMon.append("			WHERE 1 = 1 ");
	sql_getJnspMon.append("			AND A.SITE_ID = 'jeinet' ");
	sql_getJnspMon.append("AND A.COUNT_DE >= DATE_ADD(NOW(), INTERVAL -13 MONTH) ");
	sql_getJnspMon.append("AND A.COUNT_DE <= CONCAT(DATE_FORMAT(A.COUNT_DE, NOW())) ");
	sql_getJnspMon.append("GROUP BY AXIS ");
	sql_getJnspMon.append("ORDER BY AXIS ASC ");
	initializer.prepareQuery("sql_getJnspMon", sql_getJnspMon.toString());

	//sql_getJnspMonTt
	StringBuilder sql_getJnspMonTt = new StringBuilder();
	sql_getJnspMonTt.setLength(0);
	sql_getJnspMonTt.append("SELECT ");
	sql_getJnspMonTt.append("				DATE_FORMAT(A.COUNT_DE,'%Y년%m월') AS AXIS, ");
	sql_getJnspMonTt.append("				A.COUNT_DE countDe, ");
	sql_getJnspMonTt.append("				A.YY yy, ");
	sql_getJnspMonTt.append("				A.MM mm, ");
	sql_getJnspMonTt.append("				A.DD dd, ");
	sql_getJnspMonTt.append("				A.WW ww, ");
	sql_getJnspMonTt.append("				A.HH0 hh0, ");
	sql_getJnspMonTt.append("				A.HH1 hh1, ");
	sql_getJnspMonTt.append("				A.HH2 hh2, ");
	sql_getJnspMonTt.append("				A.HH3 hh3, ");
	sql_getJnspMonTt.append("				A.HH4 hh4, ");
	sql_getJnspMonTt.append("				A.HH5 hh5, ");
	sql_getJnspMonTt.append("				A.HH6 hh6, ");
	sql_getJnspMonTt.append("				A.HH7 hh7, ");
	sql_getJnspMonTt.append("				A.HH8 hh8, ");
	sql_getJnspMonTt.append("				A.HH9 hh9, ");
	sql_getJnspMonTt.append("				A.HH10 hh10, ");
	sql_getJnspMonTt.append("				A.HH11 hh11, ");
	sql_getJnspMonTt.append("				A.HH12 hh12, ");
	sql_getJnspMonTt.append("				A.HH13 hh13, ");
	sql_getJnspMonTt.append("				A.HH14 hh14, ");
	sql_getJnspMonTt.append("				A.HH15 hh15, ");
	sql_getJnspMonTt.append("				A.HH16 hh16, ");
	sql_getJnspMonTt.append("				A.HH17 hh17, ");
	sql_getJnspMonTt.append("				A.HH18 hh18, ");
	sql_getJnspMonTt.append("				A.HH19 hh19, ");
	sql_getJnspMonTt.append("				A.HH20 hh20, ");
	sql_getJnspMonTt.append("				A.HH21 hh21, ");
	sql_getJnspMonTt.append("				A.HH22 hh22, ");
	sql_getJnspMonTt.append("				A.HH23 hh23, ");
	sql_getJnspMonTt.append("				A.UHH0 uhh0, ");
	sql_getJnspMonTt.append("				A.UHH1 uhh1, ");
	sql_getJnspMonTt.append("				A.UHH2 uhh2, ");
	sql_getJnspMonTt.append("				A.UHH3 uhh3, ");
	sql_getJnspMonTt.append("				A.UHH4 uhh4, ");
	sql_getJnspMonTt.append("				A.UHH5 uhh5, ");
	sql_getJnspMonTt.append("				A.UHH6 uhh6, ");
	sql_getJnspMonTt.append("				A.UHH7 uhh7, ");
	sql_getJnspMonTt.append("				A.UHH8 uhh8, ");
	sql_getJnspMonTt.append("				A.UHH9 uhh9, ");
	sql_getJnspMonTt.append("				A.UHH10 uhh10, ");
	sql_getJnspMonTt.append("				A.UHH11 uhh11, ");
	sql_getJnspMonTt.append("				A.UHH12 uhh12, ");
	sql_getJnspMonTt.append("				A.UHH13 uhh13, ");
	sql_getJnspMonTt.append("				A.UHH14 uhh14, ");
	sql_getJnspMonTt.append("				A.UHH15 uhh15, ");
	sql_getJnspMonTt.append("				A.UHH16 uhh16, ");
	sql_getJnspMonTt.append("				A.UHH17 uhh17, ");
	sql_getJnspMonTt.append("				A.UHH18 uhh18, ");
	sql_getJnspMonTt.append("				A.UHH19 uhh19, ");
	sql_getJnspMonTt.append("				A.UHH20 uhh20, ");
	sql_getJnspMonTt.append("				A.UHH21 uhh21, ");
	sql_getJnspMonTt.append("				A.UHH22 uhh22, ");
	sql_getJnspMonTt.append("				A.UHH23 uhh23, ");
	sql_getJnspMonTt.append("				A.HITS hits, ");
	sql_getJnspMonTt.append("				A.UNIQ_HITS uniqHits, ");
	sql_getJnspMonTt.append("				SUM(A.HITS) AS CNT ");
	sql_getJnspMonTt.append("			FROM ");
	sql_getJnspMonTt.append("				JMY_COUNTER_DAY AS A ");
	sql_getJnspMonTt.append("			WHERE 1 = 1 ");
	sql_getJnspMonTt.append("			AND A.SITE_ID = 'jeinet' ");
	sql_getJnspMonTt.append("AND A.COUNT_DE >= DATE_ADD(NOW(), INTERVAL -13 MONTH) ");
	sql_getJnspMonTt.append("AND A.COUNT_DE <= CONCAT(DATE_FORMAT(A.COUNT_DE, NOW())) ");
	sql_getJnspMonTt.append("GROUP BY AXIS ");
	sql_getJnspMonTt.append("ORDER BY AXIS ASC ");
	initializer.prepareQuery("sql_getJnspMonTt", sql_getJnspMonTt.toString());

	//sql_getJnspMonTb
	StringBuilder sql_getJnspMonTb = new StringBuilder();
	sql_getJnspMonTb.setLength(0);
	sql_getJnspMonTb.append("SELECT ");
	sql_getJnspMonTb.append("				DATE_FORMAT(A.COUNT_DE,'%Y년%m월') AS AXIS, ");
	sql_getJnspMonTb.append("				A.COUNT_DE countDe, ");
	sql_getJnspMonTb.append("				A.YY yy, ");
	sql_getJnspMonTb.append("				A.MM mm, ");
	sql_getJnspMonTb.append("				A.DD dd, ");
	sql_getJnspMonTb.append("				A.WW ww, ");
	sql_getJnspMonTb.append("				A.HH0 hh0, ");
	sql_getJnspMonTb.append("				A.HH1 hh1, ");
	sql_getJnspMonTb.append("				A.HH2 hh2, ");
	sql_getJnspMonTb.append("				A.HH3 hh3, ");
	sql_getJnspMonTb.append("				A.HH4 hh4, ");
	sql_getJnspMonTb.append("				A.HH5 hh5, ");
	sql_getJnspMonTb.append("				A.HH6 hh6, ");
	sql_getJnspMonTb.append("				A.HH7 hh7, ");
	sql_getJnspMonTb.append("				A.HH8 hh8, ");
	sql_getJnspMonTb.append("				A.HH9 hh9, ");
	sql_getJnspMonTb.append("				A.HH10 hh10, ");
	sql_getJnspMonTb.append("				A.HH11 hh11, ");
	sql_getJnspMonTb.append("				A.HH12 hh12, ");
	sql_getJnspMonTb.append("				A.HH13 hh13, ");
	sql_getJnspMonTb.append("				A.HH14 hh14, ");
	sql_getJnspMonTb.append("				A.HH15 hh15, ");
	sql_getJnspMonTb.append("				A.HH16 hh16, ");
	sql_getJnspMonTb.append("				A.HH17 hh17, ");
	sql_getJnspMonTb.append("				A.HH18 hh18, ");
	sql_getJnspMonTb.append("				A.HH19 hh19, ");
	sql_getJnspMonTb.append("				A.HH20 hh20, ");
	sql_getJnspMonTb.append("				A.HH21 hh21, ");
	sql_getJnspMonTb.append("				A.HH22 hh22, ");
	sql_getJnspMonTb.append("				A.HH23 hh23, ");
	sql_getJnspMonTb.append("				A.UHH0 uhh0, ");
	sql_getJnspMonTb.append("				A.UHH1 uhh1, ");
	sql_getJnspMonTb.append("				A.UHH2 uhh2, ");
	sql_getJnspMonTb.append("				A.UHH3 uhh3, ");
	sql_getJnspMonTb.append("				A.UHH4 uhh4, ");
	sql_getJnspMonTb.append("				A.UHH5 uhh5, ");
	sql_getJnspMonTb.append("				A.UHH6 uhh6, ");
	sql_getJnspMonTb.append("				A.UHH7 uhh7, ");
	sql_getJnspMonTb.append("				A.UHH8 uhh8, ");
	sql_getJnspMonTb.append("				A.UHH9 uhh9, ");
	sql_getJnspMonTb.append("				A.UHH10 uhh10, ");
	sql_getJnspMonTb.append("				A.UHH11 uhh11, ");
	sql_getJnspMonTb.append("				A.UHH12 uhh12, ");
	sql_getJnspMonTb.append("				A.UHH13 uhh13, ");
	sql_getJnspMonTb.append("				A.UHH14 uhh14, ");
	sql_getJnspMonTb.append("				A.UHH15 uhh15, ");
	sql_getJnspMonTb.append("				A.UHH16 uhh16, ");
	sql_getJnspMonTb.append("				A.UHH17 uhh17, ");
	sql_getJnspMonTb.append("				A.UHH18 uhh18, ");
	sql_getJnspMonTb.append("				A.UHH19 uhh19, ");
	sql_getJnspMonTb.append("				A.UHH20 uhh20, ");
	sql_getJnspMonTb.append("				A.UHH21 uhh21, ");
	sql_getJnspMonTb.append("				A.UHH22 uhh22, ");
	sql_getJnspMonTb.append("				A.UHH23 uhh23, ");
	sql_getJnspMonTb.append("				A.HITS hits, ");
	sql_getJnspMonTb.append("				A.UNIQ_HITS uniqHits, ");
	sql_getJnspMonTb.append("				SUM(A.HITS) AS CNT ");
	sql_getJnspMonTb.append("			FROM ");
	sql_getJnspMonTb.append("				JMY_COUNTER_DAY AS A ");
	sql_getJnspMonTb.append("			WHERE 1 = 1 ");
	sql_getJnspMonTb.append("			AND A.SITE_ID = 'jeinet' ");
	sql_getJnspMonTb.append("AND A.COUNT_DE >= DATE_ADD(NOW(), INTERVAL -13 MONTH) ");
	sql_getJnspMonTb.append("AND A.COUNT_DE <= CONCAT(DATE_FORMAT(A.COUNT_DE, NOW())) ");
	sql_getJnspMonTb.append("GROUP BY AXIS ");
	sql_getJnspMonTb.append("ORDER BY AXIS DESC ");
	initializer.prepareQuery("sql_getJnspMonTb", sql_getJnspMonTb.toString());
}

private Logger logger = Logger.getLogger("com.activeintra");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	long sheet10_A1 = 0L;
	String sheet10_A2 = "";
	String sheet10_B20 = "";
	String sheet10_N20 = "";
	String AI_CHART_OBJ32;
	String sheet10_B21 = "";
	long sheet10_N21 = 0L;
	String sheet10_B22 = "";

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_jnsp; 	 //jnsp Connection 객체
	private java.sql.PreparedStatement stat_getJnspYearTt;		//ResultSet getJnspYearTt 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet getJnspYearTt;		//ResultSet getJnspYearTt 객체
	private java.sql.PreparedStatement stat_getJnspMon;		//ResultSet getJnspMon 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet getJnspMon;		//ResultSet getJnspMon 객체
	private java.sql.PreparedStatement stat_getJnspMonTt;		//ResultSet getJnspMonTt 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet getJnspMonTt;		//ResultSet getJnspMonTt 객체
	private java.sql.PreparedStatement stat_getJnspMonTb;		//ResultSet getJnspMonTb 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet getJnspMonTb;		//ResultSet getJnspMonTb 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_getJnspYearTt = new StringBuilder();		//ResultSet getJnspYearTt 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_getJnspMon = new StringBuilder();		//ResultSet getJnspMon 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_getJnspMonTt = new StringBuilder();		//ResultSet getJnspMonTt 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_getJnspMonTb = new StringBuilder();		//ResultSet getJnspMonTb 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet getJnspYearTt 객체에서 필드 값을 받는 쿼리 필드 변수
	private String getJnspYearTt_AXIS;
	private String getJnspYearTt_countDe;
	private long getJnspYearTt_yy;
	private long getJnspYearTt_mm;
	private long getJnspYearTt_dd;
	private String getJnspYearTt_ww;
	private long getJnspYearTt_hh0;
	private long getJnspYearTt_hh1;
	private long getJnspYearTt_hh2;
	private long getJnspYearTt_hh3;
	private long getJnspYearTt_hh4;
	private long getJnspYearTt_hh5;
	private long getJnspYearTt_hh6;
	private long getJnspYearTt_hh7;
	private long getJnspYearTt_hh8;
	private long getJnspYearTt_hh9;
	private long getJnspYearTt_hh10;
	private long getJnspYearTt_hh11;
	private long getJnspYearTt_hh12;
	private long getJnspYearTt_hh13;
	private long getJnspYearTt_hh14;
	private long getJnspYearTt_hh15;
	private long getJnspYearTt_hh16;
	private long getJnspYearTt_hh17;
	private long getJnspYearTt_hh18;
	private long getJnspYearTt_hh19;
	private long getJnspYearTt_hh20;
	private long getJnspYearTt_hh21;
	private long getJnspYearTt_hh22;
	private long getJnspYearTt_hh23;
	private long getJnspYearTt_uhh0;
	private long getJnspYearTt_uhh1;
	private long getJnspYearTt_uhh2;
	private long getJnspYearTt_uhh3;
	private long getJnspYearTt_uhh4;
	private long getJnspYearTt_uhh5;
	private long getJnspYearTt_uhh6;
	private long getJnspYearTt_uhh7;
	private long getJnspYearTt_uhh8;
	private long getJnspYearTt_uhh9;
	private long getJnspYearTt_uhh10;
	private long getJnspYearTt_uhh11;
	private long getJnspYearTt_uhh12;
	private long getJnspYearTt_uhh13;
	private long getJnspYearTt_uhh14;
	private long getJnspYearTt_uhh15;
	private long getJnspYearTt_uhh16;
	private long getJnspYearTt_uhh17;
	private long getJnspYearTt_uhh18;
	private long getJnspYearTt_uhh19;
	private long getJnspYearTt_uhh20;
	private long getJnspYearTt_uhh21;
	private long getJnspYearTt_uhh22;
	private long getJnspYearTt_uhh23;
	private long getJnspYearTt_hits;
	private long getJnspYearTt_uniqHits;
	private long getJnspYearTt_CNT;

	//ResultSet getJnspMon 객체에서 필드 값을 받는 쿼리 필드 변수
	private String getJnspMon_AXIS;
	private String getJnspMon_countDe;
	private long getJnspMon_yy;
	private long getJnspMon_mm;
	private long getJnspMon_dd;
	private String getJnspMon_ww;
	private long getJnspMon_hh0;
	private long getJnspMon_hh1;
	private long getJnspMon_hh2;
	private long getJnspMon_hh3;
	private long getJnspMon_hh4;
	private long getJnspMon_hh5;
	private long getJnspMon_hh6;
	private long getJnspMon_hh7;
	private long getJnspMon_hh8;
	private long getJnspMon_hh9;
	private long getJnspMon_hh10;
	private long getJnspMon_hh11;
	private long getJnspMon_hh12;
	private long getJnspMon_hh13;
	private long getJnspMon_hh14;
	private long getJnspMon_hh15;
	private long getJnspMon_hh16;
	private long getJnspMon_hh17;
	private long getJnspMon_hh18;
	private long getJnspMon_hh19;
	private long getJnspMon_hh20;
	private long getJnspMon_hh21;
	private long getJnspMon_hh22;
	private long getJnspMon_hh23;
	private long getJnspMon_uhh0;
	private long getJnspMon_uhh1;
	private long getJnspMon_uhh2;
	private long getJnspMon_uhh3;
	private long getJnspMon_uhh4;
	private long getJnspMon_uhh5;
	private long getJnspMon_uhh6;
	private long getJnspMon_uhh7;
	private long getJnspMon_uhh8;
	private long getJnspMon_uhh9;
	private long getJnspMon_uhh10;
	private long getJnspMon_uhh11;
	private long getJnspMon_uhh12;
	private long getJnspMon_uhh13;
	private long getJnspMon_uhh14;
	private long getJnspMon_uhh15;
	private long getJnspMon_uhh16;
	private long getJnspMon_uhh17;
	private long getJnspMon_uhh18;
	private long getJnspMon_uhh19;
	private long getJnspMon_uhh20;
	private long getJnspMon_uhh21;
	private long getJnspMon_uhh22;
	private long getJnspMon_uhh23;
	private long getJnspMon_hits;
	private long getJnspMon_uniqHits;
	private long getJnspMon_CNT;

	//ResultSet getJnspMonTt 객체에서 필드 값을 받는 쿼리 필드 변수
	private String getJnspMonTt_AXIS;
	private String getJnspMonTt_countDe;
	private long getJnspMonTt_yy;
	private long getJnspMonTt_mm;
	private long getJnspMonTt_dd;
	private String getJnspMonTt_ww;
	private long getJnspMonTt_hh0;
	private long getJnspMonTt_hh1;
	private long getJnspMonTt_hh2;
	private long getJnspMonTt_hh3;
	private long getJnspMonTt_hh4;
	private long getJnspMonTt_hh5;
	private long getJnspMonTt_hh6;
	private long getJnspMonTt_hh7;
	private long getJnspMonTt_hh8;
	private long getJnspMonTt_hh9;
	private long getJnspMonTt_hh10;
	private long getJnspMonTt_hh11;
	private long getJnspMonTt_hh12;
	private long getJnspMonTt_hh13;
	private long getJnspMonTt_hh14;
	private long getJnspMonTt_hh15;
	private long getJnspMonTt_hh16;
	private long getJnspMonTt_hh17;
	private long getJnspMonTt_hh18;
	private long getJnspMonTt_hh19;
	private long getJnspMonTt_hh20;
	private long getJnspMonTt_hh21;
	private long getJnspMonTt_hh22;
	private long getJnspMonTt_hh23;
	private long getJnspMonTt_uhh0;
	private long getJnspMonTt_uhh1;
	private long getJnspMonTt_uhh2;
	private long getJnspMonTt_uhh3;
	private long getJnspMonTt_uhh4;
	private long getJnspMonTt_uhh5;
	private long getJnspMonTt_uhh6;
	private long getJnspMonTt_uhh7;
	private long getJnspMonTt_uhh8;
	private long getJnspMonTt_uhh9;
	private long getJnspMonTt_uhh10;
	private long getJnspMonTt_uhh11;
	private long getJnspMonTt_uhh12;
	private long getJnspMonTt_uhh13;
	private long getJnspMonTt_uhh14;
	private long getJnspMonTt_uhh15;
	private long getJnspMonTt_uhh16;
	private long getJnspMonTt_uhh17;
	private long getJnspMonTt_uhh18;
	private long getJnspMonTt_uhh19;
	private long getJnspMonTt_uhh20;
	private long getJnspMonTt_uhh21;
	private long getJnspMonTt_uhh22;
	private long getJnspMonTt_uhh23;
	private long getJnspMonTt_hits;
	private long getJnspMonTt_uniqHits;
	private long getJnspMonTt_CNT;

	//ResultSet getJnspMonTb 객체에서 필드 값을 받는 쿼리 필드 변수
	private String getJnspMonTb_AXIS;
	private String getJnspMonTb_countDe;
	private long getJnspMonTb_yy;
	private long getJnspMonTb_mm;
	private long getJnspMonTb_dd;
	private String getJnspMonTb_ww;
	private long getJnspMonTb_hh0;
	private long getJnspMonTb_hh1;
	private long getJnspMonTb_hh2;
	private long getJnspMonTb_hh3;
	private long getJnspMonTb_hh4;
	private long getJnspMonTb_hh5;
	private long getJnspMonTb_hh6;
	private long getJnspMonTb_hh7;
	private long getJnspMonTb_hh8;
	private long getJnspMonTb_hh9;
	private long getJnspMonTb_hh10;
	private long getJnspMonTb_hh11;
	private long getJnspMonTb_hh12;
	private long getJnspMonTb_hh13;
	private long getJnspMonTb_hh14;
	private long getJnspMonTb_hh15;
	private long getJnspMonTb_hh16;
	private long getJnspMonTb_hh17;
	private long getJnspMonTb_hh18;
	private long getJnspMonTb_hh19;
	private long getJnspMonTb_hh20;
	private long getJnspMonTb_hh21;
	private long getJnspMonTb_hh22;
	private long getJnspMonTb_hh23;
	private long getJnspMonTb_uhh0;
	private long getJnspMonTb_uhh1;
	private long getJnspMonTb_uhh2;
	private long getJnspMonTb_uhh3;
	private long getJnspMonTb_uhh4;
	private long getJnspMonTb_uhh5;
	private long getJnspMonTb_uhh6;
	private long getJnspMonTb_uhh7;
	private long getJnspMonTb_uhh8;
	private long getJnspMonTb_uhh9;
	private long getJnspMonTb_uhh10;
	private long getJnspMonTb_uhh11;
	private long getJnspMonTb_uhh12;
	private long getJnspMonTb_uhh13;
	private long getJnspMonTb_uhh14;
	private long getJnspMonTb_uhh15;
	private long getJnspMonTb_uhh16;
	private long getJnspMonTb_uhh17;
	private long getJnspMonTb_uhh18;
	private long getJnspMonTb_uhh19;
	private long getJnspMonTb_uhh20;
	private long getJnspMonTb_uhh21;
	private long getJnspMonTb_uhh22;
	private long getJnspMonTb_uhh23;
	private long getJnspMonTb_hits;
	private long getJnspMonTb_uniqHits;
	private long getJnspMonTb_CNT;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "56 70 56 70");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(e);
			throw e;
		}finally{    //finally 구문
			//DataSet Close
			cleanup(getJnspMonTb, stat_getJnspMonTb, null, null);
			cleanup(getJnspMonTt, stat_getJnspMonTt, null, null);
			cleanup(getJnspMon, stat_getJnspMon, null, null);
			cleanup(getJnspYearTt, stat_getJnspYearTt, null, null);
			cleanup(null, null, null, conn_jnsp);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "2700x2970", "256", "VERTICAL", "7 0 7 0");
		initSheetVariant(19, 12, 747, 831, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromyyyyy(true, false);    //Void 밴드 호출
		getScriptFromtest(true, true);    //Void 밴드 호출
		getScriptFromTbList(true);    //반복 밴드 호출
		getScriptFromttt(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----yyyyy VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : yyyyy
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromyyyyy(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet getJnspMonTt 객체의 생성
			if(getJnspMonTt==null){
				getJnspMonTt = stat_getJnspMonTt.executeQuery();
			}else{
				getJnspMonTt.beforeFirst();
			}

			//데이터 fetch
			if(getJnspMonTt.next()){
				setFieldVariableFromgetJnspMonTt();	//ResultSet getJnspMonTt에서 필드 값 설정
			}else{
				setFieldInitFromgetJnspMonTt();	//ResultSet getJnspMonTt의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A1=0L;

			//데이터 변수 할당
			sheet10_A1 = getJnspMonTt_CNT;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptyyyyy();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----test VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : test
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromtest(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=392;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ32="";

			//데이터 변수 할당
			sheet10_A2="    연구장비 구축 통계";
			sheet10_B20="월별";
			sheet10_N20="접속수";
			getChartDataAI_CHART_OBJ32( );
		}    //end if(bIsFirst)

		if(getJnspMonTt_CNT != 0 )
		{
		}
		else
		{
			return;
		}
		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScripttest();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----TbList RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : TbList
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromTbList(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_B21="";
		sheet10_N21=0L;

		//DataSet 객체 생성
		//ResultSet getJnspMonTb 객체의 생성
		if(getJnspMonTb==null){
			getJnspMonTb = stat_getJnspMonTb.executeQuery();
		}else{
			getJnspMonTb.beforeFirst();
		}

		if(getJnspMonTt_CNT != 0 )
		{
		}
		else
		{
			return;
		}
		//--while Loop Start--##
		while(getJnspMonTb.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromgetJnspMonTb();	//RecordSet getJnspMonTb에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_B21 = getJnspMonTb_AXIS;
			sheet10_N21 = getJnspMonTb_CNT;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptTbList();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----ttt VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : ttt
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromttt(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet10_B22="데이터가 없습니다";
		}    //end if(bIsFirst)

		if(getJnspMonTt_CNT == 0 )
		{
		}
		else
		{
			return;
		}
		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptttt();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----yyyyy 스크립트 문 출력 함수----
	private void writeScriptyyyyy( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), String.valueOf(sheet10_A1), "sheet10_A1", mapStyle.get("sheet10_A1"));
	}

	//----test 스크립트 문 출력 함수----
	private void writeScripttest( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A2"), nYCurPos+mapTop.get("sheet10_A2"), mapWidth.get("sheet10_A2"), mapHeight.get("sheet10_A2"), sheet10_A2, "sheet10_A2", mapStyle.get("sheet10_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_J2"), nYCurPos+mapTop.get("sheet10_J2"), mapWidth.get("sheet10_J2"), mapHeight.get("sheet10_J2"), "", "sheet10_J2", mapStyle.get("sheet10_J2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_K2"), nYCurPos+mapTop.get("sheet10_K2"), mapWidth.get("sheet10_K2"), mapHeight.get("sheet10_K2"), "", "sheet10_K2", mapStyle.get("sheet10_K2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_L2"), nYCurPos+mapTop.get("sheet10_L2"), mapWidth.get("sheet10_L2"), mapHeight.get("sheet10_L2"), "", "sheet10_L2", mapStyle.get("sheet10_L2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_M2"), nYCurPos+mapTop.get("sheet10_M2"), mapWidth.get("sheet10_M2"), mapHeight.get("sheet10_M2"), "", "sheet10_M2", mapStyle.get("sheet10_M2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_N2"), nYCurPos+mapTop.get("sheet10_N2"), mapWidth.get("sheet10_N2"), mapHeight.get("sheet10_N2"), "", "sheet10_N2", mapStyle.get("sheet10_N2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O2"), nYCurPos+mapTop.get("sheet10_O2"), mapWidth.get("sheet10_O2"), mapHeight.get("sheet10_O2"), "", "sheet10_O2", mapStyle.get("sheet10_O2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_P2"), nYCurPos+mapTop.get("sheet10_P2"), mapWidth.get("sheet10_P2"), mapHeight.get("sheet10_P2"), "", "sheet10_P2", mapStyle.get("sheet10_P2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Q2"), nYCurPos+mapTop.get("sheet10_Q2"), mapWidth.get("sheet10_Q2"), mapHeight.get("sheet10_Q2"), "", "sheet10_Q2", mapStyle.get("sheet10_Q2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_R2"), nYCurPos+mapTop.get("sheet10_R2"), mapWidth.get("sheet10_R2"), mapHeight.get("sheet10_R2"), "", "sheet10_R2", mapStyle.get("sheet10_R2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_S2"), nYCurPos+mapTop.get("sheet10_S2"), mapWidth.get("sheet10_S2"), mapHeight.get("sheet10_S2"), "", "sheet10_S2", mapStyle.get("sheet10_S2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T2"), nYCurPos+mapTop.get("sheet10_T2"), mapWidth.get("sheet10_T2"), mapHeight.get("sheet10_T2"), "", "sheet10_T2", mapStyle.get("sheet10_T2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_U2"), nYCurPos+mapTop.get("sheet10_U2"), mapWidth.get("sheet10_U2"), mapHeight.get("sheet10_U2"), "", "sheet10_U2", mapStyle.get("sheet10_U2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_V2"), nYCurPos+mapTop.get("sheet10_V2"), mapWidth.get("sheet10_V2"), mapHeight.get("sheet10_V2"), "", "sheet10_V2", mapStyle.get("sheet10_V2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_W2"), nYCurPos+mapTop.get("sheet10_W2"), mapWidth.get("sheet10_W2"), mapHeight.get("sheet10_W2"), "", "sheet10_W2", mapStyle.get("sheet10_W2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_X2"), nYCurPos+mapTop.get("sheet10_X2"), mapWidth.get("sheet10_X2"), mapHeight.get("sheet10_X2"), "", "sheet10_X2", mapStyle.get("sheet10_X2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Y2"), nYCurPos+mapTop.get("sheet10_Y2"), mapWidth.get("sheet10_Y2"), mapHeight.get("sheet10_Y2"), "", "sheet10_Y2", mapStyle.get("sheet10_Y2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B20"), nYCurPos+mapTop.get("sheet10_B20"), mapWidth.get("sheet10_B20"), mapHeight.get("sheet10_B20"), sheet10_B20, "sheet10_B20", mapStyle.get("sheet10_B20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_N20"), nYCurPos+mapTop.get("sheet10_N20"), mapWidth.get("sheet10_N20"), mapHeight.get("sheet10_N20"), sheet10_N20, "sheet10_N20", mapStyle.get("sheet10_N20"));
		objectWrite(DRAW_OBJECT, nXCurPos+1, nYCurPos+33, 726, 322, AI_CHART_OBJ32, "AI_CHART_OBJ32", "draw_style_0");
	}

	//----TbList 스크립트 문 출력 함수----
	private void writeScriptTbList(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B21"), nYCurPos+mapTop.get("sheet10_B21"), mapWidth.get("sheet10_B21"), mapHeight.get("sheet10_B21"), sheet10_B21, "sheet10_B21", mapStyle.get("sheet10_B21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_N21"), nYCurPos+mapTop.get("sheet10_N21"), mapWidth.get("sheet10_N21"), mapHeight.get("sheet10_N21"), String.valueOf(sheet10_N21), "sheet10_N21", mapStyle.get("sheet10_N21"));
	}

	//----ttt 스크립트 문 출력 함수----
	private void writeScriptttt( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B22"), nYCurPos+mapTop.get("sheet10_B22"), mapWidth.get("sheet10_B22"), mapHeight.get("sheet10_B22"), sheet10_B22, "sheet10_B22", mapStyle.get("sheet10_B22"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//jnsp Connection 객체 생성
		Class.forName("com.mysql.jdbc.Driver");
		conn_jnsp = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/jnspcms?useUnicode=true&characterEncoding=utf-8", "jnspcms", "jnspcms!@12");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_getJnspYearTt = initializer.configPreparedStatement("sql_getJnspYearTt", mapParam, conn_jnsp, null);

		stat_getJnspMon = initializer.configPreparedStatement("sql_getJnspMon", mapParam, conn_jnsp, null);

		stat_getJnspMonTt = initializer.configPreparedStatement("sql_getJnspMonTt", mapParam, conn_jnsp, null);

		stat_getJnspMonTb = initializer.configPreparedStatement("sql_getJnspMonTb", mapParam, conn_jnsp, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet getJnspYearTt 객체에서 필드 값 설정 함수
	private void setFieldVariableFromgetJnspYearTt() throws Exception{
		getJnspYearTt_AXIS = GetB(getJnspYearTt.getString(1));
		getJnspYearTt_countDe = GetB(getJnspYearTt.getString(2));
		getJnspYearTt_yy = getJnspYearTt.getLong(3);
		getJnspYearTt_mm = getJnspYearTt.getLong(4);
		getJnspYearTt_dd = getJnspYearTt.getLong(5);
		getJnspYearTt_ww = GetB(getJnspYearTt.getString(6));
		getJnspYearTt_hh0 = getJnspYearTt.getLong(7);
		getJnspYearTt_hh1 = getJnspYearTt.getLong(8);
		getJnspYearTt_hh2 = getJnspYearTt.getLong(9);
		getJnspYearTt_hh3 = getJnspYearTt.getLong(10);
		getJnspYearTt_hh4 = getJnspYearTt.getLong(11);
		getJnspYearTt_hh5 = getJnspYearTt.getLong(12);
		getJnspYearTt_hh6 = getJnspYearTt.getLong(13);
		getJnspYearTt_hh7 = getJnspYearTt.getLong(14);
		getJnspYearTt_hh8 = getJnspYearTt.getLong(15);
		getJnspYearTt_hh9 = getJnspYearTt.getLong(16);
		getJnspYearTt_hh10 = getJnspYearTt.getLong(17);
		getJnspYearTt_hh11 = getJnspYearTt.getLong(18);
		getJnspYearTt_hh12 = getJnspYearTt.getLong(19);
		getJnspYearTt_hh13 = getJnspYearTt.getLong(20);
		getJnspYearTt_hh14 = getJnspYearTt.getLong(21);
		getJnspYearTt_hh15 = getJnspYearTt.getLong(22);
		getJnspYearTt_hh16 = getJnspYearTt.getLong(23);
		getJnspYearTt_hh17 = getJnspYearTt.getLong(24);
		getJnspYearTt_hh18 = getJnspYearTt.getLong(25);
		getJnspYearTt_hh19 = getJnspYearTt.getLong(26);
		getJnspYearTt_hh20 = getJnspYearTt.getLong(27);
		getJnspYearTt_hh21 = getJnspYearTt.getLong(28);
		getJnspYearTt_hh22 = getJnspYearTt.getLong(29);
		getJnspYearTt_hh23 = getJnspYearTt.getLong(30);
		getJnspYearTt_uhh0 = getJnspYearTt.getLong(31);
		getJnspYearTt_uhh1 = getJnspYearTt.getLong(32);
		getJnspYearTt_uhh2 = getJnspYearTt.getLong(33);
		getJnspYearTt_uhh3 = getJnspYearTt.getLong(34);
		getJnspYearTt_uhh4 = getJnspYearTt.getLong(35);
		getJnspYearTt_uhh5 = getJnspYearTt.getLong(36);
		getJnspYearTt_uhh6 = getJnspYearTt.getLong(37);
		getJnspYearTt_uhh7 = getJnspYearTt.getLong(38);
		getJnspYearTt_uhh8 = getJnspYearTt.getLong(39);
		getJnspYearTt_uhh9 = getJnspYearTt.getLong(40);
		getJnspYearTt_uhh10 = getJnspYearTt.getLong(41);
		getJnspYearTt_uhh11 = getJnspYearTt.getLong(42);
		getJnspYearTt_uhh12 = getJnspYearTt.getLong(43);
		getJnspYearTt_uhh13 = getJnspYearTt.getLong(44);
		getJnspYearTt_uhh14 = getJnspYearTt.getLong(45);
		getJnspYearTt_uhh15 = getJnspYearTt.getLong(46);
		getJnspYearTt_uhh16 = getJnspYearTt.getLong(47);
		getJnspYearTt_uhh17 = getJnspYearTt.getLong(48);
		getJnspYearTt_uhh18 = getJnspYearTt.getLong(49);
		getJnspYearTt_uhh19 = getJnspYearTt.getLong(50);
		getJnspYearTt_uhh20 = getJnspYearTt.getLong(51);
		getJnspYearTt_uhh21 = getJnspYearTt.getLong(52);
		getJnspYearTt_uhh22 = getJnspYearTt.getLong(53);
		getJnspYearTt_uhh23 = getJnspYearTt.getLong(54);
		getJnspYearTt_hits = getJnspYearTt.getLong(55);
		getJnspYearTt_uniqHits = getJnspYearTt.getLong(56);
		getJnspYearTt_CNT = getJnspYearTt.getLong(57);
	}

	//ResultSet getJnspYearTt 객체의 필드 값 초기화 함수
	private void setFieldInitFromgetJnspYearTt(){
		getJnspYearTt_AXIS = "";
		getJnspYearTt_countDe = "";
		getJnspYearTt_yy = 0L;
		getJnspYearTt_mm = 0L;
		getJnspYearTt_dd = 0L;
		getJnspYearTt_ww = "";
		getJnspYearTt_hh0 = 0L;
		getJnspYearTt_hh1 = 0L;
		getJnspYearTt_hh2 = 0L;
		getJnspYearTt_hh3 = 0L;
		getJnspYearTt_hh4 = 0L;
		getJnspYearTt_hh5 = 0L;
		getJnspYearTt_hh6 = 0L;
		getJnspYearTt_hh7 = 0L;
		getJnspYearTt_hh8 = 0L;
		getJnspYearTt_hh9 = 0L;
		getJnspYearTt_hh10 = 0L;
		getJnspYearTt_hh11 = 0L;
		getJnspYearTt_hh12 = 0L;
		getJnspYearTt_hh13 = 0L;
		getJnspYearTt_hh14 = 0L;
		getJnspYearTt_hh15 = 0L;
		getJnspYearTt_hh16 = 0L;
		getJnspYearTt_hh17 = 0L;
		getJnspYearTt_hh18 = 0L;
		getJnspYearTt_hh19 = 0L;
		getJnspYearTt_hh20 = 0L;
		getJnspYearTt_hh21 = 0L;
		getJnspYearTt_hh22 = 0L;
		getJnspYearTt_hh23 = 0L;
		getJnspYearTt_uhh0 = 0L;
		getJnspYearTt_uhh1 = 0L;
		getJnspYearTt_uhh2 = 0L;
		getJnspYearTt_uhh3 = 0L;
		getJnspYearTt_uhh4 = 0L;
		getJnspYearTt_uhh5 = 0L;
		getJnspYearTt_uhh6 = 0L;
		getJnspYearTt_uhh7 = 0L;
		getJnspYearTt_uhh8 = 0L;
		getJnspYearTt_uhh9 = 0L;
		getJnspYearTt_uhh10 = 0L;
		getJnspYearTt_uhh11 = 0L;
		getJnspYearTt_uhh12 = 0L;
		getJnspYearTt_uhh13 = 0L;
		getJnspYearTt_uhh14 = 0L;
		getJnspYearTt_uhh15 = 0L;
		getJnspYearTt_uhh16 = 0L;
		getJnspYearTt_uhh17 = 0L;
		getJnspYearTt_uhh18 = 0L;
		getJnspYearTt_uhh19 = 0L;
		getJnspYearTt_uhh20 = 0L;
		getJnspYearTt_uhh21 = 0L;
		getJnspYearTt_uhh22 = 0L;
		getJnspYearTt_uhh23 = 0L;
		getJnspYearTt_hits = 0L;
		getJnspYearTt_uniqHits = 0L;
		getJnspYearTt_CNT = 0L;
	}

	//ResultSet getJnspYearTt 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromgetJnspYearTt() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(getJnspYearTt.getObject(1));
		row.add(getJnspYearTt.getObject(2));
		row.add(getJnspYearTt.getLong(3));
		row.add(getJnspYearTt.getLong(4));
		row.add(getJnspYearTt.getLong(5));
		row.add(getJnspYearTt.getObject(6));
		row.add(getJnspYearTt.getLong(7));
		row.add(getJnspYearTt.getLong(8));
		row.add(getJnspYearTt.getLong(9));
		row.add(getJnspYearTt.getLong(10));
		row.add(getJnspYearTt.getLong(11));
		row.add(getJnspYearTt.getLong(12));
		row.add(getJnspYearTt.getLong(13));
		row.add(getJnspYearTt.getLong(14));
		row.add(getJnspYearTt.getLong(15));
		row.add(getJnspYearTt.getLong(16));
		row.add(getJnspYearTt.getLong(17));
		row.add(getJnspYearTt.getLong(18));
		row.add(getJnspYearTt.getLong(19));
		row.add(getJnspYearTt.getLong(20));
		row.add(getJnspYearTt.getLong(21));
		row.add(getJnspYearTt.getLong(22));
		row.add(getJnspYearTt.getLong(23));
		row.add(getJnspYearTt.getLong(24));
		row.add(getJnspYearTt.getLong(25));
		row.add(getJnspYearTt.getLong(26));
		row.add(getJnspYearTt.getLong(27));
		row.add(getJnspYearTt.getLong(28));
		row.add(getJnspYearTt.getLong(29));
		row.add(getJnspYearTt.getLong(30));
		row.add(getJnspYearTt.getLong(31));
		row.add(getJnspYearTt.getLong(32));
		row.add(getJnspYearTt.getLong(33));
		row.add(getJnspYearTt.getLong(34));
		row.add(getJnspYearTt.getLong(35));
		row.add(getJnspYearTt.getLong(36));
		row.add(getJnspYearTt.getLong(37));
		row.add(getJnspYearTt.getLong(38));
		row.add(getJnspYearTt.getLong(39));
		row.add(getJnspYearTt.getLong(40));
		row.add(getJnspYearTt.getLong(41));
		row.add(getJnspYearTt.getLong(42));
		row.add(getJnspYearTt.getLong(43));
		row.add(getJnspYearTt.getLong(44));
		row.add(getJnspYearTt.getLong(45));
		row.add(getJnspYearTt.getLong(46));
		row.add(getJnspYearTt.getLong(47));
		row.add(getJnspYearTt.getLong(48));
		row.add(getJnspYearTt.getLong(49));
		row.add(getJnspYearTt.getLong(50));
		row.add(getJnspYearTt.getLong(51));
		row.add(getJnspYearTt.getLong(52));
		row.add(getJnspYearTt.getLong(53));
		row.add(getJnspYearTt.getLong(54));
		row.add(getJnspYearTt.getLong(55));
		row.add(getJnspYearTt.getLong(56));
		row.add(getJnspYearTt.getLong(57));

		return row;
	}

	//ResultSet getJnspMon 객체에서 필드 값 설정 함수
	private void setFieldVariableFromgetJnspMon() throws Exception{
		getJnspMon_AXIS = GetB(getJnspMon.getString(1));
		getJnspMon_countDe = GetB(getJnspMon.getString(2));
		getJnspMon_yy = getJnspMon.getLong(3);
		getJnspMon_mm = getJnspMon.getLong(4);
		getJnspMon_dd = getJnspMon.getLong(5);
		getJnspMon_ww = GetB(getJnspMon.getString(6));
		getJnspMon_hh0 = getJnspMon.getLong(7);
		getJnspMon_hh1 = getJnspMon.getLong(8);
		getJnspMon_hh2 = getJnspMon.getLong(9);
		getJnspMon_hh3 = getJnspMon.getLong(10);
		getJnspMon_hh4 = getJnspMon.getLong(11);
		getJnspMon_hh5 = getJnspMon.getLong(12);
		getJnspMon_hh6 = getJnspMon.getLong(13);
		getJnspMon_hh7 = getJnspMon.getLong(14);
		getJnspMon_hh8 = getJnspMon.getLong(15);
		getJnspMon_hh9 = getJnspMon.getLong(16);
		getJnspMon_hh10 = getJnspMon.getLong(17);
		getJnspMon_hh11 = getJnspMon.getLong(18);
		getJnspMon_hh12 = getJnspMon.getLong(19);
		getJnspMon_hh13 = getJnspMon.getLong(20);
		getJnspMon_hh14 = getJnspMon.getLong(21);
		getJnspMon_hh15 = getJnspMon.getLong(22);
		getJnspMon_hh16 = getJnspMon.getLong(23);
		getJnspMon_hh17 = getJnspMon.getLong(24);
		getJnspMon_hh18 = getJnspMon.getLong(25);
		getJnspMon_hh19 = getJnspMon.getLong(26);
		getJnspMon_hh20 = getJnspMon.getLong(27);
		getJnspMon_hh21 = getJnspMon.getLong(28);
		getJnspMon_hh22 = getJnspMon.getLong(29);
		getJnspMon_hh23 = getJnspMon.getLong(30);
		getJnspMon_uhh0 = getJnspMon.getLong(31);
		getJnspMon_uhh1 = getJnspMon.getLong(32);
		getJnspMon_uhh2 = getJnspMon.getLong(33);
		getJnspMon_uhh3 = getJnspMon.getLong(34);
		getJnspMon_uhh4 = getJnspMon.getLong(35);
		getJnspMon_uhh5 = getJnspMon.getLong(36);
		getJnspMon_uhh6 = getJnspMon.getLong(37);
		getJnspMon_uhh7 = getJnspMon.getLong(38);
		getJnspMon_uhh8 = getJnspMon.getLong(39);
		getJnspMon_uhh9 = getJnspMon.getLong(40);
		getJnspMon_uhh10 = getJnspMon.getLong(41);
		getJnspMon_uhh11 = getJnspMon.getLong(42);
		getJnspMon_uhh12 = getJnspMon.getLong(43);
		getJnspMon_uhh13 = getJnspMon.getLong(44);
		getJnspMon_uhh14 = getJnspMon.getLong(45);
		getJnspMon_uhh15 = getJnspMon.getLong(46);
		getJnspMon_uhh16 = getJnspMon.getLong(47);
		getJnspMon_uhh17 = getJnspMon.getLong(48);
		getJnspMon_uhh18 = getJnspMon.getLong(49);
		getJnspMon_uhh19 = getJnspMon.getLong(50);
		getJnspMon_uhh20 = getJnspMon.getLong(51);
		getJnspMon_uhh21 = getJnspMon.getLong(52);
		getJnspMon_uhh22 = getJnspMon.getLong(53);
		getJnspMon_uhh23 = getJnspMon.getLong(54);
		getJnspMon_hits = getJnspMon.getLong(55);
		getJnspMon_uniqHits = getJnspMon.getLong(56);
		getJnspMon_CNT = getJnspMon.getLong(57);
	}

	//ResultSet getJnspMon 객체의 필드 값 초기화 함수
	private void setFieldInitFromgetJnspMon(){
		getJnspMon_AXIS = "";
		getJnspMon_countDe = "";
		getJnspMon_yy = 0L;
		getJnspMon_mm = 0L;
		getJnspMon_dd = 0L;
		getJnspMon_ww = "";
		getJnspMon_hh0 = 0L;
		getJnspMon_hh1 = 0L;
		getJnspMon_hh2 = 0L;
		getJnspMon_hh3 = 0L;
		getJnspMon_hh4 = 0L;
		getJnspMon_hh5 = 0L;
		getJnspMon_hh6 = 0L;
		getJnspMon_hh7 = 0L;
		getJnspMon_hh8 = 0L;
		getJnspMon_hh9 = 0L;
		getJnspMon_hh10 = 0L;
		getJnspMon_hh11 = 0L;
		getJnspMon_hh12 = 0L;
		getJnspMon_hh13 = 0L;
		getJnspMon_hh14 = 0L;
		getJnspMon_hh15 = 0L;
		getJnspMon_hh16 = 0L;
		getJnspMon_hh17 = 0L;
		getJnspMon_hh18 = 0L;
		getJnspMon_hh19 = 0L;
		getJnspMon_hh20 = 0L;
		getJnspMon_hh21 = 0L;
		getJnspMon_hh22 = 0L;
		getJnspMon_hh23 = 0L;
		getJnspMon_uhh0 = 0L;
		getJnspMon_uhh1 = 0L;
		getJnspMon_uhh2 = 0L;
		getJnspMon_uhh3 = 0L;
		getJnspMon_uhh4 = 0L;
		getJnspMon_uhh5 = 0L;
		getJnspMon_uhh6 = 0L;
		getJnspMon_uhh7 = 0L;
		getJnspMon_uhh8 = 0L;
		getJnspMon_uhh9 = 0L;
		getJnspMon_uhh10 = 0L;
		getJnspMon_uhh11 = 0L;
		getJnspMon_uhh12 = 0L;
		getJnspMon_uhh13 = 0L;
		getJnspMon_uhh14 = 0L;
		getJnspMon_uhh15 = 0L;
		getJnspMon_uhh16 = 0L;
		getJnspMon_uhh17 = 0L;
		getJnspMon_uhh18 = 0L;
		getJnspMon_uhh19 = 0L;
		getJnspMon_uhh20 = 0L;
		getJnspMon_uhh21 = 0L;
		getJnspMon_uhh22 = 0L;
		getJnspMon_uhh23 = 0L;
		getJnspMon_hits = 0L;
		getJnspMon_uniqHits = 0L;
		getJnspMon_CNT = 0L;
	}

	//ResultSet getJnspMon 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromgetJnspMon() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(getJnspMon.getObject(1));
		row.add(getJnspMon.getObject(2));
		row.add(getJnspMon.getLong(3));
		row.add(getJnspMon.getLong(4));
		row.add(getJnspMon.getLong(5));
		row.add(getJnspMon.getObject(6));
		row.add(getJnspMon.getLong(7));
		row.add(getJnspMon.getLong(8));
		row.add(getJnspMon.getLong(9));
		row.add(getJnspMon.getLong(10));
		row.add(getJnspMon.getLong(11));
		row.add(getJnspMon.getLong(12));
		row.add(getJnspMon.getLong(13));
		row.add(getJnspMon.getLong(14));
		row.add(getJnspMon.getLong(15));
		row.add(getJnspMon.getLong(16));
		row.add(getJnspMon.getLong(17));
		row.add(getJnspMon.getLong(18));
		row.add(getJnspMon.getLong(19));
		row.add(getJnspMon.getLong(20));
		row.add(getJnspMon.getLong(21));
		row.add(getJnspMon.getLong(22));
		row.add(getJnspMon.getLong(23));
		row.add(getJnspMon.getLong(24));
		row.add(getJnspMon.getLong(25));
		row.add(getJnspMon.getLong(26));
		row.add(getJnspMon.getLong(27));
		row.add(getJnspMon.getLong(28));
		row.add(getJnspMon.getLong(29));
		row.add(getJnspMon.getLong(30));
		row.add(getJnspMon.getLong(31));
		row.add(getJnspMon.getLong(32));
		row.add(getJnspMon.getLong(33));
		row.add(getJnspMon.getLong(34));
		row.add(getJnspMon.getLong(35));
		row.add(getJnspMon.getLong(36));
		row.add(getJnspMon.getLong(37));
		row.add(getJnspMon.getLong(38));
		row.add(getJnspMon.getLong(39));
		row.add(getJnspMon.getLong(40));
		row.add(getJnspMon.getLong(41));
		row.add(getJnspMon.getLong(42));
		row.add(getJnspMon.getLong(43));
		row.add(getJnspMon.getLong(44));
		row.add(getJnspMon.getLong(45));
		row.add(getJnspMon.getLong(46));
		row.add(getJnspMon.getLong(47));
		row.add(getJnspMon.getLong(48));
		row.add(getJnspMon.getLong(49));
		row.add(getJnspMon.getLong(50));
		row.add(getJnspMon.getLong(51));
		row.add(getJnspMon.getLong(52));
		row.add(getJnspMon.getLong(53));
		row.add(getJnspMon.getLong(54));
		row.add(getJnspMon.getLong(55));
		row.add(getJnspMon.getLong(56));
		row.add(getJnspMon.getLong(57));

		return row;
	}

	//ResultSet getJnspMonTt 객체에서 필드 값 설정 함수
	private void setFieldVariableFromgetJnspMonTt() throws Exception{
		getJnspMonTt_AXIS = GetB(getJnspMonTt.getString(1));
		getJnspMonTt_countDe = GetB(getJnspMonTt.getString(2));
		getJnspMonTt_yy = getJnspMonTt.getLong(3);
		getJnspMonTt_mm = getJnspMonTt.getLong(4);
		getJnspMonTt_dd = getJnspMonTt.getLong(5);
		getJnspMonTt_ww = GetB(getJnspMonTt.getString(6));
		getJnspMonTt_hh0 = getJnspMonTt.getLong(7);
		getJnspMonTt_hh1 = getJnspMonTt.getLong(8);
		getJnspMonTt_hh2 = getJnspMonTt.getLong(9);
		getJnspMonTt_hh3 = getJnspMonTt.getLong(10);
		getJnspMonTt_hh4 = getJnspMonTt.getLong(11);
		getJnspMonTt_hh5 = getJnspMonTt.getLong(12);
		getJnspMonTt_hh6 = getJnspMonTt.getLong(13);
		getJnspMonTt_hh7 = getJnspMonTt.getLong(14);
		getJnspMonTt_hh8 = getJnspMonTt.getLong(15);
		getJnspMonTt_hh9 = getJnspMonTt.getLong(16);
		getJnspMonTt_hh10 = getJnspMonTt.getLong(17);
		getJnspMonTt_hh11 = getJnspMonTt.getLong(18);
		getJnspMonTt_hh12 = getJnspMonTt.getLong(19);
		getJnspMonTt_hh13 = getJnspMonTt.getLong(20);
		getJnspMonTt_hh14 = getJnspMonTt.getLong(21);
		getJnspMonTt_hh15 = getJnspMonTt.getLong(22);
		getJnspMonTt_hh16 = getJnspMonTt.getLong(23);
		getJnspMonTt_hh17 = getJnspMonTt.getLong(24);
		getJnspMonTt_hh18 = getJnspMonTt.getLong(25);
		getJnspMonTt_hh19 = getJnspMonTt.getLong(26);
		getJnspMonTt_hh20 = getJnspMonTt.getLong(27);
		getJnspMonTt_hh21 = getJnspMonTt.getLong(28);
		getJnspMonTt_hh22 = getJnspMonTt.getLong(29);
		getJnspMonTt_hh23 = getJnspMonTt.getLong(30);
		getJnspMonTt_uhh0 = getJnspMonTt.getLong(31);
		getJnspMonTt_uhh1 = getJnspMonTt.getLong(32);
		getJnspMonTt_uhh2 = getJnspMonTt.getLong(33);
		getJnspMonTt_uhh3 = getJnspMonTt.getLong(34);
		getJnspMonTt_uhh4 = getJnspMonTt.getLong(35);
		getJnspMonTt_uhh5 = getJnspMonTt.getLong(36);
		getJnspMonTt_uhh6 = getJnspMonTt.getLong(37);
		getJnspMonTt_uhh7 = getJnspMonTt.getLong(38);
		getJnspMonTt_uhh8 = getJnspMonTt.getLong(39);
		getJnspMonTt_uhh9 = getJnspMonTt.getLong(40);
		getJnspMonTt_uhh10 = getJnspMonTt.getLong(41);
		getJnspMonTt_uhh11 = getJnspMonTt.getLong(42);
		getJnspMonTt_uhh12 = getJnspMonTt.getLong(43);
		getJnspMonTt_uhh13 = getJnspMonTt.getLong(44);
		getJnspMonTt_uhh14 = getJnspMonTt.getLong(45);
		getJnspMonTt_uhh15 = getJnspMonTt.getLong(46);
		getJnspMonTt_uhh16 = getJnspMonTt.getLong(47);
		getJnspMonTt_uhh17 = getJnspMonTt.getLong(48);
		getJnspMonTt_uhh18 = getJnspMonTt.getLong(49);
		getJnspMonTt_uhh19 = getJnspMonTt.getLong(50);
		getJnspMonTt_uhh20 = getJnspMonTt.getLong(51);
		getJnspMonTt_uhh21 = getJnspMonTt.getLong(52);
		getJnspMonTt_uhh22 = getJnspMonTt.getLong(53);
		getJnspMonTt_uhh23 = getJnspMonTt.getLong(54);
		getJnspMonTt_hits = getJnspMonTt.getLong(55);
		getJnspMonTt_uniqHits = getJnspMonTt.getLong(56);
		getJnspMonTt_CNT = getJnspMonTt.getLong(57);
	}

	//ResultSet getJnspMonTt 객체의 필드 값 초기화 함수
	private void setFieldInitFromgetJnspMonTt(){
		getJnspMonTt_AXIS = "";
		getJnspMonTt_countDe = "";
		getJnspMonTt_yy = 0L;
		getJnspMonTt_mm = 0L;
		getJnspMonTt_dd = 0L;
		getJnspMonTt_ww = "";
		getJnspMonTt_hh0 = 0L;
		getJnspMonTt_hh1 = 0L;
		getJnspMonTt_hh2 = 0L;
		getJnspMonTt_hh3 = 0L;
		getJnspMonTt_hh4 = 0L;
		getJnspMonTt_hh5 = 0L;
		getJnspMonTt_hh6 = 0L;
		getJnspMonTt_hh7 = 0L;
		getJnspMonTt_hh8 = 0L;
		getJnspMonTt_hh9 = 0L;
		getJnspMonTt_hh10 = 0L;
		getJnspMonTt_hh11 = 0L;
		getJnspMonTt_hh12 = 0L;
		getJnspMonTt_hh13 = 0L;
		getJnspMonTt_hh14 = 0L;
		getJnspMonTt_hh15 = 0L;
		getJnspMonTt_hh16 = 0L;
		getJnspMonTt_hh17 = 0L;
		getJnspMonTt_hh18 = 0L;
		getJnspMonTt_hh19 = 0L;
		getJnspMonTt_hh20 = 0L;
		getJnspMonTt_hh21 = 0L;
		getJnspMonTt_hh22 = 0L;
		getJnspMonTt_hh23 = 0L;
		getJnspMonTt_uhh0 = 0L;
		getJnspMonTt_uhh1 = 0L;
		getJnspMonTt_uhh2 = 0L;
		getJnspMonTt_uhh3 = 0L;
		getJnspMonTt_uhh4 = 0L;
		getJnspMonTt_uhh5 = 0L;
		getJnspMonTt_uhh6 = 0L;
		getJnspMonTt_uhh7 = 0L;
		getJnspMonTt_uhh8 = 0L;
		getJnspMonTt_uhh9 = 0L;
		getJnspMonTt_uhh10 = 0L;
		getJnspMonTt_uhh11 = 0L;
		getJnspMonTt_uhh12 = 0L;
		getJnspMonTt_uhh13 = 0L;
		getJnspMonTt_uhh14 = 0L;
		getJnspMonTt_uhh15 = 0L;
		getJnspMonTt_uhh16 = 0L;
		getJnspMonTt_uhh17 = 0L;
		getJnspMonTt_uhh18 = 0L;
		getJnspMonTt_uhh19 = 0L;
		getJnspMonTt_uhh20 = 0L;
		getJnspMonTt_uhh21 = 0L;
		getJnspMonTt_uhh22 = 0L;
		getJnspMonTt_uhh23 = 0L;
		getJnspMonTt_hits = 0L;
		getJnspMonTt_uniqHits = 0L;
		getJnspMonTt_CNT = 0L;
	}

	//ResultSet getJnspMonTt 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromgetJnspMonTt() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(getJnspMonTt.getObject(1));
		row.add(getJnspMonTt.getObject(2));
		row.add(getJnspMonTt.getLong(3));
		row.add(getJnspMonTt.getLong(4));
		row.add(getJnspMonTt.getLong(5));
		row.add(getJnspMonTt.getObject(6));
		row.add(getJnspMonTt.getLong(7));
		row.add(getJnspMonTt.getLong(8));
		row.add(getJnspMonTt.getLong(9));
		row.add(getJnspMonTt.getLong(10));
		row.add(getJnspMonTt.getLong(11));
		row.add(getJnspMonTt.getLong(12));
		row.add(getJnspMonTt.getLong(13));
		row.add(getJnspMonTt.getLong(14));
		row.add(getJnspMonTt.getLong(15));
		row.add(getJnspMonTt.getLong(16));
		row.add(getJnspMonTt.getLong(17));
		row.add(getJnspMonTt.getLong(18));
		row.add(getJnspMonTt.getLong(19));
		row.add(getJnspMonTt.getLong(20));
		row.add(getJnspMonTt.getLong(21));
		row.add(getJnspMonTt.getLong(22));
		row.add(getJnspMonTt.getLong(23));
		row.add(getJnspMonTt.getLong(24));
		row.add(getJnspMonTt.getLong(25));
		row.add(getJnspMonTt.getLong(26));
		row.add(getJnspMonTt.getLong(27));
		row.add(getJnspMonTt.getLong(28));
		row.add(getJnspMonTt.getLong(29));
		row.add(getJnspMonTt.getLong(30));
		row.add(getJnspMonTt.getLong(31));
		row.add(getJnspMonTt.getLong(32));
		row.add(getJnspMonTt.getLong(33));
		row.add(getJnspMonTt.getLong(34));
		row.add(getJnspMonTt.getLong(35));
		row.add(getJnspMonTt.getLong(36));
		row.add(getJnspMonTt.getLong(37));
		row.add(getJnspMonTt.getLong(38));
		row.add(getJnspMonTt.getLong(39));
		row.add(getJnspMonTt.getLong(40));
		row.add(getJnspMonTt.getLong(41));
		row.add(getJnspMonTt.getLong(42));
		row.add(getJnspMonTt.getLong(43));
		row.add(getJnspMonTt.getLong(44));
		row.add(getJnspMonTt.getLong(45));
		row.add(getJnspMonTt.getLong(46));
		row.add(getJnspMonTt.getLong(47));
		row.add(getJnspMonTt.getLong(48));
		row.add(getJnspMonTt.getLong(49));
		row.add(getJnspMonTt.getLong(50));
		row.add(getJnspMonTt.getLong(51));
		row.add(getJnspMonTt.getLong(52));
		row.add(getJnspMonTt.getLong(53));
		row.add(getJnspMonTt.getLong(54));
		row.add(getJnspMonTt.getLong(55));
		row.add(getJnspMonTt.getLong(56));
		row.add(getJnspMonTt.getLong(57));

		return row;
	}

	//ResultSet getJnspMonTb 객체에서 필드 값 설정 함수
	private void setFieldVariableFromgetJnspMonTb() throws Exception{
		getJnspMonTb_AXIS = GetB(getJnspMonTb.getString(1));
		getJnspMonTb_countDe = GetB(getJnspMonTb.getString(2));
		getJnspMonTb_yy = getJnspMonTb.getLong(3);
		getJnspMonTb_mm = getJnspMonTb.getLong(4);
		getJnspMonTb_dd = getJnspMonTb.getLong(5);
		getJnspMonTb_ww = GetB(getJnspMonTb.getString(6));
		getJnspMonTb_hh0 = getJnspMonTb.getLong(7);
		getJnspMonTb_hh1 = getJnspMonTb.getLong(8);
		getJnspMonTb_hh2 = getJnspMonTb.getLong(9);
		getJnspMonTb_hh3 = getJnspMonTb.getLong(10);
		getJnspMonTb_hh4 = getJnspMonTb.getLong(11);
		getJnspMonTb_hh5 = getJnspMonTb.getLong(12);
		getJnspMonTb_hh6 = getJnspMonTb.getLong(13);
		getJnspMonTb_hh7 = getJnspMonTb.getLong(14);
		getJnspMonTb_hh8 = getJnspMonTb.getLong(15);
		getJnspMonTb_hh9 = getJnspMonTb.getLong(16);
		getJnspMonTb_hh10 = getJnspMonTb.getLong(17);
		getJnspMonTb_hh11 = getJnspMonTb.getLong(18);
		getJnspMonTb_hh12 = getJnspMonTb.getLong(19);
		getJnspMonTb_hh13 = getJnspMonTb.getLong(20);
		getJnspMonTb_hh14 = getJnspMonTb.getLong(21);
		getJnspMonTb_hh15 = getJnspMonTb.getLong(22);
		getJnspMonTb_hh16 = getJnspMonTb.getLong(23);
		getJnspMonTb_hh17 = getJnspMonTb.getLong(24);
		getJnspMonTb_hh18 = getJnspMonTb.getLong(25);
		getJnspMonTb_hh19 = getJnspMonTb.getLong(26);
		getJnspMonTb_hh20 = getJnspMonTb.getLong(27);
		getJnspMonTb_hh21 = getJnspMonTb.getLong(28);
		getJnspMonTb_hh22 = getJnspMonTb.getLong(29);
		getJnspMonTb_hh23 = getJnspMonTb.getLong(30);
		getJnspMonTb_uhh0 = getJnspMonTb.getLong(31);
		getJnspMonTb_uhh1 = getJnspMonTb.getLong(32);
		getJnspMonTb_uhh2 = getJnspMonTb.getLong(33);
		getJnspMonTb_uhh3 = getJnspMonTb.getLong(34);
		getJnspMonTb_uhh4 = getJnspMonTb.getLong(35);
		getJnspMonTb_uhh5 = getJnspMonTb.getLong(36);
		getJnspMonTb_uhh6 = getJnspMonTb.getLong(37);
		getJnspMonTb_uhh7 = getJnspMonTb.getLong(38);
		getJnspMonTb_uhh8 = getJnspMonTb.getLong(39);
		getJnspMonTb_uhh9 = getJnspMonTb.getLong(40);
		getJnspMonTb_uhh10 = getJnspMonTb.getLong(41);
		getJnspMonTb_uhh11 = getJnspMonTb.getLong(42);
		getJnspMonTb_uhh12 = getJnspMonTb.getLong(43);
		getJnspMonTb_uhh13 = getJnspMonTb.getLong(44);
		getJnspMonTb_uhh14 = getJnspMonTb.getLong(45);
		getJnspMonTb_uhh15 = getJnspMonTb.getLong(46);
		getJnspMonTb_uhh16 = getJnspMonTb.getLong(47);
		getJnspMonTb_uhh17 = getJnspMonTb.getLong(48);
		getJnspMonTb_uhh18 = getJnspMonTb.getLong(49);
		getJnspMonTb_uhh19 = getJnspMonTb.getLong(50);
		getJnspMonTb_uhh20 = getJnspMonTb.getLong(51);
		getJnspMonTb_uhh21 = getJnspMonTb.getLong(52);
		getJnspMonTb_uhh22 = getJnspMonTb.getLong(53);
		getJnspMonTb_uhh23 = getJnspMonTb.getLong(54);
		getJnspMonTb_hits = getJnspMonTb.getLong(55);
		getJnspMonTb_uniqHits = getJnspMonTb.getLong(56);
		getJnspMonTb_CNT = getJnspMonTb.getLong(57);
	}

	//ResultSet getJnspMonTb 객체의 필드 값 초기화 함수
	private void setFieldInitFromgetJnspMonTb(){
		getJnspMonTb_AXIS = "";
		getJnspMonTb_countDe = "";
		getJnspMonTb_yy = 0L;
		getJnspMonTb_mm = 0L;
		getJnspMonTb_dd = 0L;
		getJnspMonTb_ww = "";
		getJnspMonTb_hh0 = 0L;
		getJnspMonTb_hh1 = 0L;
		getJnspMonTb_hh2 = 0L;
		getJnspMonTb_hh3 = 0L;
		getJnspMonTb_hh4 = 0L;
		getJnspMonTb_hh5 = 0L;
		getJnspMonTb_hh6 = 0L;
		getJnspMonTb_hh7 = 0L;
		getJnspMonTb_hh8 = 0L;
		getJnspMonTb_hh9 = 0L;
		getJnspMonTb_hh10 = 0L;
		getJnspMonTb_hh11 = 0L;
		getJnspMonTb_hh12 = 0L;
		getJnspMonTb_hh13 = 0L;
		getJnspMonTb_hh14 = 0L;
		getJnspMonTb_hh15 = 0L;
		getJnspMonTb_hh16 = 0L;
		getJnspMonTb_hh17 = 0L;
		getJnspMonTb_hh18 = 0L;
		getJnspMonTb_hh19 = 0L;
		getJnspMonTb_hh20 = 0L;
		getJnspMonTb_hh21 = 0L;
		getJnspMonTb_hh22 = 0L;
		getJnspMonTb_hh23 = 0L;
		getJnspMonTb_uhh0 = 0L;
		getJnspMonTb_uhh1 = 0L;
		getJnspMonTb_uhh2 = 0L;
		getJnspMonTb_uhh3 = 0L;
		getJnspMonTb_uhh4 = 0L;
		getJnspMonTb_uhh5 = 0L;
		getJnspMonTb_uhh6 = 0L;
		getJnspMonTb_uhh7 = 0L;
		getJnspMonTb_uhh8 = 0L;
		getJnspMonTb_uhh9 = 0L;
		getJnspMonTb_uhh10 = 0L;
		getJnspMonTb_uhh11 = 0L;
		getJnspMonTb_uhh12 = 0L;
		getJnspMonTb_uhh13 = 0L;
		getJnspMonTb_uhh14 = 0L;
		getJnspMonTb_uhh15 = 0L;
		getJnspMonTb_uhh16 = 0L;
		getJnspMonTb_uhh17 = 0L;
		getJnspMonTb_uhh18 = 0L;
		getJnspMonTb_uhh19 = 0L;
		getJnspMonTb_uhh20 = 0L;
		getJnspMonTb_uhh21 = 0L;
		getJnspMonTb_uhh22 = 0L;
		getJnspMonTb_uhh23 = 0L;
		getJnspMonTb_hits = 0L;
		getJnspMonTb_uniqHits = 0L;
		getJnspMonTb_CNT = 0L;
	}

	//ResultSet getJnspMonTb 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromgetJnspMonTb() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(getJnspMonTb.getObject(1));
		row.add(getJnspMonTb.getObject(2));
		row.add(getJnspMonTb.getLong(3));
		row.add(getJnspMonTb.getLong(4));
		row.add(getJnspMonTb.getLong(5));
		row.add(getJnspMonTb.getObject(6));
		row.add(getJnspMonTb.getLong(7));
		row.add(getJnspMonTb.getLong(8));
		row.add(getJnspMonTb.getLong(9));
		row.add(getJnspMonTb.getLong(10));
		row.add(getJnspMonTb.getLong(11));
		row.add(getJnspMonTb.getLong(12));
		row.add(getJnspMonTb.getLong(13));
		row.add(getJnspMonTb.getLong(14));
		row.add(getJnspMonTb.getLong(15));
		row.add(getJnspMonTb.getLong(16));
		row.add(getJnspMonTb.getLong(17));
		row.add(getJnspMonTb.getLong(18));
		row.add(getJnspMonTb.getLong(19));
		row.add(getJnspMonTb.getLong(20));
		row.add(getJnspMonTb.getLong(21));
		row.add(getJnspMonTb.getLong(22));
		row.add(getJnspMonTb.getLong(23));
		row.add(getJnspMonTb.getLong(24));
		row.add(getJnspMonTb.getLong(25));
		row.add(getJnspMonTb.getLong(26));
		row.add(getJnspMonTb.getLong(27));
		row.add(getJnspMonTb.getLong(28));
		row.add(getJnspMonTb.getLong(29));
		row.add(getJnspMonTb.getLong(30));
		row.add(getJnspMonTb.getLong(31));
		row.add(getJnspMonTb.getLong(32));
		row.add(getJnspMonTb.getLong(33));
		row.add(getJnspMonTb.getLong(34));
		row.add(getJnspMonTb.getLong(35));
		row.add(getJnspMonTb.getLong(36));
		row.add(getJnspMonTb.getLong(37));
		row.add(getJnspMonTb.getLong(38));
		row.add(getJnspMonTb.getLong(39));
		row.add(getJnspMonTb.getLong(40));
		row.add(getJnspMonTb.getLong(41));
		row.add(getJnspMonTb.getLong(42));
		row.add(getJnspMonTb.getLong(43));
		row.add(getJnspMonTb.getLong(44));
		row.add(getJnspMonTb.getLong(45));
		row.add(getJnspMonTb.getLong(46));
		row.add(getJnspMonTb.getLong(47));
		row.add(getJnspMonTb.getLong(48));
		row.add(getJnspMonTb.getLong(49));
		row.add(getJnspMonTb.getLong(50));
		row.add(getJnspMonTb.getLong(51));
		row.add(getJnspMonTb.getLong(52));
		row.add(getJnspMonTb.getLong(53));
		row.add(getJnspMonTb.getLong(54));
		row.add(getJnspMonTb.getLong(55));
		row.add(getJnspMonTb.getLong(56));
		row.add(getJnspMonTb.getLong(57));

		return row;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//----AI_CHART_OBJ32 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ32( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet getJnspMon 객체의 생성
		if(getJnspMon==null){
			getJnspMon = stat_getJnspMon.executeQuery();
		}else{
			getJnspMon.beforeFirst();
		}
		if(!getJnspMon.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ32="\t";
		AI_CHART_OBJ32=AI_CHART_OBJ32 + "CNT\r\n";

		while(getJnspMon.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromgetJnspMon();   //RecordSet getJnspMon에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ32=AI_CHART_OBJ32 + getJnspMon_AXIS + "\t";

			//데이터 설정
			AI_CHART_OBJ32=AI_CHART_OBJ32 + getJnspMon_CNT + "\r\n";
		}   //while end
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|0|Temporary.style|통계", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 24, 20, "cell_style_0");
		setCellInfoMap_Internal("sheet10_A2", 0, 0, 256, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_J2", 256, 0, 29, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_K2", 285, 0, 29, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_L2", 314, 0, 29, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_M2", 343, 0, 29, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_N2", 372, 0, 29, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_O2", 401, 0, 29, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_P2", 430, 0, 29, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_Q2", 459, 0, 28, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet10_R2", 487, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_S2", 515, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_T2", 543, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_U2", 571, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_V2", 599, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_W2", 627, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_X2", 655, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_Y2", 683, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_B20", 24, 372, 348, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_N20", 372, 372, 339, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet10_B21", 24, 0, 348, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet10_N21", 372, 0, 339, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B22", 24, 0, 29, 20, "cell_style_8");
	}

	private ResultSet acquireResultSet(CallableStatement cstmt, int cursorIdx) throws SQLException {
		if (cstmt.execute()) {
			if (cursorIdx == -1) {
				return (cstmt.getResultSet());
			} else {
				return ((ResultSet) cstmt.getObject(cursorIdx));
			}
		} else {
			int count;
			if ((count = cstmt.getUpdateCount()) == -1) {
				if (cursorIdx == -1) {
					throw (new UnsupportedOperationException("None result"));
				} else {
					return ((ResultSet) cstmt.getObject(cursorIdx));
				}
			}
			while (true) {
				if (cstmt.getMoreResults()) {
					if (cursorIdx == -1) {
						return (cstmt.getResultSet());
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				} else if ((count = cstmt.getUpdateCount()) == -1) {
					if (cursorIdx == -1) {
						throw (new UnsupportedOperationException("None result-2"));
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				}
			}
		}
	}
}
%>
