<%
/************************************************************************************
Generated by AIDesigner 5.6.0.3
************************************************************************************
보고서 제목 : 통계
작성일 : 2016년4월22일 10시42분9초
수정일 : 2016년6월15일 17시52분15초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_ff
	StringBuilder sql_ff = new StringBuilder();
	sql_ff.setLength(0);
	sql_ff.append("SELECT ");
	sql_ff.append("	A.USER_IDX, ");
	sql_ff.append("	A.KOR_NM, ");
	sql_ff.append("	A.RND_MAIN_ORG, ");
	sql_ff.append("	A.LOCATION_DTL, ");
	sql_ff.append("	SUM(A.TAKE_PRC) AS SM, ");
	sql_ff.append("	( ");
	sql_ff.append("	SELECT ");
	sql_ff.append("		COUNT(0) ");
	sql_ff.append("	FROM TB_USER_COPY ");
	sql_ff.append("	WHERE TB_USER_COPY.DEPT_NM = A.LOCATION_DTL ");
	sql_ff.append("	AND TB_USER_COPY.ORG_GRP_CD = C.ORG_GRP_CD ");
	sql_ff.append("	) AS USER_CNT, ");
	sql_ff.append("	( ");
	sql_ff.append("	SELECT ");
	sql_ff.append("		COUNT(0) ");
	sql_ff.append(" ");
	sql_ff.append("	FROM TB_EQU_INFO AS AA ");
	sql_ff.append("	INNER JOIN TB_USER_COPY AS BB ");
	sql_ff.append("	ON AA.USER_IDX = BB.USER_IDX ");
	sql_ff.append("	INNER JOIN TB_ORG_GRP AS CC ");
	sql_ff.append("	ON AA.RND_MAIN_ORG = CC.ORG_GRP_NM ");
	sql_ff.append("	WHERE BB.DEPT_NM = A.LOCATION_DTL ");
	sql_ff.append("	AND BB.ORG_GRP_CD = C.ORG_GRP_CD ");
	sql_ff.append("	AND AA.EQUIP_CD = '1' ");
	sql_ff.append("	AND CC.AREA_CD = '1' ");
	sql_ff.append("	AND CC.ORG_TYPE = '2' ");
	sql_ff.append("	AND AA.USE_SCOPE_CD = '2' ");
	sql_ff.append("	) AS SCOPE_CNT, ");
	sql_ff.append("	( ");
	sql_ff.append("	SELECT ");
	sql_ff.append("		COUNT(0) ");
	sql_ff.append("	FROM TB_EQU_INFO ");
	sql_ff.append("	WHERE TB_EQU_INFO.RND_MAIN_ORG = C.ORG_GRP_NM ");
	sql_ff.append("	) AS EQ_CNT ");
	sql_ff.append("FROM TB_EQU_INFO AS A ");
	sql_ff.append("INNER JOIN TB_USER_COPY AS B ");
	sql_ff.append("ON A.USER_IDX = B.USER_IDX ");
	sql_ff.append("INNER JOIN TB_ORG_GRP AS C ");
	sql_ff.append("ON A.RND_MAIN_ORG = C.ORG_GRP_NM ");
	sql_ff.append("WHERE B.USER_IDX = '^userIdx^' ");
	sql_ff.append("AND A.EQUIP_CD = '1' ");
	sql_ff.append("AND C.AREA_CD = '1' ");
	sql_ff.append("AND C.ORG_TYPE = '2' ");
	sql_ff.append("GROUP BY A.LOCATION_DTL ");
	sql_ff.append("limit 10; ");
	initializer.prepareQuery("sql_ff", sql_ff.toString());

	//sql_a2
	StringBuilder sql_a2 = new StringBuilder();
	sql_a2.setLength(0);
	sql_a2.append("SELECT ");
	sql_a2.append("				A.IDX, ");
	sql_a2.append("				A.ORG_NM AS AREA, ");
	sql_a2.append("				COUNT(0) AS CNT ");
	sql_a2.append("			FROM( ");
	sql_a2.append("				SELECT ");
	sql_a2.append("					'1' AS IDX , ");
	sql_a2.append("					INTRL_APLC_NO AS APLC_NO, ");
	sql_a2.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a2.append("				FROM TB_SEARCH_BRAND ");
	sql_a2.append("				UNION ALL ");
	sql_a2.append("				SELECT ");
	sql_a2.append("					'2' AS IDX , ");
	sql_a2.append("					APLC_NO AS APLC_NO, ");
	sql_a2.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a2.append("				FROM TB_SEARCH_DESIGN ");
	sql_a2.append("				UNION ALL ");
	sql_a2.append("				SELECT ");
	sql_a2.append("					'3' AS IDX , ");
	sql_a2.append("					KNOW_HOW_NO AS APLC_NO, ");
	sql_a2.append("					ORG_NM AS ORG_NM ");
	sql_a2.append("				FROM TB_SEARCH_KNOW_HOW ");
	sql_a2.append("				UNION ALL ");
	sql_a2.append("				SELECT ");
	sql_a2.append("					'4' AS IDX , ");
	sql_a2.append("					APLC_NO AS APLC_NO, ");
	sql_a2.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a2.append("				FROM TB_SEARCH_PATENT_UTILITY_MODEL ");
	sql_a2.append("				UNION ALL ");
	sql_a2.append("				SELECT ");
	sql_a2.append("					'5' AS IDX , ");
	sql_a2.append("					REG_NO AS APLC_NO, ");
	sql_a2.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a2.append("				FROM TB_SEARCH_PROGRAM ");
	sql_a2.append("			) AS A ");
	sql_a2.append("			INNER JOIN TB_ORG_GRP AS B ");
	sql_a2.append("			ON A.ORG_NM = B.ORG_GRP_NM ");
	sql_a2.append("			WHERE 1 = 1 ");
	sql_a2.append("AND A.IDX = '2' ");
	sql_a2.append("GROUP BY A.ORG_NM ");
	sql_a2.append("LIMIT 10 ");
	initializer.prepareQuery("sql_a2", sql_a2.toString());

	//sql_a1
	StringBuilder sql_a1 = new StringBuilder();
	sql_a1.setLength(0);
	sql_a1.append("SELECT ");
	sql_a1.append("				A.IDX, ");
	sql_a1.append("				A.ORG_NM AS AREA, ");
	sql_a1.append("				COUNT(0) AS CNT ");
	sql_a1.append("			FROM( ");
	sql_a1.append("				SELECT ");
	sql_a1.append("					'1' AS IDX , ");
	sql_a1.append("					INTRL_APLC_NO AS APLC_NO, ");
	sql_a1.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a1.append("				FROM TB_SEARCH_BRAND ");
	sql_a1.append("				UNION ALL ");
	sql_a1.append("				SELECT ");
	sql_a1.append("					'2' AS IDX , ");
	sql_a1.append("					APLC_NO AS APLC_NO, ");
	sql_a1.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a1.append("				FROM TB_SEARCH_DESIGN ");
	sql_a1.append("				UNION ALL ");
	sql_a1.append("				SELECT ");
	sql_a1.append("					'3' AS IDX , ");
	sql_a1.append("					KNOW_HOW_NO AS APLC_NO, ");
	sql_a1.append("					ORG_NM AS ORG_NM ");
	sql_a1.append("				FROM TB_SEARCH_KNOW_HOW ");
	sql_a1.append("				UNION ALL ");
	sql_a1.append("				SELECT ");
	sql_a1.append("					'4' AS IDX , ");
	sql_a1.append("					APLC_NO AS APLC_NO, ");
	sql_a1.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a1.append("				FROM TB_SEARCH_PATENT_UTILITY_MODEL ");
	sql_a1.append("				UNION ALL ");
	sql_a1.append("				SELECT ");
	sql_a1.append("					'5' AS IDX , ");
	sql_a1.append("					REG_NO AS APLC_NO, ");
	sql_a1.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a1.append("				FROM TB_SEARCH_PROGRAM ");
	sql_a1.append("			) AS A ");
	sql_a1.append("			INNER JOIN TB_ORG_GRP AS B ");
	sql_a1.append("			ON A.ORG_NM = B.ORG_GRP_NM ");
	sql_a1.append("			WHERE 1 = 1 ");
	sql_a1.append("AND A.IDX = '1' ");
	sql_a1.append("GROUP BY A.ORG_NM ");
	sql_a1.append("LIMIT 10 ");
	initializer.prepareQuery("sql_a1", sql_a1.toString());

	//sql_a5
	StringBuilder sql_a5 = new StringBuilder();
	sql_a5.setLength(0);
	sql_a5.append("SELECT ");
	sql_a5.append("				A.IDX, ");
	sql_a5.append("				A.ORG_NM AS AREA, ");
	sql_a5.append("				COUNT(0) AS CNT ");
	sql_a5.append("			FROM( ");
	sql_a5.append("				SELECT ");
	sql_a5.append("					'1' AS IDX , ");
	sql_a5.append("					INTRL_APLC_NO AS APLC_NO, ");
	sql_a5.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a5.append("				FROM TB_SEARCH_BRAND ");
	sql_a5.append("				UNION ALL ");
	sql_a5.append("				SELECT ");
	sql_a5.append("					'2' AS IDX , ");
	sql_a5.append("					APLC_NO AS APLC_NO, ");
	sql_a5.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a5.append("				FROM TB_SEARCH_DESIGN ");
	sql_a5.append("				UNION ALL ");
	sql_a5.append("				SELECT ");
	sql_a5.append("					'3' AS IDX , ");
	sql_a5.append("					KNOW_HOW_NO AS APLC_NO, ");
	sql_a5.append("					ORG_NM AS ORG_NM ");
	sql_a5.append("				FROM TB_SEARCH_KNOW_HOW ");
	sql_a5.append("				UNION ALL ");
	sql_a5.append("				SELECT ");
	sql_a5.append("					'4' AS IDX , ");
	sql_a5.append("					APLC_NO AS APLC_NO, ");
	sql_a5.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a5.append("				FROM TB_SEARCH_PATENT_UTILITY_MODEL ");
	sql_a5.append("				UNION ALL ");
	sql_a5.append("				SELECT ");
	sql_a5.append("					'5' AS IDX , ");
	sql_a5.append("					REG_NO AS APLC_NO, ");
	sql_a5.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a5.append("				FROM TB_SEARCH_PROGRAM ");
	sql_a5.append("			) AS A ");
	sql_a5.append("			INNER JOIN TB_ORG_GRP AS B ");
	sql_a5.append("			ON A.ORG_NM = B.ORG_GRP_NM ");
	sql_a5.append("			WHERE 1 = 1 ");
	sql_a5.append("AND A.IDX = '5' ");
	sql_a5.append("GROUP BY A.ORG_NM ");
	sql_a5.append("LIMIT 10 ");
	initializer.prepareQuery("sql_a5", sql_a5.toString());

	//sql_a3
	StringBuilder sql_a3 = new StringBuilder();
	sql_a3.setLength(0);
	sql_a3.append("SELECT ");
	sql_a3.append("				A.IDX, ");
	sql_a3.append("				A.ORG_NM AS AREA, ");
	sql_a3.append("				COUNT(0) AS CNT ");
	sql_a3.append("			FROM( ");
	sql_a3.append("				SELECT ");
	sql_a3.append("					'1' AS IDX , ");
	sql_a3.append("					INTRL_APLC_NO AS APLC_NO, ");
	sql_a3.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a3.append("				FROM TB_SEARCH_BRAND ");
	sql_a3.append("				UNION ALL ");
	sql_a3.append("				SELECT ");
	sql_a3.append("					'2' AS IDX , ");
	sql_a3.append("					APLC_NO AS APLC_NO, ");
	sql_a3.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a3.append("				FROM TB_SEARCH_DESIGN ");
	sql_a3.append("				UNION ALL ");
	sql_a3.append("				SELECT ");
	sql_a3.append("					'3' AS IDX , ");
	sql_a3.append("					KNOW_HOW_NO AS APLC_NO, ");
	sql_a3.append("					ORG_NM AS ORG_NM ");
	sql_a3.append("				FROM TB_SEARCH_KNOW_HOW ");
	sql_a3.append("				UNION ALL ");
	sql_a3.append("				SELECT ");
	sql_a3.append("					'4' AS IDX , ");
	sql_a3.append("					APLC_NO AS APLC_NO, ");
	sql_a3.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a3.append("				FROM TB_SEARCH_PATENT_UTILITY_MODEL ");
	sql_a3.append("				UNION ALL ");
	sql_a3.append("				SELECT ");
	sql_a3.append("					'5' AS IDX , ");
	sql_a3.append("					REG_NO AS APLC_NO, ");
	sql_a3.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a3.append("				FROM TB_SEARCH_PROGRAM ");
	sql_a3.append("			) AS A ");
	sql_a3.append("			INNER JOIN TB_ORG_GRP AS B ");
	sql_a3.append("			ON A.ORG_NM = B.ORG_GRP_NM ");
	sql_a3.append("			WHERE 1 = 1 ");
	sql_a3.append("AND A.IDX = '3' ");
	sql_a3.append("GROUP BY A.ORG_NM ");
	sql_a3.append("LIMIT 10 ");
	initializer.prepareQuery("sql_a3", sql_a3.toString());

	//sql_a4
	StringBuilder sql_a4 = new StringBuilder();
	sql_a4.setLength(0);
	sql_a4.append("SELECT ");
	sql_a4.append("				A.IDX, ");
	sql_a4.append("				A.ORG_NM AS AREA, ");
	sql_a4.append("				COUNT(0) AS CNT ");
	sql_a4.append("			FROM( ");
	sql_a4.append("				SELECT ");
	sql_a4.append("					'1' AS IDX , ");
	sql_a4.append("					INTRL_APLC_NO AS APLC_NO, ");
	sql_a4.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a4.append("				FROM TB_SEARCH_BRAND ");
	sql_a4.append("				UNION ALL ");
	sql_a4.append("				SELECT ");
	sql_a4.append("					'2' AS IDX , ");
	sql_a4.append("					APLC_NO AS APLC_NO, ");
	sql_a4.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a4.append("				FROM TB_SEARCH_DESIGN ");
	sql_a4.append("				UNION ALL ");
	sql_a4.append("				SELECT ");
	sql_a4.append("					'3' AS IDX , ");
	sql_a4.append("					KNOW_HOW_NO AS APLC_NO, ");
	sql_a4.append("					ORG_NM AS ORG_NM ");
	sql_a4.append("				FROM TB_SEARCH_KNOW_HOW ");
	sql_a4.append("				UNION ALL ");
	sql_a4.append("				SELECT ");
	sql_a4.append("					'4' AS IDX , ");
	sql_a4.append("					APLC_NO AS APLC_NO, ");
	sql_a4.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a4.append("				FROM TB_SEARCH_PATENT_UTILITY_MODEL ");
	sql_a4.append("				UNION ALL ");
	sql_a4.append("				SELECT ");
	sql_a4.append("					'5' AS IDX , ");
	sql_a4.append("					REG_NO AS APLC_NO, ");
	sql_a4.append("					OWN_ORG_NM AS ORG_NM ");
	sql_a4.append("				FROM TB_SEARCH_PROGRAM ");
	sql_a4.append("			) AS A ");
	sql_a4.append("			INNER JOIN TB_ORG_GRP AS B ");
	sql_a4.append("			ON A.ORG_NM = B.ORG_GRP_NM ");
	sql_a4.append("			WHERE 1 = 1 ");
	sql_a4.append("AND A.IDX = '4' ");
	sql_a4.append("GROUP BY A.ORG_NM ");
	sql_a4.append("LIMIT 10 ");
	initializer.prepareQuery("sql_a4", sql_a4.toString());

	//sql_jip1
	StringBuilder sql_jip1 = new StringBuilder();
	sql_jip1.setLength(0);
	sql_jip1.append("SELECT ");
	sql_jip1.append("	A.IDX, ");
	sql_jip1.append("	A.ORG_NM AS AREA, ");
	sql_jip1.append("	A.DEPT_NM , ");
	sql_jip1.append("	B.ORG_GRP_NM, ");
	sql_jip1.append("	( ");
	sql_jip1.append("	SELECT ");
	sql_jip1.append("	COUNT(0) ");
	sql_jip1.append("	FROM TB_USER_COPY ");
	sql_jip1.append("	WHERE A.DEPT_NM = TB_USER_COPY.DEPT_NM ");
	sql_jip1.append("	) AS USER_CNT, ");
	sql_jip1.append("	COUNT(0) AS CNT ");
	sql_jip1.append("FROM( ");
	sql_jip1.append("	SELECT ");
	sql_jip1.append("		'1' AS IDX , ");
	sql_jip1.append("		INTRL_APLC_NO AS APLC_NO, ");
	sql_jip1.append("		OWN_ORG_NM AS ORG_NM, ");
	sql_jip1.append("		OWN_DEPT_NM AS DEPT_NM ");
	sql_jip1.append("	FROM TB_SEARCH_BRAND ");
	sql_jip1.append("	UNION ALL ");
	sql_jip1.append("	SELECT ");
	sql_jip1.append("		'2' AS IDX , ");
	sql_jip1.append("		APLC_NO AS APLC_NO, ");
	sql_jip1.append("		OWN_ORG_NM AS ORG_NM, ");
	sql_jip1.append("		OWN_DEPT_NM AS DEPT_NM ");
	sql_jip1.append("	FROM TB_SEARCH_DESIGN ");
	sql_jip1.append("	UNION ALL ");
	sql_jip1.append("	SELECT ");
	sql_jip1.append("		'3' AS IDX , ");
	sql_jip1.append("		KNOW_HOW_NO AS APLC_NO, ");
	sql_jip1.append("		ORG_NM AS ORG_NM, ");
	sql_jip1.append("		DEPT_NM AS DEPT_NM ");
	sql_jip1.append("	FROM TB_SEARCH_KNOW_HOW ");
	sql_jip1.append("	UNION ALL ");
	sql_jip1.append("	SELECT ");
	sql_jip1.append("		'4' AS IDX , ");
	sql_jip1.append("		APLC_NO AS APLC_NO, ");
	sql_jip1.append("		OWN_ORG_NM AS ORG_NM, ");
	sql_jip1.append("		OWN_DEPT_NM AS DEPT_NM ");
	sql_jip1.append("	FROM TB_SEARCH_PATENT_UTILITY_MODEL ");
	sql_jip1.append("	UNION ALL ");
	sql_jip1.append("	SELECT ");
	sql_jip1.append("		'5' AS IDX , ");
	sql_jip1.append("		REG_NO AS APLC_NO, ");
	sql_jip1.append("		OWN_ORG_NM AS ORG_NM, ");
	sql_jip1.append("		OWN_DEPT_NM AS DEPT_NM ");
	sql_jip1.append("	FROM TB_SEARCH_PROGRAM ");
	sql_jip1.append(") AS A ");
	sql_jip1.append("INNER JOIN TB_ORG_GRP AS B ");
	sql_jip1.append("ON A.ORG_NM = B.ORG_GRP_NM ");
	sql_jip1.append("WHERE 1 = 1 ");
	sql_jip1.append("AND B.ORG_GRP_CD = '^orgcd^' ");
	sql_jip1.append("GROUP BY A.ORG_NM ");
	sql_jip1.append("LIMIT 10; ");
	initializer.prepareQuery("sql_jip1", sql_jip1.toString());

	//sql_test
	StringBuilder sql_test = new StringBuilder();
	sql_test.setLength(0);
	sql_test.append("SELECT '하하' AS A FROM TB_USER_COPY ");
	initializer.prepareQuery("sql_test", sql_test.toString());
}

private Logger logger = Logger.getLogger("com.activeintra");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_A1 = "";
	String AI_CHART_OBJ41;
	String sheet10_B21 = "";
	String sheet10_K21 = "";
	String sheet10_S21 = "";
	String sheet10_B22 = "";
	long sheet10_K22 = 0L;
	long sheet10_S22 = 0L;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_jnsp; 	 //jnsp Connection 객체
	private java.sql.PreparedStatement stat_ff;		//ResultSet ff 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet ff;		//ResultSet ff 객체
	private java.sql.PreparedStatement stat_a2;		//ResultSet a2 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet a2;		//ResultSet a2 객체
	private java.sql.PreparedStatement stat_a1;		//ResultSet a1 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet a1;		//ResultSet a1 객체
	private java.sql.PreparedStatement stat_a5;		//ResultSet a5 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet a5;		//ResultSet a5 객체
	private java.sql.PreparedStatement stat_a3;		//ResultSet a3 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet a3;		//ResultSet a3 객체
	private java.sql.PreparedStatement stat_a4;		//ResultSet a4 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet a4;		//ResultSet a4 객체
	private java.sql.PreparedStatement stat_jip1;		//ResultSet jip1 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet jip1;		//ResultSet jip1 객체
	private java.sql.PreparedStatement stat_test;		//ResultSet test 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet test;		//ResultSet test 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_ff = new StringBuilder();		//ResultSet ff 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_a2 = new StringBuilder();		//ResultSet a2 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_a1 = new StringBuilder();		//ResultSet a1 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_a5 = new StringBuilder();		//ResultSet a5 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_a3 = new StringBuilder();		//ResultSet a3 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_a4 = new StringBuilder();		//ResultSet a4 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_jip1 = new StringBuilder();		//ResultSet jip1 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_test = new StringBuilder();		//ResultSet test 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet ff 객체에서 필드 값을 받는 쿼리 필드 변수
	private String ff_USER_IDX;
	private String ff_KOR_NM;
	private String ff_RND_MAIN_ORG;
	private String ff_LOCATION_DTL;
	private double ff_SM;
	private long ff_USER_CNT;
	private long ff_SCOPE_CNT;
	private long ff_EQ_CNT;

	//ResultSet a2 객체에서 필드 값을 받는 쿼리 필드 변수
	private String a2_IDX;
	private String a2_AREA;
	private long a2_CNT;

	//ResultSet a1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String a1_IDX;
	private String a1_AREA;
	private long a1_CNT;

	//ResultSet a5 객체에서 필드 값을 받는 쿼리 필드 변수
	private String a5_IDX;
	private String a5_AREA;
	private long a5_CNT;

	//ResultSet a3 객체에서 필드 값을 받는 쿼리 필드 변수
	private String a3_IDX;
	private String a3_AREA;
	private long a3_CNT;

	//ResultSet a4 객체에서 필드 값을 받는 쿼리 필드 변수
	private String a4_IDX;
	private String a4_AREA;
	private long a4_CNT;

	//ResultSet jip1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String jip1_IDX;
	private String jip1_AREA;
	private String jip1_DEPT_NM;
	private String jip1_ORG_GRP_NM;
	private long jip1_USER_CNT;
	private long jip1_CNT;

	//ResultSet test 객체에서 필드 값을 받는 쿼리 필드 변수
	private String test_A;

	//파라미터 변수 선언
	String userIdx_Param;
	String orgcd_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "56 70 56 70");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(e);
			throw e;
		}finally{    //finally 구문
			//DataSet Close
			cleanup(test, stat_test, null, null);
			cleanup(jip1, stat_jip1, null, null);
			cleanup(a4, stat_a4, null, null);
			cleanup(a3, stat_a3, null, null);
			cleanup(a5, stat_a5, null, null);
			cleanup(a1, stat_a1, null, null);
			cleanup(a2, stat_a2, null, null);
			cleanup(ff, stat_ff, null, null);
			cleanup(null, null, null, conn_jnsp);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "2700x2970", "256", "VERTICAL", "7 0 7 0");
		initSheetVariant(19, 12, 747, 831, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromview(true, true);    //Void 밴드 호출
		getScriptFromviewList(true, true);    //Void 밴드 호출
		getScriptFromTbList(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----view VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : view
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromview(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=419;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ41="";

			//데이터 변수 할당
			sheet10_A1="    지식재산보유현황";
			getChartDataAI_CHART_OBJ41( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptview();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----viewList VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : viewList
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromviewList(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet10_B21="기관명";
			sheet10_K21="합계";
			sheet10_S21="운영인력";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptviewList();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----TbList RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : TbList
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromTbList(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet10_B22="";
		sheet10_K22=0L;
		sheet10_S22=0L;

		//DataSet 객체 생성
		//ResultSet jip1 객체의 생성
		if(jip1==null){
			jip1 = stat_jip1.executeQuery();
		}else{
			jip1.beforeFirst();
		}

		//--while Loop Start--##
		while(jip1.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromjip1();	//RecordSet jip1에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_B22 = jip1_AREA;
			sheet10_K22 = jip1_CNT;
			sheet10_S22 = jip1_USER_CNT;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptTbList();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//-----스크립트 출력 함수-----
	//----view 스크립트 문 출력 함수----
	private void writeScriptview( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), sheet10_A1, "sheet10_A1", mapStyle.get("sheet10_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_J1"), nYCurPos+mapTop.get("sheet10_J1"), mapWidth.get("sheet10_J1"), mapHeight.get("sheet10_J1"), "", "sheet10_J1", mapStyle.get("sheet10_J1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_K1"), nYCurPos+mapTop.get("sheet10_K1"), mapWidth.get("sheet10_K1"), mapHeight.get("sheet10_K1"), "", "sheet10_K1", mapStyle.get("sheet10_K1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_L1"), nYCurPos+mapTop.get("sheet10_L1"), mapWidth.get("sheet10_L1"), mapHeight.get("sheet10_L1"), "", "sheet10_L1", mapStyle.get("sheet10_L1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_M1"), nYCurPos+mapTop.get("sheet10_M1"), mapWidth.get("sheet10_M1"), mapHeight.get("sheet10_M1"), "", "sheet10_M1", mapStyle.get("sheet10_M1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_N1"), nYCurPos+mapTop.get("sheet10_N1"), mapWidth.get("sheet10_N1"), mapHeight.get("sheet10_N1"), "", "sheet10_N1", mapStyle.get("sheet10_N1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_O1"), nYCurPos+mapTop.get("sheet10_O1"), mapWidth.get("sheet10_O1"), mapHeight.get("sheet10_O1"), "", "sheet10_O1", mapStyle.get("sheet10_O1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_P1"), nYCurPos+mapTop.get("sheet10_P1"), mapWidth.get("sheet10_P1"), mapHeight.get("sheet10_P1"), "", "sheet10_P1", mapStyle.get("sheet10_P1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Q1"), nYCurPos+mapTop.get("sheet10_Q1"), mapWidth.get("sheet10_Q1"), mapHeight.get("sheet10_Q1"), "", "sheet10_Q1", mapStyle.get("sheet10_Q1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_R1"), nYCurPos+mapTop.get("sheet10_R1"), mapWidth.get("sheet10_R1"), mapHeight.get("sheet10_R1"), "", "sheet10_R1", mapStyle.get("sheet10_R1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_S1"), nYCurPos+mapTop.get("sheet10_S1"), mapWidth.get("sheet10_S1"), mapHeight.get("sheet10_S1"), "", "sheet10_S1", mapStyle.get("sheet10_S1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_T1"), nYCurPos+mapTop.get("sheet10_T1"), mapWidth.get("sheet10_T1"), mapHeight.get("sheet10_T1"), "", "sheet10_T1", mapStyle.get("sheet10_T1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_U1"), nYCurPos+mapTop.get("sheet10_U1"), mapWidth.get("sheet10_U1"), mapHeight.get("sheet10_U1"), "", "sheet10_U1", mapStyle.get("sheet10_U1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_V1"), nYCurPos+mapTop.get("sheet10_V1"), mapWidth.get("sheet10_V1"), mapHeight.get("sheet10_V1"), "", "sheet10_V1", mapStyle.get("sheet10_V1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_W1"), nYCurPos+mapTop.get("sheet10_W1"), mapWidth.get("sheet10_W1"), mapHeight.get("sheet10_W1"), "", "sheet10_W1", mapStyle.get("sheet10_W1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_X1"), nYCurPos+mapTop.get("sheet10_X1"), mapWidth.get("sheet10_X1"), mapHeight.get("sheet10_X1"), "", "sheet10_X1", mapStyle.get("sheet10_X1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_Y1"), nYCurPos+mapTop.get("sheet10_Y1"), mapWidth.get("sheet10_Y1"), mapHeight.get("sheet10_Y1"), "", "sheet10_Y1", mapStyle.get("sheet10_Y1"));
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos+30, 726, 362, AI_CHART_OBJ41, "AI_CHART_OBJ41", "draw_style_0");
	}

	//----viewList 스크립트 문 출력 함수----
	private void writeScriptviewList( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B21"), nYCurPos+mapTop.get("sheet10_B21"), mapWidth.get("sheet10_B21"), mapHeight.get("sheet10_B21"), sheet10_B21, "sheet10_B21", mapStyle.get("sheet10_B21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_K21"), nYCurPos+mapTop.get("sheet10_K21"), mapWidth.get("sheet10_K21"), mapHeight.get("sheet10_K21"), sheet10_K21, "sheet10_K21", mapStyle.get("sheet10_K21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_S21"), nYCurPos+mapTop.get("sheet10_S21"), mapWidth.get("sheet10_S21"), mapHeight.get("sheet10_S21"), sheet10_S21, "sheet10_S21", mapStyle.get("sheet10_S21"));
	}

	//----TbList 스크립트 문 출력 함수----
	private void writeScriptTbList(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B22"), nYCurPos+mapTop.get("sheet10_B22"), mapWidth.get("sheet10_B22"), mapHeight.get("sheet10_B22"), sheet10_B22, "sheet10_B22", mapStyle.get("sheet10_B22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_K22"), nYCurPos+mapTop.get("sheet10_K22"), mapWidth.get("sheet10_K22"), mapHeight.get("sheet10_K22"), String.valueOf(sheet10_K22), "sheet10_K22", mapStyle.get("sheet10_K22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_S22"), nYCurPos+mapTop.get("sheet10_S22"), mapWidth.get("sheet10_S22"), mapHeight.get("sheet10_S22"), String.valueOf(sheet10_S22), "sheet10_S22", mapStyle.get("sheet10_S22"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//jnsp Connection 객체 생성
		Class.forName("com.mysql.jdbc.Driver");
		conn_jnsp = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/jnspcms", "jnspcms", "jnspcms!@12");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_ff = initializer.configPreparedStatement("sql_ff", mapParam, conn_jnsp, null);

		stat_a2 = initializer.configPreparedStatement("sql_a2", mapParam, conn_jnsp, null);

		stat_a1 = initializer.configPreparedStatement("sql_a1", mapParam, conn_jnsp, null);

		stat_a5 = initializer.configPreparedStatement("sql_a5", mapParam, conn_jnsp, null);

		stat_a3 = initializer.configPreparedStatement("sql_a3", mapParam, conn_jnsp, null);

		stat_a4 = initializer.configPreparedStatement("sql_a4", mapParam, conn_jnsp, null);

		stat_jip1 = initializer.configPreparedStatement("sql_jip1", mapParam, conn_jnsp, null);

		stat_test = initializer.configPreparedStatement("sql_test", mapParam, conn_jnsp, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet ff 객체에서 필드 값 설정 함수
	private void setFieldVariableFromff() throws Exception{
		ff_USER_IDX = GetB(ff.getString(1));
		ff_KOR_NM = GetB(ff.getString(2));
		ff_RND_MAIN_ORG = GetB(ff.getString(3));
		ff_LOCATION_DTL = GetB(ff.getString(4));
		ff_SM = ff.getDouble(5);
		ff_USER_CNT = ff.getLong(6);
		ff_SCOPE_CNT = ff.getLong(7);
		ff_EQ_CNT = ff.getLong(8);
	}

	//ResultSet ff 객체의 필드 값 초기화 함수
	private void setFieldInitFromff(){
		ff_USER_IDX = "";
		ff_KOR_NM = "";
		ff_RND_MAIN_ORG = "";
		ff_LOCATION_DTL = "";
		ff_SM = 0;
		ff_USER_CNT = 0L;
		ff_SCOPE_CNT = 0L;
		ff_EQ_CNT = 0L;
	}

	//ResultSet ff 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromff() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(ff.getObject(1));
		row.add(ff.getObject(2));
		row.add(ff.getObject(3));
		row.add(ff.getObject(4));
		row.add(ff.getDouble(5));
		row.add(ff.getLong(6));
		row.add(ff.getLong(7));
		row.add(ff.getLong(8));

		return row;
	}

	//ResultSet a2 객체에서 필드 값 설정 함수
	private void setFieldVariableFroma2() throws Exception{
		a2_IDX = GetB(a2.getString(1));
		a2_AREA = GetB(a2.getString(2));
		a2_CNT = a2.getLong(3);
	}

	//ResultSet a2 객체의 필드 값 초기화 함수
	private void setFieldInitFroma2(){
		a2_IDX = "";
		a2_AREA = "";
		a2_CNT = 0L;
	}

	//ResultSet a2 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFroma2() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(a2.getObject(1));
		row.add(a2.getObject(2));
		row.add(a2.getLong(3));

		return row;
	}

	//ResultSet a1 객체에서 필드 값 설정 함수
	private void setFieldVariableFroma1() throws Exception{
		a1_IDX = GetB(a1.getString(1));
		a1_AREA = GetB(a1.getString(2));
		a1_CNT = a1.getLong(3);
	}

	//ResultSet a1 객체의 필드 값 초기화 함수
	private void setFieldInitFroma1(){
		a1_IDX = "";
		a1_AREA = "";
		a1_CNT = 0L;
	}

	//ResultSet a1 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFroma1() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(a1.getObject(1));
		row.add(a1.getObject(2));
		row.add(a1.getLong(3));

		return row;
	}

	//ResultSet a5 객체에서 필드 값 설정 함수
	private void setFieldVariableFroma5() throws Exception{
		a5_IDX = GetB(a5.getString(1));
		a5_AREA = GetB(a5.getString(2));
		a5_CNT = a5.getLong(3);
	}

	//ResultSet a5 객체의 필드 값 초기화 함수
	private void setFieldInitFroma5(){
		a5_IDX = "";
		a5_AREA = "";
		a5_CNT = 0L;
	}

	//ResultSet a5 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFroma5() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(a5.getObject(1));
		row.add(a5.getObject(2));
		row.add(a5.getLong(3));

		return row;
	}

	//ResultSet a3 객체에서 필드 값 설정 함수
	private void setFieldVariableFroma3() throws Exception{
		a3_IDX = GetB(a3.getString(1));
		a3_AREA = GetB(a3.getString(2));
		a3_CNT = a3.getLong(3);
	}

	//ResultSet a3 객체의 필드 값 초기화 함수
	private void setFieldInitFroma3(){
		a3_IDX = "";
		a3_AREA = "";
		a3_CNT = 0L;
	}

	//ResultSet a3 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFroma3() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(a3.getObject(1));
		row.add(a3.getObject(2));
		row.add(a3.getLong(3));

		return row;
	}

	//ResultSet a4 객체에서 필드 값 설정 함수
	private void setFieldVariableFroma4() throws Exception{
		a4_IDX = GetB(a4.getString(1));
		a4_AREA = GetB(a4.getString(2));
		a4_CNT = a4.getLong(3);
	}

	//ResultSet a4 객체의 필드 값 초기화 함수
	private void setFieldInitFroma4(){
		a4_IDX = "";
		a4_AREA = "";
		a4_CNT = 0L;
	}

	//ResultSet a4 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFroma4() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(a4.getObject(1));
		row.add(a4.getObject(2));
		row.add(a4.getLong(3));

		return row;
	}

	//ResultSet jip1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromjip1() throws Exception{
		jip1_IDX = GetB(jip1.getString(1));
		jip1_AREA = GetB(jip1.getString(2));
		jip1_DEPT_NM = GetB(jip1.getString(3));
		jip1_ORG_GRP_NM = GetB(jip1.getString(4));
		jip1_USER_CNT = jip1.getLong(5);
		jip1_CNT = jip1.getLong(6);
	}

	//ResultSet jip1 객체의 필드 값 초기화 함수
	private void setFieldInitFromjip1(){
		jip1_IDX = "";
		jip1_AREA = "";
		jip1_DEPT_NM = "";
		jip1_ORG_GRP_NM = "";
		jip1_USER_CNT = 0L;
		jip1_CNT = 0L;
	}

	//ResultSet jip1 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromjip1() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(jip1.getObject(1));
		row.add(jip1.getObject(2));
		row.add(jip1.getObject(3));
		row.add(jip1.getObject(4));
		row.add(jip1.getLong(5));
		row.add(jip1.getLong(6));

		return row;
	}

	//ResultSet test 객체에서 필드 값 설정 함수
	private void setFieldVariableFromtest() throws Exception{
		test_A = GetB(test.getString(1));
	}

	//ResultSet test 객체의 필드 값 초기화 함수
	private void setFieldInitFromtest(){
		test_A = "";
	}

	//ResultSet test 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromtest() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(test.getObject(1));

		return row;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//----AI_CHART_OBJ41 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ41( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet jip1 객체의 생성
		if(jip1==null){
			jip1 = stat_jip1.executeQuery();
		}else{
			jip1.beforeFirst();
		}
		if(!jip1.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ41="\t";
		AI_CHART_OBJ41=AI_CHART_OBJ41 + "CNT\r\n";

		while(jip1.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromjip1();   //RecordSet jip1에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ41=AI_CHART_OBJ41 + jip1_AREA + "\t";

			//데이터 설정
			AI_CHART_OBJ41=AI_CHART_OBJ41 + jip1_CNT + "\r\n";
		}   //while end
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		userIdx_Param=decoder.getParameterB("userIdx");
		//userIdx_Param=aiReplace(userIdx_Param, str, "\n");
		mapParam.put("userIdx", userIdx_Param);

		orgcd_Param=decoder.getParameterB("orgcd");
		//orgcd_Param=aiReplace(orgcd_Param, str, "\n");
		mapParam.put("orgcd", orgcd_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|0|Temporary.style|통계", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 256, 27, "cell_style_0");
		setCellInfoMap_Internal("sheet10_J1", 256, 0, 29, 27, "cell_style_0");
		setCellInfoMap_Internal("sheet10_K1", 285, 0, 29, 27, "cell_style_0");
		setCellInfoMap_Internal("sheet10_L1", 314, 0, 29, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_M1", 343, 0, 29, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_N1", 372, 0, 29, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_O1", 401, 0, 29, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_P1", 430, 0, 29, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_Q1", 459, 0, 28, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_R1", 487, 0, 28, 27, "cell_style_0");
		setCellInfoMap_Internal("sheet10_S1", 515, 0, 28, 27, "cell_style_0");
		setCellInfoMap_Internal("sheet10_T1", 543, 0, 28, 27, "cell_style_0");
		setCellInfoMap_Internal("sheet10_U1", 571, 0, 28, 27, "cell_style_0");
		setCellInfoMap_Internal("sheet10_V1", 599, 0, 28, 27, "cell_style_0");
		setCellInfoMap_Internal("sheet10_W1", 627, 0, 28, 27, "cell_style_0");
		setCellInfoMap_Internal("sheet10_X1", 655, 0, 28, 27, "cell_style_0");
		setCellInfoMap_Internal("sheet10_Y1", 683, 0, 28, 27, "cell_style_0");
		setCellInfoMap_Internal("sheet10_B21", 24, 0, 261, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_K21", 285, 0, 230, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_S21", 515, 0, 196, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet10_B22", 24, 0, 261, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet10_K22", 285, 0, 230, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet10_S22", 515, 0, 196, 20, "cell_style_8");
	}

	private ResultSet acquireResultSet(CallableStatement cstmt, int cursorIdx) throws SQLException {
		if (cstmt.execute()) {
			if (cursorIdx == -1) {
				return (cstmt.getResultSet());
			} else {
				return ((ResultSet) cstmt.getObject(cursorIdx));
			}
		} else {
			int count;
			if ((count = cstmt.getUpdateCount()) == -1) {
				if (cursorIdx == -1) {
					throw (new UnsupportedOperationException("None result"));
				} else {
					return ((ResultSet) cstmt.getObject(cursorIdx));
				}
			}
			while (true) {
				if (cstmt.getMoreResults()) {
					if (cursorIdx == -1) {
						return (cstmt.getResultSet());
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				} else if ((count = cstmt.getUpdateCount()) == -1) {
					if (cursorIdx == -1) {
						throw (new UnsupportedOperationException("None result-2"));
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				}
			}
		}
	}
}
%>
