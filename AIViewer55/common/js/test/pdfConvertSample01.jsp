<%
/************************************************************************************
Generated by AIDesigner 5.5.0.4
************************************************************************************
보고서 제목 : XMD_0109_R01
작성일 : 2013년1월3일 9시36분18초
작성자 : 김정우
************************************************************************************/
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page contentType="text/html; charset=euc-kr" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>
<%@ page import="com.activeintra.util.uds.*" %>


<%
Object[] userObj = null;

String reportMode=request.getParameter("reportMode");
String reportParams=request.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL") || reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext,request,response,userObj);
handler.service(out);
handler = null;
%>

<%!
private Logger logger = Logger.getLogger("pdfConvertSample01.jsp");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;

	private AIScriptManager manager;
	private String reportMode="HTML";
	private String pdfFilename="";

	//-----데이터 변수 선언-----
	String sheet10_H1;
	String sheet10_H3;
	String sheet10_J3;
	String sheet10_L3;
	String sheet10_N3;
	String sheet10_A5;
	String sheet10_E5;
	String sheet10_F5;
	String sheet10_H5;
	String sheet10_I5;
	String sheet10_I6;
	String sheet10_L6;
	String sheet10_A7;
	String sheet10_I7;
	String sheet10_I8;
	String sheet10_L8;
	String sheet20_A1;
	String sheet20_B1;
	String sheet20_C1;
	String sheet20_D1;
	String sheet20_E1;
	String sheet20_F1;
	String sheet20_G1;
	String sheet20_A2;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_orcl;		//DSN orcl Connection 객체
	private java.sql.Statement stat_qry_orcl;		//ResultSet qry_orcl 객체를 생성하기 위한 Statement 객체
	private ResultSet qry_orcl;		//ResultSet qry_orcl 객체
	private java.sql.Statement stat_qry_master;		//ResultSet qry_master 객체를 생성하기 위한 Statement 객체
	private ResultSet qry_master;		//ResultSet qry_master 객체

	//-----SQL 변수 선언-----
	private String sql_qry_orcl;		//ResultSet qry_orcl 객체를 생성하기 위한 쿼리문 저장
	private String sql_qry_master;		//ResultSet qry_master 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet qry_orcl 객체에서 필드 값을 받는 쿼리 필드 변수
	private String qry_orcl_EMPNO;
	private String qry_orcl_ENAME;
	private String qry_orcl_JOB;
	private String qry_orcl_MGR;
	private String qry_orcl_HIREDATE;
	private String qry_orcl_SAL;
	private String qry_orcl_COMM;
	private String qry_orcl_DEPTNO;

	//ResultSet qry_master 객체에서 필드 값을 받는 쿼리 필드 변수
	private String qry_master_JOB;

	//파라미터 변수 선언
	String bareaCd_Param;
	String langScCd_Param;
	String cntryCd_Param;
	String billYm_Param;
	String billNo_Param;
	String medBusnScCd_Param;
	String csmInPblYn_Param;
	String billNoS_Param;

	//-----사용자 정의 변수 및 함수-----
	boolean medSumPrtFlag = false;


	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext,HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.pageContext=pageContext;
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = request.getRequestURI().replace(context.getContextPath(), "");

			String path = temp.replace(".jsp", ".style");

			List<String> pdfFileNames = new ArrayList<String>();
			List<Integer> pdfStartPages = new ArrayList<Integer>();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddhhmmss");
				
			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "HORIZONTAL", "56 70 56 70");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				
				for(int i =0; i < 10; i++){
					if(i == 0){
						pdfStartPages.add(1);
					}else{
						pdfStartPages.add(nPageNum);
					}
					pdfFileNames.add("/log/AIPDF_" + sdf.format(System.currentTimeMillis()));
					//쿼리문 초기화 함수 호출
					initSQLConst();
	
					//쉬트 함수 호출
					//SHEET=Sheet1   FRAME=0 함수 호출
					executeSheet10();
				}
				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.setFileNames(pdfFileNames, pdfStartPages);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("\r");
			StackTraceElement[] trace = e.getStackTrace();
			for(int i = 0; i < trace.length; i++) {
				out.println(trace[i]);
			}
			out.print("\r");
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			//DataSet Close
			cleanup(qry_master, stat_qry_master, null, null);
			cleanup(qry_orcl, stat_qry_orcl, null, null);
			cleanup(null, null, null, conn_orcl);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "56 70 56 70");
		initSheetVariant(69, 83, 773, 515, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrompage_header(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(69, 83, 773, 515, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----header RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : header
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromheader(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----data RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : data
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromdata(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=15;    //밴드 출력 높이
		boolean bIsFirst=true;
		int nRepeatNum=0;    //반복 횟수 변수

		//데이터 변수 초기화
		sheet20_A2="";

		//DataSet 객체 생성
		//ResultSet qry_orcl 객체의 생성
		if(qry_orcl==null){
			qry_orcl = stat_qry_orcl.executeQuery(sql_qry_orcl.toString());
		}else{
			qry_orcl.beforeFirst();
		}

		//반복 헤더 호출
		if(qry_orcl.next()){
			getScriptFromheader(bIsFirst, true);	//반복 헤더 호출
			qry_orcl.previous();
		}

		while(qry_orcl.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromqry_orcl();	//RecordSet qry_orcl에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_A2=qry_orcl_EMPNO;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight) || nRepeatNum==8){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					nRepeatNum=0;
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromheader(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptdata();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
			nRepeatNum=nRepeatNum+1;	//출력 횟수 증가
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//-----page_header RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : page_header
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrompage_header(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=216;    //밴드 출력 높이
		boolean bIsFirst=true;
		int nRepeatNum=0;    //반복 횟수 변수

		//데이터 변수 초기화
		sheet10_F5="";

		//DataSet 객체 생성
		//ResultSet qry_master 객체의 생성
		if(qry_master==null){
			qry_master = stat_qry_master.executeQuery(sql_qry_master.toString());
		}else{
			qry_master.beforeFirst();
		}

		while(qry_master.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromqry_master();	//RecordSet qry_master에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_F5=qry_master_JOB;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight) || nRepeatNum==1){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					nRepeatNum=0;
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptpage_header();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//루프 내부 자식 밴드 호출
			getScriptFromdata(true);

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
			nRepeatNum=nRepeatNum+1;	//출력 횟수 증가
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//-----스크립트 출력 함수-----
	//----header 스크립트 문 출력 함수----
	private void writeScriptheader( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 58, 20, sheet20_A1, "sheet20_A1", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+58, nYCurPos, 212, 20, sheet20_B1, "sheet20_B1", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+270, nYCurPos, 56, 20, sheet20_C1, "sheet20_C1", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+326, nYCurPos, 99, 20, sheet20_D1, "sheet20_D1", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+425, nYCurPos, 43, 20, sheet20_E1, "sheet20_E1", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+468, nYCurPos, 115, 20, sheet20_F1, "sheet20_F1", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+583, nYCurPos, 119, 20, sheet20_G1, "sheet20_G1", "cell_style_8");
	}

	//----data 스크립트 문 출력 함수----
	private void writeScriptdata(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 58, 15, sheet20_A2, "sheet20_A2", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+58, nYCurPos, 212, 15, "", "sheet20_B2", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+270, nYCurPos, 56, 15, "", "sheet20_C2", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+326, nYCurPos, 99, 15, "", "sheet20_D2", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+425, nYCurPos, 43, 15, "", "sheet20_E2", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+468, nYCurPos, 115, 15, "", "sheet20_F2", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+583, nYCurPos, 119, 15, "", "sheet20_G2", "cell_style_3");
	}

	//----page_header 스크립트 문 출력 함수----
	private void writeScriptpage_header(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+340, nYCurPos, 362, 20, sheet10_H1, "sheet10_H1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+340, nYCurPos+40, 90, 23, sheet10_H3, "sheet10_H3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+40, 92, 23, sheet10_J3, "sheet10_J3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+522, nYCurPos+40, 90, 23, sheet10_L3, "sheet10_L3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+612, nYCurPos+40, 90, 23, sheet10_N3, "sheet10_N3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+340, nYCurPos+63, 90, 61, "", "sheet10_H4", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+63, 92, 61, "", "sheet10_J4", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+522, nYCurPos+63, 90, 61, "", "sheet10_L4", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+612, nYCurPos+63, 90, 61, "", "sheet10_N4", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+124, 54, 40, sheet10_A5, "sheet10_A5", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+54, nYCurPos+124, 98, 40, "", "sheet10_B5", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+152, nYCurPos+124, 57, 40, sheet10_E5, "sheet10_E5", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+209, nYCurPos+124, 131, 40, sheet10_F5, "sheet10_F5", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+340, nYCurPos+124, 25, 92, sheet10_H5, "sheet10_H5", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+365, nYCurPos+124, 157, 20, sheet10_I5, "sheet10_I5", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+522, nYCurPos+124, 180, 20, "", "sheet10_L5", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+365, nYCurPos+144, 65, 20, sheet10_I6, "sheet10_I6", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+144, 92, 20, "", "sheet10_J6", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+522, nYCurPos+144, 45, 20, sheet10_L6, "sheet10_L6", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+567, nYCurPos+144, 135, 20, "", "sheet10_M6", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+164, 54, 52, sheet10_A7, "sheet10_A7", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+54, nYCurPos+164, 286, 52, "", "sheet10_B7", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+365, nYCurPos+164, 65, 20, sheet10_I7, "sheet10_I7", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+164, 272, 20, "", "sheet10_J7", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+365, nYCurPos+184, 65, 32, sheet10_I8, "sheet10_I8", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+184, 92, 32, "", "sheet10_J8", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+522, nYCurPos+184, 45, 32, sheet10_L8, "sheet10_L8", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+567, nYCurPos+184, 135, 32, "", "sheet10_M8", "cell_style_6");
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//orcl Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver");
		conn_orcl = DriverManager.getConnection("jdbc:oracle:thin:@192.168.0.52:1521:orcl","scott","pass1670");
		stat_qry_orcl=conn_orcl.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_qry_master=conn_orcl.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----ResultSet, Statement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, Statement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_qry_orcl = "select * from emp";

		sql_qry_master = "select job from emp ";
		sql_qry_master = sql_qry_master + "where rownum < 2";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet qry_orcl 객체에서 필드 값 설정 함수
	private void setFieldVariableFromqry_orcl() throws Exception{
		qry_orcl_EMPNO=GetB(qry_orcl.getString(1));
		qry_orcl_ENAME=GetB(qry_orcl.getString(2));
		qry_orcl_JOB=GetB(qry_orcl.getString(3));
		qry_orcl_MGR=GetB(qry_orcl.getString(4));
		qry_orcl_HIREDATE=GetB(qry_orcl.getString(5));
		qry_orcl_SAL=GetB(qry_orcl.getString(6));
		qry_orcl_COMM=GetB(qry_orcl.getString(7));
		qry_orcl_DEPTNO=GetB(qry_orcl.getString(8));
	}

	//ResultSet qry_orcl 객체의 필드 값 초기화 함수
	private void setFieldInitFromqry_orcl(){
		qry_orcl_EMPNO="";
		qry_orcl_ENAME="";
		qry_orcl_JOB="";
		qry_orcl_MGR="";
		qry_orcl_HIREDATE="";
		qry_orcl_SAL="";
		qry_orcl_COMM="";
		qry_orcl_DEPTNO="";
	}

	//ResultSet qry_master 객체에서 필드 값 설정 함수
	private void setFieldVariableFromqry_master() throws Exception{
		qry_master_JOB=GetB(qry_master.getString(1));
	}

	//ResultSet qry_master 객체의 필드 값 초기화 함수
	private void setFieldInitFromqry_master(){
		qry_master_JOB="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		sheet10_H1="  거래명세표";
		sheet10_H3="AE";
		sheet10_J3="담당";
		sheet10_L3="팀장";
		sheet10_N3="실장";
		sheet10_A5="청구일자";
		sheet10_E5="담당부서";
		sheet10_H5="공\n급\n자";
		sheet10_I5="사업자등록번호";
		sheet10_I6="상호";
		sheet10_L6="성명";
		sheet10_A7="광고주";
		sheet10_I7="주소";
		sheet10_I8="업태";
		sheet10_L8="종목";
		sheet20_A1="일련번호";
		sheet20_B1="프로그램&스파트";
		sheet20_C1="요일";
		sheet20_D1="단가";
		sheet20_E1="횟수";
		sheet20_F1="금액";
		sheet20_G1="비고";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=toKor(GetB(request.getParameter("reportMode")));
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + toKor(GetB(request.getParameter("reportParams"))));

		char data[] = {0x14};
		String str = new String(data);
		bareaCd_Param=toKor(GetB(request.getParameter("bareaCd")));
		bareaCd_Param=aiReplace(bareaCd_Param, str, "\n");
		langScCd_Param=toKor(GetB(request.getParameter("langScCd")));
		langScCd_Param=aiReplace(langScCd_Param, str, "\n");
		cntryCd_Param=toKor(GetB(request.getParameter("cntryCd")));
		cntryCd_Param=aiReplace(cntryCd_Param, str, "\n");
		billYm_Param=toKor(GetB(request.getParameter("billYm")));
		billYm_Param=aiReplace(billYm_Param, str, "\n");
		billNo_Param=toKor(GetB(request.getParameter("billNo")));
		billNo_Param=aiReplace(billNo_Param, str, "\n");
		medBusnScCd_Param=toKor(GetB(request.getParameter("medBusnScCd")));
		medBusnScCd_Param=aiReplace(medBusnScCd_Param, str, "\n");
		csmInPblYn_Param=toKor(GetB(request.getParameter("csmInPblYn")));
		csmInPblYn_Param=aiReplace(csmInPblYn_Param, str, "\n");
		billNoS_Param=toKor(GetB(request.getParameter("billNoS")));
		billNoS_Param=aiReplace(billNoS_Param, str, "\n");
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight){
		//GetPrintHeight_AutoCode
		int ch;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		printWidth = (printWidth-4)*100;

		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
				}
			} else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;

				if (ch==13) {
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}
			} else {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}
			}
		}

		if (height>printHeight) {
			height=height-printHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight){
		//GetPrintHeightEx_AutoCode
		int ch;
		int i;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		boolean bSplit=false;
		strSplitData[0]="";
		strSplitData[1]="";
		printWidth = (printWidth-4)*100;

		for (i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
				}
			}else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;
				if (ch==13){
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					if(i!=size-1){
						bSplit=true;
						i++;
					}
					break;
				}
			}else{
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					bSplit=true;
					break;
				}
			}
		}

		if(bSplit){
			strSplitData[0]=data.substring(0, i);
			strSplitData[1]=data.substring(i);
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|1|pdfConvertSample01.style|XMD_0109_R01", false);
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}
}
%>
