<%
/************************************************************************************
Generated by AIDesigner 5.1.0.2
************************************************************************************
보고서 제목 : 보고서 (2012/11/8 11:7:12)
작성일 : 2012년11월8일 11시7분12초
작성자 :
************************************************************************************/
%>


<%@ page language="java" import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.net.URL" %>
<%@ page contentType="text/html; charset=utf-8" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="sun.font.FontManager" %>
<%@ page import="java.awt.*" %>


<%
System.out.println(session.getId());
Object[] userObj = null;
    String reportMode=request.getParameter("reportMode");
    String reportParams=request.getParameter("reportParams");
    if(reportMode!=null) {
        if (reportMode.equals("PDF")) {
            if (reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1) {
                out.clear();
                out = pageContext.pushBody();
            }
        } else if (reportMode.equals("EXCEL")) {
            if (reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1) {
                out.clear();
                out = pageContext.pushBody();
            }
        } else if (reportMode.equals("AR5")) {
            out.clear();
            out = pageContext.pushBody();
        }
    }

ReportHandler handler = new ReportHandler(pageContext,request,response,userObj);
handler.service(out);

handler=null;

%>

<%!

private Logger logger = Logger.getLogger("test002.jsp");       //추가

class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	//private Logger logger;
	private String pdfFilename="null";

	//-----데이터 변수 선언-----
	String sheet10_A2;
	String sheet10_A3;
	String sheet10_E3;
	String sheet10_A4;
	String sheet10_E4;
	String sheet10_A5;
	String sheet10_E5;
	String sheet10_A6;
	String sheet10_E6;
	String sheet10_A7;
	String sheet10_A9;
	String sheet10_B9;
	String sheet10_D9;
	String sheet10_E9;
	String sheet10_F9;
	String sheet10_B10;
	String sheet10_A12;
	String sheet10_A13;
	String sheet10_A14;
	String sheet10_A15;
	String sheet10_A16;
	String sheet10_A17;
	String sheet10_B17;
	String sheet10_A18;
	String sheet10_C18;
	String sheet10_A19;
	String sheet10_B19;
	String sheet10_C19;
	String sheet10_E19;
	String sheet10_F19;
	String sheet10_A20;
	String sheet10_B20;
	String sheet10_C20;
	String sheet10_E20;
	String sheet10_F20;
	String sheet10_A21;
	String sheet10_B21;
	String sheet10_C21;
	String sheet10_E21;
	String sheet10_F21;
	String sheet10_A22;
	String sheet10_B22;
	String sheet10_C22;
	String sheet10_E22;
	String sheet10_F22;
	String sheet10_A23;
	String sheet10_B23;
	String sheet10_C23;
	String sheet10_E23;
	String sheet10_F23;
	String sheet10_A24;
	String sheet10_B24;
	String sheet10_A25;
	String sheet10_B25;
	String sheet10_C25;
	String sheet10_E25;
	String sheet10_F25;
	String sheet10_A26;
	String sheet10_B26;
	String sheet10_C26;
	String sheet10_E26;
	String sheet10_F26;
	String sheet10_A27;
	String sheet10_B27;
	String sheet10_C27;
	String sheet10_E27;
	String sheet10_F27;
	String sheet10_A28;
	String sheet10_B28;
	String sheet10_C28;
	String sheet10_E28;
	String sheet10_F28;
	String sheet10_A29;
	String sheet10_B29;
	String sheet10_C29;
	String sheet10_E29;
	String sheet10_F29;

	//ReportHandler 생성자 함수

	ReportHandler(PageContext pageContext,HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.pageContext=pageContext;
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}


	
	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			//AIreportURL aiURL = new AIreportURL();
			//URL url = new URL(request.getRequestURL().toString());
			//PropertyConfigurator.configure(new URL(url, aiURL.getInstallPath() + "/common/AIReport.properties"));
			//logger = Logger.getLogger("test002.jsp");
			manager = new AIScriptManager(request, response, pageContext,out, logger, null);
				
			ServletContext context = pageContext.getServletContext();
			
			String temp = request.getRequestURI().replace(context.getContextPath(), "");
			

			String path = temp.replace("jsp", "style");
		
			//pdfFilename="c!@/log/테스트.pdf";
				
			//파라미터 설정 함수 호출
				
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "14 14 14 14");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();


                manager.scriptWriteMarkAny("CopyImage",50,50,50,50);
                manager.scriptWriteMarkAny("WaterMarkImage",50,100,0,0);
                //manager.scriptWriteMarkAny("PatternImage",50,100,0,0);

				//manager.scriptWriteBcqre(100, 100, 50, 50, true, true);
				
                //manager.scriptWriteBcqre(50, 750, 500, 100, 200, 50, "123456", "default", "default$", "C:\\Program Files (x86)\\BCQRE\\config\\config.xml");
                //manager.scriptWriteBcqre(50, 750, 500, 100, 150, 50, "123456", "default", "default$", "C:\\MyWorking\\Apache Tomcat 7.0.41\\webapps\\ROOT\\issuer\\config\\configActiveX.xml");
                //manager.scriptWriteBcqre(50, 750, 500, 100, 150, 50, "123456", "default", "default$", null);
				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
			
				manager.close();
                /*
				logger.debug(System.getProperty("java.home"));
				System.out.println(System.getProperty("user.home"));
				System.out.println(System.getProperty("defFont"));

                java.util.Properties props = System.getProperties();
                java.util.Enumeration keys = props.keys();
                while (keys.hasMoreElements()) {
                    System.out.println(keys.nextElement());
                }
                */

            }
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("\r");
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "14 14 14 14");
		initSheetVariant(31, 24, 561, 812, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromvoid(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----void VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : void
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvoid(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=712;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvoid();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----void 스크립트 문 출력 함수----
	private void writeScriptvoid( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+53, 529, 31, sheet10_A2, "sheet10_A2", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+84, 102, 22, sheet10_A3, "sheet10_A3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+84, 249, 22, "", "sheet10_B3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+84, 89, 22, sheet10_E3, "sheet10_E3", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+84, 89, 22, "", "sheet10_F3", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+106, 102, 22, sheet10_A4, "sheet10_A4", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+106, 249, 22, "", "sheet10_B4", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+106, 89, 22, sheet10_E4, "sheet10_E4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+106, 89, 22, "", "sheet10_F4", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+128, 102, 23, sheet10_A5, "sheet10_A5", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+128, 249, 23, "", "sheet10_B5", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+128, 89, 23, sheet10_E5, "sheet10_E5", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+128, 89, 23, "", "sheet10_F5", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+151, 102, 21, sheet10_A6, "sheet10_A6", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+151, 249, 21, "", "sheet10_B6", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+151, 89, 21, sheet10_E6, "sheet10_E6", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+151, 89, 21, "", "sheet10_F6", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+172, 102, 23, sheet10_A7, "sheet10_A7", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+172, 427, 23, "", "sheet10_B7", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+195, 529, 22, "", "sheet10_A8", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+217, 102, 22, sheet10_A9, "sheet10_A9", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+217, 166, 22, sheet10_B9, "sheet10_B9", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+268, nYCurPos+217, 83, 22, sheet10_D9, "sheet10_D9", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+217, 89, 22, sheet10_E9, "sheet10_E9", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+217, 89, 22, sheet10_F9, "sheet10_F9", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+239, 102, 23, "", "sheet10_A10", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+239, 166, 23, sheet10_B10, "sheet10_B10", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+268, nYCurPos+239, 83, 23, "", "sheet10_D10", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+239, 89, 23, "", "sheet10_E10", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+239, 89, 23, "", "sheet10_F10", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+262, 102, 23, "", "sheet10_A11", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+262, 166, 23, "", "sheet10_B11", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+268, nYCurPos+262, 83, 23, "", "sheet10_D11", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+262, 89, 23, "", "sheet10_E11", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+262, 89, 23, "", "sheet10_F11", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+285, 102, 44, sheet10_A12, "sheet10_A12", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+285, 427, 44, "", "sheet10_B12", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+329, 102, 21, sheet10_A13, "sheet10_A13", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+329, 427, 21, "", "sheet10_B13", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+350, 102, 21, sheet10_A14, "sheet10_A14", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+350, 427, 21, "", "sheet10_B14", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+371, 102, 21, sheet10_A15, "sheet10_A15", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+371, 427, 21, "", "sheet10_B15", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+392, 102, 43, sheet10_A16, "sheet10_A16", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+392, 427, 43, "", "sheet10_B16", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+435, 102, 21, sheet10_A17, "sheet10_A17", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+435, 427, 21, sheet10_B17, "sheet10_B17", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+456, 185, 21, sheet10_A18, "sheet10_A18", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+456, 344, 21, sheet10_C18, "sheet10_C18", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+477, 102, 21, sheet10_A19, "sheet10_A19", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+477, 83, 21, sheet10_B19, "sheet10_B19", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+477, 166, 21, sheet10_C19, "sheet10_C19", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+477, 89, 21, sheet10_E19, "sheet10_E19", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+477, 89, 21, sheet10_F19, "sheet10_F19", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+498, 102, 22, sheet10_A20, "sheet10_A20", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+498, 83, 22, sheet10_B20, "sheet10_B20", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+498, 166, 22, sheet10_C20, "sheet10_C20", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+498, 89, 22, sheet10_E20, "sheet10_E20", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+498, 89, 22, sheet10_F20, "sheet10_F20", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+520, 102, 21, sheet10_A21, "sheet10_A21", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+520, 83, 21, sheet10_B21, "sheet10_B21", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+520, 166, 21, sheet10_C21, "sheet10_C21", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+520, 89, 21, sheet10_E21, "sheet10_E21", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+520, 89, 21, sheet10_F21, "sheet10_F21", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+541, 102, 21, sheet10_A22, "sheet10_A22", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+541, 83, 21, sheet10_B22, "sheet10_B22", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+541, 166, 21, sheet10_C22, "sheet10_C22", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+541, 89, 21, sheet10_E22, "sheet10_E22", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+541, 89, 21, sheet10_F22, "sheet10_F22", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+562, 102, 21, sheet10_A23, "sheet10_A23", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+562, 83, 21, sheet10_B23, "sheet10_B23", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+562, 166, 21, sheet10_C23, "sheet10_C23", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+562, 89, 21, sheet10_E23, "sheet10_E23", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+562, 89, 21, sheet10_F23, "sheet10_F23", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+583, 102, 24, sheet10_A24, "sheet10_A24", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+583, 427, 24, sheet10_B24, "sheet10_B24", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+607, 102, 21, sheet10_A25, "sheet10_A25", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+607, 83, 21, sheet10_B25, "sheet10_B25", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+607, 166, 21, sheet10_C25, "sheet10_C25", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+607, 89, 21, sheet10_E25, "sheet10_E25", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+607, 89, 21, sheet10_F25, "sheet10_F25", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+628, 102, 21, sheet10_A26, "sheet10_A26", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+628, 83, 21, sheet10_B26, "sheet10_B26", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+628, 166, 21, sheet10_C26, "sheet10_C26", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+628, 89, 21, sheet10_E26, "sheet10_E26", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+628, 89, 21, sheet10_F26, "sheet10_F26", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+649, 102, 21, sheet10_A27, "sheet10_A27", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+649, 83, 21, sheet10_B27, "sheet10_B27", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+649, 166, 21, sheet10_C27, "sheet10_C27", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+649, 89, 21, sheet10_E27, "sheet10_E27", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+649, 89, 21, sheet10_F27, "sheet10_F27", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+670, 102, 21, sheet10_A28, "sheet10_A28", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+670, 83, 21, sheet10_B28, "sheet10_B28", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+670, 166, 21, sheet10_C28, "sheet10_C28", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+670, 89, 21, sheet10_E28, "sheet10_E28", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+670, 89, 21, sheet10_F28, "sheet10_F28", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+691, 102, 21, sheet10_A29, "sheet10_A29", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+102, nYCurPos+691, 83, 21, sheet10_B29, "sheet10_B29", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+691, 166, 21, sheet10_C29, "sheet10_C29", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+351, nYCurPos+691, 89, 21, sheet10_E29, "sheet10_E29", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+691, 89, 21, sheet10_F29, "sheet10_F29", "cell_style_4");

        //manager.scriptWrite("BcqreImage", "left|top|width|height|type", "50|750|500|50|copyfile:FileName", true);
        //manager.scriptWrite("BcqreImage", "left|top|width|height|type", "50|750|stream:water", true);
        manager.scriptWrite("SecureImage", "left|top|type", "50|70|copyfile:FileName", true);
        manager.scriptWrite("SecureImage", "left|top|type", "50|750|stream:water", true);
        //manager.scriptWrite("SecureImage", "left|top|type", "50|70|copyfile:FileName", true);
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----ResultSet, Statement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, Statement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		sheet10_A2="CASEMEMORANDUM";
		sheet10_A3=" RFD BY";
		sheet10_E3=" OPEN DATE";
		sheet10_A4=" RESPONSIBLE ATTY";
		sheet10_E4=" DUE DATE";
		sheet10_A5=" OUR REF";
		sheet10_E5=" REVIVAL DATE";
		sheet10_A6=" CLIENT";
		sheet10_E6=" CODE";
		sheet10_A7=" ADDRESS";
		sheet10_A9="NAME";
		sheet10_B9="POSITION/DEPT";
		sheet10_D9="TEL";
		sheet10_E9="FAX";
		sheet10_F9="E-MAIL";
		sheet10_B10="　";
		sheet10_A12="  MAIN ISSUE";
		sheet10_A13="  INVOICE MEMO";
		sheet10_A14="  POCKET FILES";
		sheet10_A15="  NUMBER OF FILES";
		sheet10_A16="  MEMO";
		sheet10_A17="  OTHER CASE";
		sheet10_B17="　";
		sheet10_A18="  OTHER PARTYINVOLVED";
		sheet10_C18="　";
		sheet10_A19="NAME";
		sheet10_B19="COMPANY";
		sheet10_C19="POSITION/DEPT";
		sheet10_E19="TEL";
		sheet10_F19="E-MAIL";
		sheet10_A20="　";
		sheet10_B20="　";
		sheet10_C20="　";
		sheet10_E20="　";
		sheet10_F20="　";
		sheet10_A21="　";
		sheet10_B21="　";
		sheet10_C21="　";
		sheet10_E21="　";
		sheet10_F21="　";
		sheet10_A22="　";
		sheet10_B22="　";
		sheet10_C22="　";
		sheet10_E22="　";
		sheet10_F22="　";
		sheet10_A23="　";
		sheet10_B23="　";
		sheet10_C23="　";
		sheet10_E23="　";
		sheet10_F23="　";
		sheet10_A24=" COUNTERPARTY";
		sheet10_B24="　";
		sheet10_A25="NAME";
		sheet10_B25="COMPANY";
		sheet10_C25="POSITION/DEPT";
		sheet10_E25="TEL";
		sheet10_F25="E-MAIL";
		sheet10_A26="　";
		sheet10_B26="　";
		sheet10_C26="　";
		sheet10_E26="　";
		sheet10_F26="　";
		sheet10_A27="　";
		sheet10_B27="　";
		sheet10_C27="　";
		sheet10_E27="　";
		sheet10_F27="　";
		sheet10_A28="　";
		sheet10_B28="　";
		sheet10_C28="　";
		sheet10_E28="　";
		sheet10_F28="　";
		sheet10_A29="　";
		sheet10_B29="　";
		sheet10_C29="　";
		sheet10_E29="　";
		sheet10_F29="　";
	}
	

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=toKor(GetB(request.getParameter("reportMode")));
		if(reportMode.equals("")) {
			reportMode="HTML";
			//reportMode="AIScript";
		}

		manager.setParam("pdfFilename:" + pdfFilename + "," + toKor(GetB(request.getParameter("reportParams"))));
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight){
		//GetPrintHeight_AutoCode
		int ch;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		printWidth = (printWidth-4)*100;

		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
				}
			} else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;

				if (ch==13) {
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}
			} else {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}
			}
		}

		if (height>printHeight) {
			height=height-printHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight){
		//GetPrintHeightEx_AutoCode
		int ch;
		int i;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		boolean bSplit=false;
		strSplitData[0]="";
		strSplitData[1]="";
		printWidth = (printWidth-4)*100;

		for (i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
				}
			}else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;
				if (ch==13){
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					if(i!=size-1){
						bSplit=true;
						i++;
					}
					break;
				}
			}else{
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					bSplit=true;
					break;
				}
			}
		}

		if(bSplit){
			strSplitData[0]=data.substring(0, i);
			strSplitData[1]=data.substring(i);
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|4|test002.style|보고서 (2012/11/8 11:7:12)", false);
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}
}
%>
