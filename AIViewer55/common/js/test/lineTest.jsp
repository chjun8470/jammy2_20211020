<%
/************************************************************************************
Generated by AIDesigner 5.5.0.7
************************************************************************************
보고서 제목 : 보고서 (2013/1/11 11:36:20)
작성일 : 2013년1월11일 11시36분20초
작성자 :
************************************************************************************/
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page contentType="text/html; charset=utf-8" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>
<%@ page import="com.activeintra.util.uds.*" %>


<%
Object[] userObj = null;

String reportMode=request.getParameter("reportMode");
String reportParams=request.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL") || reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext,request,response,userObj);
handler.service(out);
handler = null;
%>

<%!
private Logger logger = Logger.getLogger("lineTest.jsp");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";

	//-----데이터 변수 선언-----
	String sheet10_D5;
	String sheet10_D6;
	String sheet10_A9;
	String sheet10_B9;
	String sheet10_C9;
	String sheet10_D9;
	String sheet10_E9;
	String sheet10_F9;
	String sheet10_G9;
	String sheet10_H9;
	String sheet10_I9;
	String sheet10_J9;
	String sheet10_K9;
	String sheet10_L9;
	String sheet10_A10;
	String sheet10_B10;
	String sheet10_F10;
	String sheet10_G10;
	String sheet10_H10;
	String sheet10_I10;
	String sheet10_J10;
	String sheet10_K10;
	String sheet10_L10;
	String sheet10_A11;
	String sheet10_B11;
	String sheet10_F11;
	String sheet10_G11;
	String sheet10_H11;
	String sheet10_I11;
	String sheet10_J11;
	String sheet10_K11;
	String sheet10_L11;
	String sheet10_A12;
	String sheet10_B12;
	String sheet10_F12;
	String sheet10_G12;
	String sheet10_H12;
	String sheet10_I12;
	String sheet10_J12;
	String sheet10_K12;
	String sheet10_L12;
	String sheet10_A13;
	String sheet10_B13;
	String sheet10_C13;
	String sheet10_D13;
	String sheet10_E13;
	String sheet10_F13;
	String sheet10_G13;
	String sheet10_H13;
	String sheet10_I13;
	String sheet10_J13;
	String sheet10_K13;
	String sheet10_L13;
	String sheet10_A14;
	String sheet10_B14;
	String sheet10_C14;
	String sheet10_D14;
	String sheet10_E14;
	String sheet10_F14;
	String sheet10_G14;
	String sheet10_H14;
	String sheet10_I14;
	String sheet10_J14;
	String sheet10_K14;
	String sheet10_L14;
	String sheet10_A15;
	String sheet10_B15;
	String sheet10_C15;
	String sheet10_D15;
	String sheet10_E15;
	String sheet10_F15;
	String sheet10_G15;
	String sheet10_K15;
	String sheet10_L15;
	String sheet10_A16;
	String sheet10_B16;
	String sheet10_C16;
	String sheet10_E16;
	String sheet10_F16;
	String sheet10_G16;
	String sheet10_K16;
	String sheet10_L16;
	String sheet10_A17;
	String sheet10_B17;
	String sheet10_C17;
	String sheet10_D17;
	String sheet10_E17;
	String sheet10_F17;
	String sheet10_G17;
	String sheet10_H17;
	String sheet10_I17;
	String sheet10_J17;
	String sheet10_K17;
	String sheet10_L17;
	String sheet10_A18;
	String sheet10_B18;
	String sheet10_C18;
	String sheet10_D18;
	String sheet10_E18;
	String sheet10_F18;
	String sheet10_G18;
	String sheet10_H18;
	String sheet10_I18;
	String sheet10_J18;
	String sheet10_A19;
	String sheet10_B19;
	String sheet10_C19;
	String sheet10_D19;
	String sheet10_E19;
	String sheet10_F19;
	String sheet10_G19;
	String sheet10_H19;
	String sheet10_I19;
	String sheet10_J19;
	String sheet10_K19;
	String sheet20_A1;
	String sheet20_B1;
	String sheet20_C1;
	String sheet20_D1;
	String sheet20_E1;
	String sheet20_F1;
	String sheet20_G1;
	String sheet20_I1;
	String sheet20_J1;
	String sheet20_K1;
	String sheet20_L1;
	String sheet20_A2;
	String sheet20_B2;
	String sheet20_F2;
	String sheet20_G2;
	String sheet20_L2;
	String sheet20_B3;
	String sheet20_C3;
	String sheet20_F3;
	String sheet20_G3;
	String sheet20_I3;
	String sheet20_L3;
	String sheet20_A4;
	String sheet20_B4;
	double sheet20_C4;
	String sheet20_F4;
	String sheet20_G4;
	double sheet20_I4;
	String sheet20_L4;
	String sheet20_A5;
	String sheet20_B5;
	String sheet20_C5;
	String sheet20_F5;
	String sheet20_G5;
	double sheet20_I5;
	String sheet20_L5;
	String sheet20_A6;
	String sheet20_B6;
	String sheet20_C6;
	String sheet20_F6;
	String sheet20_G6;
	double sheet20_I6;
	String sheet20_L6;
	String sheet20_A7;
	String sheet20_B7;
	String sheet20_C7;
	String sheet20_F7;
	String sheet20_G7;
	double sheet20_I7;
	String sheet20_L7;
	String sheet20_A8;
	String sheet20_B8;
	String sheet20_C8;
	String sheet20_F8;
	String sheet20_G8;
	double sheet20_I8;
	String sheet20_L8;
	String sheet20_A9;
	String sheet20_B9;
	String sheet20_C9;
	String sheet20_F9;
	String sheet20_G9;
	double sheet20_I9;
	String sheet20_L9;
	String sheet20_A10;
	String sheet20_B10;
	String sheet20_C10;
	String sheet20_F10;
	String sheet20_G10;
	String sheet20_H10;
	double sheet20_I10;
	String sheet20_L10;
	String sheet20_A11;
	String sheet20_B11;
	double sheet20_C11;
	String sheet20_F11;
	String sheet20_G11;
	String sheet20_H11;
	double sheet20_I11;
	String sheet20_L11;
	String sheet20_A12;
	String sheet20_B12;
	double sheet20_C12;
	String sheet20_F12;
	String sheet20_G12;
	String sheet20_L12;
	String sheet20_A13;
	String sheet20_B13;
	String sheet20_C13;
	String sheet20_F13;
	String sheet20_G13;
	String sheet20_I13;
	String sheet20_L13;
	String sheet20_A14;
	String sheet20_B14;
	String sheet20_C14;
	String sheet20_F14;
	String sheet20_G14;
	String sheet20_L14;
	String sheet20_A15;
	String sheet20_B15;
	String sheet20_C15;
	String sheet20_D15;
	String sheet20_E15;
	String sheet20_F15;
	String sheet20_G15;
	String sheet20_L15;
	String sheet20_A16;
	String sheet20_B16;
	double sheet20_C16;
	String sheet20_F16;
	String sheet20_G16;
	String sheet20_L16;
	String sheet20_A17;
	String sheet20_F17;
	String sheet20_G17;
	String sheet20_L17;
	String sheet20_A18;
	String sheet20_B18;
	String sheet20_C18;
	String sheet20_D18;
	String sheet20_E18;
	String sheet20_F18;
	String sheet20_G18;
	String sheet20_L18;
	String sheet30_A1;
	String sheet30_B1;
	String sheet30_C1;
	String sheet30_D1;
	String sheet30_E1;
	String sheet30_F1;
	String sheet30_G1;
	String sheet30_H1;
	String sheet30_I1;
	String sheet30_J1;
	String sheet30_K1;
	String sheet30_A2;
	String sheet30_B2;
	String sheet30_C2;
	String sheet30_D2;
	String sheet30_E2;
	String sheet30_F2;
	String sheet30_G2;
	String sheet30_H2;
	String sheet30_I2;
	String sheet30_J2;
	String sheet30_K2;
	String sheet30_A3;
	String sheet30_B3;
	String sheet30_C3;
	String sheet30_D3;
	String sheet30_E3;
	String sheet30_F3;
	String sheet30_G3;
	String sheet30_H3;
	String sheet30_I3;
	String sheet30_J3;
	String sheet30_K3;
	String sheet30_B4;
	long sheet30_C4;
	long sheet30_D4;
	long sheet30_E4;
	long sheet30_F4;
	long sheet30_G4;
	long sheet30_H4;
	long sheet30_I4;
	String sheet30_K4;
	String sheet30_A6;
	String sheet30_B6;
	long sheet30_C6;
	long sheet30_D6;
	long sheet30_E6;
	long sheet30_F6;
	long sheet30_G6;
	long sheet30_H6;
	long sheet30_I6;
	String sheet30_K6;
	String sheet30_A7;
	String sheet30_B7;
	String sheet30_C7;
	String sheet30_D7;
	String sheet30_E7;
	String sheet30_F7;
	String sheet30_G7;
	String sheet30_H7;
	String sheet30_I7;
	String sheet30_J7;
	String sheet30_K7;
	String sheet40_A1;
	String sheet40_B1;
	String sheet40_C1;
	String sheet40_D1;
	String sheet40_E1;
	String sheet40_F1;
	String sheet40_G1;
	String sheet40_H1;
	String sheet40_I1;
	String sheet40_J1;
	String sheet40_K1;
	String sheet40_A2;
	String sheet40_B2;
	String sheet40_C2;
	String sheet40_D2;
	String sheet40_E2;
	String sheet40_F2;
	String sheet40_G2;
	String sheet40_H2;
	String sheet40_I2;
	String sheet40_J2;
	String sheet40_K2;
	String sheet40_A3;
	String sheet40_B3;
	String sheet40_C3;
	String sheet40_D3;
	String sheet40_E3;
	String sheet40_F3;
	String sheet40_G3;
	String sheet40_H3;
	String sheet40_I3;
	String sheet40_J3;
	String sheet40_K3;
	String sheet40_A4;
	String sheet40_B4;
	long sheet40_C4;
	long sheet40_D4;
	long sheet40_E4;
	long sheet40_F4;
	long sheet40_G4;
	long sheet40_H4;
	String sheet40_K4;
	String sheet40_A6;
	String sheet40_B6;
	long sheet40_C6;
	long sheet40_D6;
	long sheet40_E6;
	long sheet40_F6;
	long sheet40_G6;
	long sheet40_H6;
	String sheet40_K6;
	String sheet40_A7;
	String sheet40_B7;
	String sheet40_C7;
	String sheet40_D7;
	String sheet40_E7;
	String sheet40_F7;
	String sheet40_G7;
	String sheet40_H7;
	String sheet40_I7;
	String sheet40_J7;
	String sheet40_K7;
	String sheet40_A8;
	String sheet40_B8;
	String sheet40_C8;
	String sheet40_D8;
	String sheet40_E8;
	String sheet40_F8;
	String sheet40_G8;
	String sheet40_H8;
	String sheet40_K8;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_POSCOICT;		//DSN POSCOICT Connection 객체
	private java.sql.Statement stat_qry_POSCO_ICT0;		//ResultSet qry_POSCO_ICT0 객체를 생성하기 위한 Statement 객체
	private ResultSet qry_POSCO_ICT0;		//ResultSet qry_POSCO_ICT0 객체
	private java.sql.Statement stat_qry_POSCO_ICT1;		//ResultSet qry_POSCO_ICT1 객체를 생성하기 위한 Statement 객체
	private ResultSet qry_POSCO_ICT1;		//ResultSet qry_POSCO_ICT1 객체
	private java.sql.Statement stat_qry_POSCO_ICT2;		//ResultSet qry_POSCO_ICT2 객체를 생성하기 위한 Statement 객체
	private ResultSet qry_POSCO_ICT2;		//ResultSet qry_POSCO_ICT2 객체
	private java.sql.Statement stat_qry_POSCO_ICT3;		//ResultSet qry_POSCO_ICT3 객체를 생성하기 위한 Statement 객체
	private ResultSet qry_POSCO_ICT3;		//ResultSet qry_POSCO_ICT3 객체
	private java.sql.Statement stat_qry_POSCO_ICT4;		//ResultSet qry_POSCO_ICT4 객체를 생성하기 위한 Statement 객체
	private ResultSet qry_POSCO_ICT4;		//ResultSet qry_POSCO_ICT4 객체

	//-----SQL 변수 선언-----
	private String sql_qry_POSCO_ICT0;		//ResultSet qry_POSCO_ICT0 객체를 생성하기 위한 쿼리문 저장
	private String sql_qry_POSCO_ICT1;		//ResultSet qry_POSCO_ICT1 객체를 생성하기 위한 쿼리문 저장
	private String sql_qry_POSCO_ICT2;		//ResultSet qry_POSCO_ICT2 객체를 생성하기 위한 쿼리문 저장
	private String sql_qry_POSCO_ICT3;		//ResultSet qry_POSCO_ICT3 객체를 생성하기 위한 쿼리문 저장
	private String sql_qry_POSCO_ICT4;		//ResultSet qry_POSCO_ICT4 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet qry_POSCO_ICT0 객체에서 필드 값을 받는 쿼리 필드 변수
	private String qry_POSCO_ICT0_SALESDATE;
	private double qry_POSCO_ICT0_TOTALCHARGEGROUPID;
	private double qry_POSCO_ICT0_CUSTOMERID;

	//ResultSet qry_POSCO_ICT1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String qry_POSCO_ICT1_CUSTOMERNM;
	private double qry_POSCO_ICT1_CUSTOMERID;
	private String qry_POSCO_ICT1_PRODUCTNAME;
	private String qry_POSCO_ICT1_USE_PERIOD;
	private String qry_POSCO_ICT1_PRINT_DATE;
	private String qry_POSCO_ICT1_PAY_DATE;
	private String qry_POSCO_ICT1_PROVIDER_REG_NO;
	private String qry_POSCO_ICT1_REG_NO;
	private double qry_POSCO_ICT1_SUPPLYAMOUNT;
	private double qry_POSCO_ICT1_ADDITIONALTAX;

	//ResultSet qry_POSCO_ICT2 객체에서 필드 값을 받는 쿼리 필드 변수
	private double qry_POSCO_ICT2_AMOUNT01;
	private double qry_POSCO_ICT2_AMOUNT02;
	private double qry_POSCO_ICT2_AMOUNT03;
	private double qry_POSCO_ICT2_AMOUNT04;
	private double qry_POSCO_ICT2_AMOUNT05;
	private double qry_POSCO_ICT2_AMOUNT06;
	private double qry_POSCO_ICT2_DISCOUNTAMOUNT;
	private double qry_POSCO_ICT2_CUTAMOUNT;

	//ResultSet qry_POSCO_ICT3 객체에서 필드 값을 받는 쿼리 필드 변수
	private double qry_POSCO_ICT3_SERVICEKIND;
	private double qry_POSCO_ICT3_COMPANYID;
	private String qry_POSCO_ICT3_COMPANYNM;
	private double qry_POSCO_ICT3_CUSTOMERID;
	private double qry_POSCO_ICT3_AMOUNT01;
	private double qry_POSCO_ICT3_AMOUNT02;
	private double qry_POSCO_ICT3_AMOUNT03;
	private double qry_POSCO_ICT3_AMOUNT04;
	private double qry_POSCO_ICT3_AMOUNT05;
	private double qry_POSCO_ICT3_AMOUNT06;
	private double qry_POSCO_ICT3_AMOUNT07;

	//ResultSet qry_POSCO_ICT4 객체에서 필드 값을 받는 쿼리 필드 변수
	private double qry_POSCO_ICT4_COMPANYID;
	private double qry_POSCO_ICT4_SERVICEKIND;
	private String qry_POSCO_ICT4_COMPANYNM;
	private double qry_POSCO_ICT4_CUSTOMERID;
	private double qry_POSCO_ICT4_AMOUNT01;
	private double qry_POSCO_ICT4_AMOUNT02;
	private double qry_POSCO_ICT4_AMOUNT03;
	private double qry_POSCO_ICT4_AMOUNT04;
	private double qry_POSCO_ICT4_AMOUNT05;
	private double qry_POSCO_ICT4_AMOUNT06;

	//파라미터 변수 선언
	String service_Param;
	String salesdate_Param;
	String totalchargeid_Param;
	String customerid_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext,HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.pageContext=pageContext;
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "0 14 0 14");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("\r");
			StackTraceElement[] trace = e.getStackTrace();
			for(int i = 0; i < trace.length; i++) {
				out.println(trace[i]);
			}
			out.print("\r");
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			//DataSet Close
			cleanup(qry_POSCO_ICT4, stat_qry_POSCO_ICT4, null, null);
			cleanup(qry_POSCO_ICT3, stat_qry_POSCO_ICT3, null, null);
			cleanup(qry_POSCO_ICT2, stat_qry_POSCO_ICT2, null, null);
			cleanup(qry_POSCO_ICT1, stat_qry_POSCO_ICT1, null, null);
			cleanup(qry_POSCO_ICT0, stat_qry_POSCO_ICT0, null, null);
			cleanup(null, null, null, conn_POSCOICT);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "0 14 0 14");
		initSheetVariant(18, 27, 579, 818, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//배경 이미지 함수 호출
		getBgImageScript(10);

		//밴드 함수 호출
		getScriptFromv11(true, true);    //Void 밴드 호출
		getScriptFromVoidBand1(true, false);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet4   FRAME=0 함수 호출
		executeSheet40();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(18, 27, 579, 818, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv21(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(18, 27, 579, 818, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromListBand3(true);    //반복 밴드 호출
		getScriptFromv31(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet4   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet40( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(18, 27, 579, 818, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromListBand4(true);    //반복 밴드 호출
		getScriptFromv41(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----v11 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : v11
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv11(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=160;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet qry_POSCO_ICT1 객체의 생성
			if(qry_POSCO_ICT1==null){
				qry_POSCO_ICT1 = stat_qry_POSCO_ICT1.executeQuery(sql_qry_POSCO_ICT1.toString());
			}else{
				qry_POSCO_ICT1.beforeFirst();
			}

			//데이터 fetch
			if(qry_POSCO_ICT1.next()){
				setFieldVariableFromqry_POSCO_ICT1();	//ResultSet qry_POSCO_ICT1에서 필드 값 설정
			}else{
				setFieldInitFromqry_POSCO_ICT1();	//ResultSet qry_POSCO_ICT1의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_D5="";
			sheet10_D6="";

			//데이터 변수 할당
			sheet10_D5=qry_POSCO_ICT1_CUSTOMERNM;
			sheet10_D5=qry_POSCO_ICT1_CUSTOMERNM+" 고객님의";
			sheet10_D6=qry_POSCO_ICT1_PAY_DATE;
			sheet10_D6=qry_POSCO_ICT1_PAY_DATE.substring(0,4)+"년 "+qry_POSCO_ICT1_PAY_DATE.substring(5,7)+"월 이용요금 청구내역 입니다.";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv11();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----VoidBand1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : VoidBand1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromVoidBand1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=151;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptVoidBand1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v21 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : v21
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv21(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=218;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet qry_POSCO_ICT1 객체의 생성
			if(qry_POSCO_ICT1==null){
				qry_POSCO_ICT1 = stat_qry_POSCO_ICT1.executeQuery(sql_qry_POSCO_ICT1.toString());
			}else{
				qry_POSCO_ICT1.beforeFirst();
			}
			//ResultSet qry_POSCO_ICT2 객체의 생성
			if(qry_POSCO_ICT2==null){
				qry_POSCO_ICT2 = stat_qry_POSCO_ICT2.executeQuery(sql_qry_POSCO_ICT2.toString());
			}else{
				qry_POSCO_ICT2.beforeFirst();
			}

			//데이터 fetch
			if(qry_POSCO_ICT1.next()){
				setFieldVariableFromqry_POSCO_ICT1();	//ResultSet qry_POSCO_ICT1에서 필드 값 설정
			}else{
				setFieldInitFromqry_POSCO_ICT1();	//ResultSet qry_POSCO_ICT1의 필드 값 초기화
			}
			if(qry_POSCO_ICT2.next()){
				setFieldVariableFromqry_POSCO_ICT2();	//ResultSet qry_POSCO_ICT2에서 필드 값 설정
			}else{
				setFieldInitFromqry_POSCO_ICT2();	//ResultSet qry_POSCO_ICT2의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_C3="";
			sheet20_C4=0;
			sheet20_I4=0;
			sheet20_C5="";
			sheet20_I5=0;
			sheet20_C6="";
			sheet20_I6=0;
			sheet20_C7="";
			sheet20_I7=0;
			sheet20_C8="";
			sheet20_I8=0;
			sheet20_C9="";
			sheet20_I9=0;
			sheet20_C10="";
			sheet20_I10=0;
			sheet20_C11=0;
			sheet20_I11=0;
			sheet20_C12=0;
			sheet20_C16=0;

			//데이터 변수 할당
			sheet20_C3=qry_POSCO_ICT1_CUSTOMERNM;
			sheet20_C4=qry_POSCO_ICT1_CUSTOMERID;
			sheet20_I4=qry_POSCO_ICT2_AMOUNT01;
			sheet20_C5=qry_POSCO_ICT1_PRODUCTNAME;
			sheet20_I5=qry_POSCO_ICT2_AMOUNT02;
			sheet20_C6=qry_POSCO_ICT1_USE_PERIOD;
			sheet20_I6=qry_POSCO_ICT2_AMOUNT03;
			sheet20_C7=qry_POSCO_ICT1_PRINT_DATE;
			sheet20_I7=qry_POSCO_ICT2_AMOUNT04;
			sheet20_C8=qry_POSCO_ICT1_PAY_DATE;
			sheet20_I8=qry_POSCO_ICT2_AMOUNT05;
			sheet20_C9=qry_POSCO_ICT1_PROVIDER_REG_NO;
			sheet20_I9=qry_POSCO_ICT2_AMOUNT06;
			sheet20_C10=qry_POSCO_ICT1_REG_NO;
			sheet20_I10=qry_POSCO_ICT2_DISCOUNTAMOUNT;
			sheet20_C11=qry_POSCO_ICT1_SUPPLYAMOUNT;
			sheet20_I11=qry_POSCO_ICT2_CUTAMOUNT;
			sheet20_C12=qry_POSCO_ICT1_ADDITIONALTAX;
			sheet20_C16=qry_POSCO_ICT1_SUPPLYAMOUNT;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv21();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----HeaderBand3 RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : HeaderBand3
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromHeaderBand3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=35;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptHeaderBand3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----IfBand3 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : IfBand3
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromIfBand3(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=17;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet30_C6=0L;
			sheet30_D6=0L;
			sheet30_E6=0L;
			sheet30_F6=0L;
			sheet30_G6=0L;
			sheet30_H6=0L;
			sheet30_I6=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromHeaderBand3(false, true);	//반복 헤더 호출
				}
				writeScriptIfBand3();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet30_C6=0L;
				sheet30_D6=0L;
				sheet30_E6=0L;
				sheet30_F6=0L;
				sheet30_G6=0L;
				sheet30_H6=0L;
				sheet30_I6=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet30_C6=(long)SUM(sheet30_C4, sheet30_C6);
			sheet30_D6=(long)SUM(sheet30_D4, sheet30_D6);
			sheet30_E6=(long)SUM(sheet30_E4, sheet30_E6);
			sheet30_F6=(long)SUM(sheet30_F4, sheet30_F6);
			sheet30_G6=(long)SUM(sheet30_G4, sheet30_G6);
			sheet30_H6=(long)SUM(sheet30_H4, sheet30_H6);
			sheet30_I6=(long)SUM(sheet30_I4, sheet30_I6);
		}   //end if(!bIsLast)
	}

	//----v VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : v
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv(boolean bIsFirst, boolean bIsPrint, int nRepeatNum) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=15;    //밴드 출력 높이
		int i;    //for문 카운트 변수

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//반복 횟수 루프문 시작
			for(i=0; i<nRepeatNum; i++){
				//스크립트 출력 영역 검사
				if(isPageSkip(nYCurPos+nBandHeight)){
					nYCurPos=nYEndPos;
					break;
				}

				//스크립트 출력 함수 호출
				writeScriptv();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}    //반복 횟수 루프문 종료
		}   //end if(bIsPrint)
	}

	//-----ListBand3 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet3   FRAME=Frame0
	//-----밴드 이름 : ListBand3
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromListBand3(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=15;    //밴드 출력 높이
		boolean bIsFirst=true;
		int nRepeatNum=0;    //반복 횟수 변수
		boolean bIsTrue_IfBand3=false;   //IfBand3 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet30_B4="";
		sheet30_C4=0L;
		sheet30_D4=0L;
		sheet30_E4=0L;
		sheet30_F4=0L;
		sheet30_G4=0L;
		sheet30_H4=0L;
		sheet30_I4=0L;

		//DataSet 객체 생성
		//ResultSet qry_POSCO_ICT3 객체의 생성
		if(qry_POSCO_ICT3==null){
			qry_POSCO_ICT3 = stat_qry_POSCO_ICT3.executeQuery(sql_qry_POSCO_ICT3.toString());
		}else{
			qry_POSCO_ICT3.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFromHeaderBand3(bIsFirst, true);	//반복 헤더 호출

		while(qry_POSCO_ICT3.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromqry_POSCO_ICT3();	//RecordSet qry_POSCO_ICT3에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_IfBand3=false;    //IfBand3 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet30_B4=qry_POSCO_ICT3_COMPANYNM;
			sheet30_C4=(long)qry_POSCO_ICT3_AMOUNT01;
			sheet30_D4=(long)qry_POSCO_ICT3_AMOUNT02;
			sheet30_E4=(long)qry_POSCO_ICT3_AMOUNT03;
			sheet30_F4=(long)qry_POSCO_ICT3_AMOUNT04;
			sheet30_G4=(long)qry_POSCO_ICT3_AMOUNT05;
			sheet30_H4=(long)qry_POSCO_ICT3_AMOUNT06;
			sheet30_I4=(long)qry_POSCO_ICT3_AMOUNT07;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromIfBand3(bIsFirst, false, bIsTrue_IfBand3, true);   //IfBand3 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight) || nRepeatNum==7){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					nRepeatNum=0;
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromHeaderBand3(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptListBand3();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
			nRepeatNum=nRepeatNum+1;	//출력 횟수 증가
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			/*

			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromIfBand3(bIsFirst, true, true, true);   //IfBand3 조건 밴드 호출

			*/
		}   //루프 외부 end if(bIsFirst)

		//루프 외부 자식 밴드 호출
		getScriptFromv(true, true, 7-nRepeatNum);

		//루프 외부 조건밴드 및 스타일 함수 호출
		getScriptFromIfBand3(bIsFirst, true, true, true);   //IfBand3 조건 밴드 호출
	}

	//----v31 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : v31
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv31(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=5;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv31();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----HeaderBand4 RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : HeaderBand4
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromHeaderBand4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=35;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptHeaderBand4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----IfBand4 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : IfBand4
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromIfBand4(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=17;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet40_C6=0L;
			sheet40_D6=0L;
			sheet40_E6=0L;
			sheet40_F6=0L;
			sheet40_G6=0L;
			sheet40_H6=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
					getScriptFromHeaderBand4(false, true);	//반복 헤더 호출
				}
				writeScriptIfBand4();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet40_C6=0L;
				sheet40_D6=0L;
				sheet40_E6=0L;
				sheet40_F6=0L;
				sheet40_G6=0L;
				sheet40_H6=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet40_C6=(long)SUM(sheet40_C4, sheet40_C6);
			sheet40_D6=(long)SUM(sheet40_D4, sheet40_D6);
			sheet40_E6=(long)SUM(sheet40_E4, sheet40_E6);
			sheet40_F6=(long)SUM(sheet40_F4, sheet40_F6);
			sheet40_G6=(long)SUM(sheet40_G4, sheet40_G6);
			sheet40_H6=(long)SUM(sheet40_H4, sheet40_H6);
		}   //end if(!bIsLast)
	}

	//----v42 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : v42
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv42(boolean bIsFirst, boolean bIsPrint, int nRepeatNum) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=15;    //밴드 출력 높이
		int i;    //for문 카운트 변수

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//반복 횟수 루프문 시작
			for(i=0; i<nRepeatNum; i++){
				//스크립트 출력 영역 검사
				if(isPageSkip(nYCurPos+nBandHeight)){
					nYCurPos=nYEndPos;
					break;
				}

				//스크립트 출력 함수 호출
				writeScriptv42();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}    //반복 횟수 루프문 종료
		}   //end if(bIsPrint)
	}

	//-----ListBand4 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet4   FRAME=Frame0
	//-----밴드 이름 : ListBand4
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromListBand4(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=15;    //밴드 출력 높이
		boolean bIsFirst=true;
		int nRepeatNum=0;    //반복 횟수 변수
		boolean bIsTrue_IfBand4=false;   //IfBand4 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet40_B4="";
		sheet40_C4=0L;
		sheet40_D4=0L;
		sheet40_E4=0L;
		sheet40_F4=0L;
		sheet40_G4=0L;
		sheet40_H4=0L;

		//DataSet 객체 생성
		//ResultSet qry_POSCO_ICT4 객체의 생성
		if(qry_POSCO_ICT4==null){
			qry_POSCO_ICT4 = stat_qry_POSCO_ICT4.executeQuery(sql_qry_POSCO_ICT4.toString());
		}else{
			qry_POSCO_ICT4.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFromHeaderBand4(bIsFirst, true);	//반복 헤더 호출

		while(qry_POSCO_ICT4.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromqry_POSCO_ICT4();	//RecordSet qry_POSCO_ICT4에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_IfBand4=false;    //IfBand4 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet40_B4=qry_POSCO_ICT4_COMPANYNM;
			sheet40_C4=(long)qry_POSCO_ICT4_AMOUNT01;
			sheet40_D4=(long)qry_POSCO_ICT4_AMOUNT02;
			sheet40_E4=(long)qry_POSCO_ICT4_AMOUNT03;
			sheet40_F4=(long)qry_POSCO_ICT4_AMOUNT04;
			sheet40_G4=(long)qry_POSCO_ICT4_AMOUNT05;
			sheet40_H4=(long)qry_POSCO_ICT4_AMOUNT06;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromIfBand4(bIsFirst, false, bIsTrue_IfBand4, true);   //IfBand4 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight) || nRepeatNum==7){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					nRepeatNum=0;
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromHeaderBand4(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptListBand4();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
			nRepeatNum=nRepeatNum+1;	//출력 횟수 증가
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			/*

			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromIfBand4(bIsFirst, true, true, true);   //IfBand4 조건 밴드 호출

			*/
		}   //루프 외부 end if(bIsFirst)

		//루프 외부 자식 밴드 호출
		getScriptFromv42(true, true, 7-nRepeatNum);

		//루프 외부 조건밴드 및 스타일 함수 호출
		getScriptFromIfBand4(bIsFirst, true, true, true);   //IfBand4 조건 밴드 호출
	}

	//----v41 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : v41
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv41(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=63;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv41();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----v11 스크립트 문 출력 함수----
	private void writeScriptv11( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+95, nYCurPos+80, 255, 20, sheet10_D5, "sheet10_D5", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+95, nYCurPos+100, 255, 20, sheet10_D6, "sheet10_D6", "cell_style_0");
		objectWrite(DRAW_OBJECT, nXCurPos+1, nYCurPos+1, 560, 48, "http://localhost:8080/AIViewer55/image/bill_top_20130227.gif", "AI_IMAGE_OBJ2", "draw_style_1");
	}

	//----VoidBand1 스크립트 문 출력 함수----
	private void writeScriptVoidBand1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 5, 5, sheet10_A9, "sheet10_A9", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 50, 5, sheet10_B9, "sheet10_B9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+55, nYCurPos, 40, 5, sheet10_C9, "sheet10_C9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+95, nYCurPos, 50, 5, sheet10_D9, "sheet10_D9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+145, nYCurPos, 27, 5, sheet10_E9, "sheet10_E9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+172, nYCurPos, 128, 5, sheet10_F9, "sheet10_F9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos, 50, 5, sheet10_G9, "sheet10_G9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos, 50, 5, sheet10_H9, "sheet10_H9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+400, nYCurPos, 35, 5, sheet10_I9, "sheet10_I9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+435, nYCurPos, 30, 5, sheet10_J9, "sheet10_J9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos, 50, 5, sheet10_K9, "sheet10_K9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+515, nYCurPos, 36, 5, sheet10_L9, "sheet10_L9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+5, 5, 21, sheet10_A10, "sheet10_A10", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+5, 167, 21, sheet10_B10, "sheet10_B10", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+172, nYCurPos+5, 128, 21, sheet10_F10, "sheet10_F10", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+5, 50, 21, sheet10_G10, "sheet10_G10", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos+5, 50, 21, sheet10_H10, "sheet10_H10", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+400, nYCurPos+5, 35, 21, sheet10_I10, "sheet10_I10", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+435, nYCurPos+5, 30, 21, sheet10_J10, "sheet10_J10", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos+5, 50, 21, sheet10_K10, "sheet10_K10", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+515, nYCurPos+5, 36, 21, sheet10_L10, "sheet10_L10", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+26, 5, 15, sheet10_A11, "sheet10_A11", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+26, 167, 15, sheet10_B11, "sheet10_B11", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+172, nYCurPos+26, 128, 15, sheet10_F11, "sheet10_F11", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+26, 50, 15, sheet10_G11, "sheet10_G11", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos+26, 50, 15, sheet10_H11, "sheet10_H11", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+400, nYCurPos+26, 35, 15, sheet10_I11, "sheet10_I11", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+435, nYCurPos+26, 30, 15, sheet10_J11, "sheet10_J11", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos+26, 50, 15, sheet10_K11, "sheet10_K11", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+515, nYCurPos+26, 36, 15, sheet10_L11, "sheet10_L11", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+41, 5, 15, sheet10_A12, "sheet10_A12", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+41, 167, 15, sheet10_B12, "sheet10_B12", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+172, nYCurPos+41, 128, 15, sheet10_F12, "sheet10_F12", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+41, 50, 15, sheet10_G12, "sheet10_G12", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos+41, 50, 15, sheet10_H12, "sheet10_H12", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+400, nYCurPos+41, 35, 15, sheet10_I12, "sheet10_I12", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+435, nYCurPos+41, 30, 15, sheet10_J12, "sheet10_J12", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos+41, 50, 15, sheet10_K12, "sheet10_K12", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+515, nYCurPos+41, 36, 15, sheet10_L12, "sheet10_L12", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+56, 5, 10, sheet10_A13, "sheet10_A13", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+56, 50, 10, sheet10_B13, "sheet10_B13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+55, nYCurPos+56, 40, 10, sheet10_C13, "sheet10_C13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+95, nYCurPos+56, 50, 10, sheet10_D13, "sheet10_D13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+145, nYCurPos+56, 27, 10, sheet10_E13, "sheet10_E13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+172, nYCurPos+56, 128, 10, sheet10_F13, "sheet10_F13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+56, 50, 10, sheet10_G13, "sheet10_G13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos+56, 50, 10, sheet10_H13, "sheet10_H13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+400, nYCurPos+56, 35, 10, sheet10_I13, "sheet10_I13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+435, nYCurPos+56, 30, 10, sheet10_J13, "sheet10_J13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos+56, 50, 10, sheet10_K13, "sheet10_K13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+515, nYCurPos+56, 36, 10, sheet10_L13, "sheet10_L13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+66, 5, 10, sheet10_A14, "sheet10_A14", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+66, 50, 10, sheet10_B14, "sheet10_B14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+55, nYCurPos+66, 40, 10, sheet10_C14, "sheet10_C14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+95, nYCurPos+66, 50, 10, sheet10_D14, "sheet10_D14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+145, nYCurPos+66, 27, 10, sheet10_E14, "sheet10_E14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+172, nYCurPos+66, 128, 10, sheet10_F14, "sheet10_F14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+66, 50, 10, sheet10_G14, "sheet10_G14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos+66, 50, 10, sheet10_H14, "sheet10_H14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+400, nYCurPos+66, 35, 10, sheet10_I14, "sheet10_I14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+435, nYCurPos+66, 30, 10, sheet10_J14, "sheet10_J14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos+66, 50, 10, sheet10_K14, "sheet10_K14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+515, nYCurPos+66, 36, 10, sheet10_L14, "sheet10_L14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+76, 5, 15, sheet10_A15, "sheet10_A15", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+76, 50, 15, sheet10_B15, "sheet10_B15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+55, nYCurPos+76, 40, 15, sheet10_C15, "sheet10_C15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+95, nYCurPos+76, 50, 15, sheet10_D15, "sheet10_D15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+145, nYCurPos+76, 27, 15, sheet10_E15, "sheet10_E15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+172, nYCurPos+76, 128, 15, sheet10_F15, "sheet10_F15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+76, 165, 15, sheet10_G15, "sheet10_G15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos+76, 50, 15, sheet10_K15, "sheet10_K15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+515, nYCurPos+76, 36, 15, sheet10_L15, "sheet10_L15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+91, 5, 15, sheet10_A16, "sheet10_A16", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+91, 50, 15, sheet10_B16, "sheet10_B16", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+55, nYCurPos+91, 40, 15, sheet10_C16, "sheet10_C16", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+145, nYCurPos+91, 27, 15, sheet10_E16, "sheet10_E16", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+172, nYCurPos+91, 128, 15, sheet10_F16, "sheet10_F16", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+91, 165, 15, sheet10_G16, "sheet10_G16", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos+91, 50, 15, sheet10_K16, "sheet10_K16", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+515, nYCurPos+91, 36, 15, sheet10_L16, "sheet10_L16", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+106, 5, 15, sheet10_A17, "sheet10_A17", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+106, 50, 15, sheet10_B17, "sheet10_B17", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+55, nYCurPos+106, 40, 15, sheet10_C17, "sheet10_C17", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+95, nYCurPos+106, 50, 15, sheet10_D17, "sheet10_D17", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+145, nYCurPos+106, 27, 15, sheet10_E17, "sheet10_E17", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+172, nYCurPos+106, 128, 15, sheet10_F17, "sheet10_F17", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+106, 50, 15, sheet10_G17, "sheet10_G17", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos+106, 50, 15, sheet10_H17, "sheet10_H17", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+400, nYCurPos+106, 35, 15, sheet10_I17, "sheet10_I17", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+435, nYCurPos+106, 30, 15, sheet10_J17, "sheet10_J17", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos+106, 50, 15, sheet10_K17, "sheet10_K17", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+515, nYCurPos+106, 36, 15, sheet10_L17, "sheet10_L17", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+121, 5, 15, sheet10_A18, "sheet10_A18", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+121, 50, 15, sheet10_B18, "sheet10_B18", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+55, nYCurPos+121, 40, 15, sheet10_C18, "sheet10_C18", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+95, nYCurPos+121, 50, 15, sheet10_D18, "sheet10_D18", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+145, nYCurPos+121, 27, 15, sheet10_E18, "sheet10_E18", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+172, nYCurPos+121, 128, 15, sheet10_F18, "sheet10_F18", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+121, 50, 15, sheet10_G18, "sheet10_G18", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos+121, 50, 15, sheet10_H18, "sheet10_H18", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+400, nYCurPos+121, 35, 15, sheet10_I18, "sheet10_I18", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+435, nYCurPos+121, 116, 15, sheet10_J18, "sheet10_J18", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+136, 5, 15, sheet10_A19, "sheet10_A19", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+136, 50, 15, sheet10_B19, "sheet10_B19", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+55, nYCurPos+136, 40, 15, sheet10_C19, "sheet10_C19", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+95, nYCurPos+136, 50, 15, sheet10_D19, "sheet10_D19", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+145, nYCurPos+136, 27, 15, sheet10_E19, "sheet10_E19", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+172, nYCurPos+136, 128, 15, sheet10_F19, "sheet10_F19", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+136, 50, 15, sheet10_G19, "sheet10_G19", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos+136, 50, 15, sheet10_H19, "sheet10_H19", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+400, nYCurPos+136, 35, 15, sheet10_I19, "sheet10_I19", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+435, nYCurPos+136, 30, 15, sheet10_J19, "sheet10_J19", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos+136, 86, 15, sheet10_K19, "sheet10_K19", "cell_style_6");
	}

	//----v21 스크립트 문 출력 함수----
	private void writeScriptv21( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 5, 5, sheet20_A1, "sheet20_A1", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 133, 5, sheet20_B1, "sheet20_B1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos, 40, 5, sheet20_C1, "sheet20_C1", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+178, nYCurPos, 40, 5, sheet20_D1, "sheet20_D1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos, 40, 5, sheet20_E1, "sheet20_E1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos, 53, 5, sheet20_F1, "sheet20_F1", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos, 133, 5, sheet20_G1, "sheet20_G1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos, 35, 5, sheet20_I1, "sheet20_I1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+490, nYCurPos, 35, 5, sheet20_J1, "sheet20_J1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+525, nYCurPos, 35, 5, sheet20_K1, "sheet20_K1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+5, 5, 13, sheet20_A2, "sheet20_A2", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+5, 253, 13, sheet20_B2, "sheet20_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+5, 53, 13, sheet20_F2, "sheet20_F2", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+5, 249, 13, sheet20_G2, "sheet20_G2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+18, 133, 13, sheet20_B3, "sheet20_B3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+18, 120, 13, sheet20_C3, "sheet20_C3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+18, 53, 13, sheet20_F3, "sheet20_F3", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+18, 133, 13, sheet20_G3, "sheet20_G3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+18, 105, 13, sheet20_I3, "sheet20_I3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+31, 5, 13, sheet20_A4, "sheet20_A4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+31, 133, 13, sheet20_B4, "sheet20_B4", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+31, 120, 13, String.valueOf(sheet20_C4), "sheet20_C4", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+31, 53, 13, sheet20_F4, "sheet20_F4", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+31, 133, 13, sheet20_G4, "sheet20_G4", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+31, 105, 13, String.valueOf(sheet20_I4), "sheet20_I4", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+44, 5, 13, sheet20_A5, "sheet20_A5", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+44, 133, 13, sheet20_B5, "sheet20_B5", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+44, 120, 13, sheet20_C5, "sheet20_C5", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+44, 53, 13, sheet20_F5, "sheet20_F5", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+44, 133, 13, sheet20_G5, "sheet20_G5", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+44, 105, 13, String.valueOf(sheet20_I5), "sheet20_I5", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+57, 5, 13, sheet20_A6, "sheet20_A6", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+57, 133, 13, sheet20_B6, "sheet20_B6", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+57, 120, 13, sheet20_C6, "sheet20_C6", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+57, 53, 13, sheet20_F6, "sheet20_F6", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+57, 133, 13, sheet20_G6, "sheet20_G6", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+57, 105, 13, String.valueOf(sheet20_I6), "sheet20_I6", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+70, 5, 13, sheet20_A7, "sheet20_A7", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+70, 133, 13, sheet20_B7, "sheet20_B7", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+70, 120, 13, sheet20_C7, "sheet20_C7", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+70, 53, 13, sheet20_F7, "sheet20_F7", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+70, 133, 13, sheet20_G7, "sheet20_G7", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+70, 105, 13, String.valueOf(sheet20_I7), "sheet20_I7", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+83, 5, 13, sheet20_A8, "sheet20_A8", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+83, 133, 13, sheet20_B8, "sheet20_B8", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+83, 120, 13, sheet20_C8, "sheet20_C8", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+83, 53, 13, sheet20_F8, "sheet20_F8", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+83, 133, 13, sheet20_G8, "sheet20_G8", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+83, 105, 13, String.valueOf(sheet20_I8), "sheet20_I8", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+96, 5, 13, sheet20_A9, "sheet20_A9", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+96, 133, 13, sheet20_B9, "sheet20_B9", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+96, 120, 13, sheet20_C9, "sheet20_C9", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+96, 53, 13, sheet20_F9, "sheet20_F9", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+96, 133, 13, sheet20_G9, "sheet20_G9", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+96, 105, 13, String.valueOf(sheet20_I9), "sheet20_I9", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+109, 5, 13, sheet20_A10, "sheet20_A10", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+109, 133, 13, sheet20_B10, "sheet20_B10", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+109, 120, 13, sheet20_C10, "sheet20_C10", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+109, 53, 13, sheet20_F10, "sheet20_F10", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+109, 133, 13, sheet20_G10, "sheet20_G10", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+444, nYCurPos+109, 11, 13, sheet20_H10, "sheet20_H10", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+109, 105, 13, String.valueOf(sheet20_I10), "sheet20_I10", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+122, 5, 13, sheet20_A11, "sheet20_A11", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+122, 133, 13, sheet20_B11, "sheet20_B11", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+122, 120, 13, String.valueOf(sheet20_C11), "sheet20_C11", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+122, 53, 13, sheet20_F11, "sheet20_F11", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+122, 133, 13, sheet20_G11, "sheet20_G11", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+444, nYCurPos+122, 11, 13, sheet20_H11, "sheet20_H11", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+122, 105, 13, String.valueOf(sheet20_I11), "sheet20_I11", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+135, 5, 13, sheet20_A12, "sheet20_A12", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+135, 133, 13, sheet20_B12, "sheet20_B12", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+135, 120, 13, String.valueOf(sheet20_C12), "sheet20_C12", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+135, 53, 13, sheet20_F12, "sheet20_F12", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+135, 144, 13, sheet20_G12, "sheet20_G12", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+148, 5, 13, sheet20_A13, "sheet20_A13", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+148, 133, 13, sheet20_B13, "sheet20_B13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+148, 120, 13, sheet20_C13, "sheet20_C13", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+148, 53, 13, sheet20_F13, "sheet20_F13", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+148, 133, 13, sheet20_G13, "sheet20_G13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+148, 35, 13, sheet20_I13, "sheet20_I13", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+161, 5, 13, sheet20_A14, "sheet20_A14", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+161, 133, 13, sheet20_B14, "sheet20_B14", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+161, 40, 13, sheet20_C14, "sheet20_C14", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+161, 53, 13, sheet20_F14, "sheet20_F14", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+161, 249, 13, sheet20_G14, "sheet20_G14", "cell_style_18");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+174, 5, 13, sheet20_A15, "sheet20_A15", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+174, 133, 13, sheet20_B15, "sheet20_B15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+174, 40, 13, sheet20_C15, "sheet20_C15", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+178, nYCurPos+174, 40, 13, sheet20_D15, "sheet20_D15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos+174, 40, 13, sheet20_E15, "sheet20_E15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+174, 53, 13, sheet20_F15, "sheet20_F15", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+174, 249, 13, sheet20_G15, "sheet20_G15", "cell_style_19");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+187, 5, 13, sheet20_A16, "sheet20_A16", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+187, 133, 26, sheet20_B16, "sheet20_B16", "cell_style_20");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+187, 120, 26, String.valueOf(sheet20_C16), "sheet20_C16", "cell_style_21");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+187, 53, 13, sheet20_F16, "sheet20_F16", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+187, 249, 13, sheet20_G16, "sheet20_G16", "cell_style_19");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+200, 5, 13, sheet20_A17, "sheet20_A17", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+200, 53, 13, sheet20_F17, "sheet20_F17", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+200, 249, 13, sheet20_G17, "sheet20_G17", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+213, 5, 5, sheet20_A18, "sheet20_A18", "cell_style_23");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+213, 133, 5, sheet20_B18, "sheet20_B18", "cell_style_24");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos+213, 40, 5, sheet20_C18, "sheet20_C18", "cell_style_25");
		objectWrite(CELL_OBJECT, nXCurPos+178, nYCurPos+213, 40, 5, sheet20_D18, "sheet20_D18", "cell_style_24");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos+213, 40, 5, sheet20_E18, "sheet20_E18", "cell_style_24");
		objectWrite(CELL_OBJECT, nXCurPos+258, nYCurPos+213, 53, 5, sheet20_F18, "sheet20_F18", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+311, nYCurPos+213, 249, 5, sheet20_G18, "sheet20_G18", "cell_style_24");
	}

	//----HeaderBand3 스크립트 문 출력 함수----
	private void writeScriptHeaderBand3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 5, 5, sheet30_A1, "sheet30_A1", "cell_style_23");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 99, 5, sheet30_B1, "sheet30_B1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos, 57, 5, sheet30_C1, "sheet30_C1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos, 57, 5, sheet30_D1, "sheet30_D1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos, 57, 5, sheet30_E1, "sheet30_E1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos, 57, 5, sheet30_F1, "sheet30_F1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos, 57, 5, sheet30_G1, "sheet30_G1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos, 57, 5, sheet30_H1, "sheet30_H1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos, 57, 5, sheet30_I1, "sheet30_I1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos, 57, 5, sheet30_J1, "sheet30_J1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+5, 5, 15, sheet30_A2, "sheet30_A2", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+5, 99, 15, sheet30_B2, "sheet30_B2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos+5, 57, 15, sheet30_C2, "sheet30_C2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos+5, 57, 15, sheet30_D2, "sheet30_D2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos+5, 57, 15, sheet30_E2, "sheet30_E2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos+5, 57, 15, sheet30_F2, "sheet30_F2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos+5, 57, 15, sheet30_G2, "sheet30_G2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos+5, 57, 15, sheet30_H2, "sheet30_H2", "cell_style_27");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos+5, 57, 15, sheet30_I2, "sheet30_I2", "cell_style_27");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos+5, 57, 15, sheet30_J2, "sheet30_J2", "cell_style_27");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+20, 5, 15, sheet30_A3, "sheet30_A3", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+20, 99, 15, sheet30_B3, "sheet30_B3", "cell_style_28");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos+20, 57, 15, sheet30_C3, "sheet30_C3", "cell_style_29");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos+20, 57, 15, sheet30_D3, "sheet30_D3", "cell_style_29");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos+20, 57, 15, sheet30_E3, "sheet30_E3", "cell_style_29");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos+20, 57, 15, sheet30_F3, "sheet30_F3", "cell_style_29");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos+20, 57, 15, sheet30_G3, "sheet30_G3", "cell_style_29");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos+20, 57, 15, sheet30_H3, "sheet30_H3", "cell_style_29");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos+20, 57, 15, sheet30_I3, "sheet30_I3", "cell_style_29");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos+20, 57, 15, sheet30_J3, "sheet30_J3", "cell_style_29");
	}

	//----IfBand3 스크립트 문 출력 함수----
	private void writeScriptIfBand3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 5, 17, sheet30_A6, "sheet30_A6", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 99, 17, sheet30_B6, "sheet30_B6", "cell_style_34");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos, 57, 17, String.valueOf(sheet30_C6), "sheet30_C6", "cell_style_35");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos, 57, 17, String.valueOf(sheet30_D6), "sheet30_D6", "cell_style_35");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos, 57, 17, String.valueOf(sheet30_E6), "sheet30_E6", "cell_style_35");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos, 57, 17, String.valueOf(sheet30_F6), "sheet30_F6", "cell_style_35");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos, 57, 17, String.valueOf(sheet30_G6), "sheet30_G6", "cell_style_35");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos, 57, 17, String.valueOf(sheet30_H6), "sheet30_H6", "cell_style_35");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos, 57, 17, String.valueOf(sheet30_I6), "sheet30_I6", "cell_style_36");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos, 57, 17, "", "sheet30_J6", "cell_style_36");
	}

	//----v 스크립트 문 출력 함수----
	private void writeScriptv( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 99, 15, "", "sheet30_B5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos, 57, 15, "", "sheet30_C5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos, 57, 15, "", "sheet30_D5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos, 57, 15, "", "sheet30_E5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos, 57, 15, "", "sheet30_F5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos, 57, 15, "", "sheet30_G5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos, 57, 15, "", "sheet30_H5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos, 57, 15, "", "sheet30_I5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos, 57, 15, "", "sheet30_J5", "cell_style_33");
	}

	//----ListBand3 스크립트 문 출력 함수----
	private void writeScriptListBand3(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 99, 15, sheet30_B4, "sheet30_B4", "cell_style_30");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos, 57, 15, String.valueOf(sheet30_C4), "sheet30_C4", "cell_style_31");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos, 57, 15, String.valueOf(sheet30_D4), "sheet30_D4", "cell_style_31");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos, 57, 15, String.valueOf(sheet30_E4), "sheet30_E4", "cell_style_31");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos, 57, 15, String.valueOf(sheet30_F4), "sheet30_F4", "cell_style_31");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos, 57, 15, String.valueOf(sheet30_G4), "sheet30_G4", "cell_style_31");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos, 57, 15, String.valueOf(sheet30_H4), "sheet30_H4", "cell_style_31");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos, 57, 15, String.valueOf(sheet30_I4), "sheet30_I4", "cell_style_32");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos, 57, 15, "", "sheet30_J4", "cell_style_32");
	}

	//----v31 스크립트 문 출력 함수----
	private void writeScriptv31( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 5, 5, sheet30_A7, "sheet30_A7", "cell_style_23");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 99, 5, sheet30_B7, "sheet30_B7", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos, 57, 5, sheet30_C7, "sheet30_C7", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos, 57, 5, sheet30_D7, "sheet30_D7", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos, 57, 5, sheet30_E7, "sheet30_E7", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos, 57, 5, sheet30_F7, "sheet30_F7", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos, 57, 5, sheet30_G7, "sheet30_G7", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos, 57, 5, sheet30_H7, "sheet30_H7", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos, 57, 5, sheet30_I7, "sheet30_I7", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos, 57, 5, sheet30_J7, "sheet30_J7", "cell_style_2");
	}

	//----HeaderBand4 스크립트 문 출력 함수----
	private void writeScriptHeaderBand4( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 5, 5, sheet40_A1, "sheet40_A1", "cell_style_23");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 99, 5, sheet40_B1, "sheet40_B1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos, 57, 5, sheet40_C1, "sheet40_C1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos, 57, 5, sheet40_D1, "sheet40_D1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos, 57, 5, sheet40_E1, "sheet40_E1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos, 57, 5, sheet40_F1, "sheet40_F1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos, 57, 5, sheet40_G1, "sheet40_G1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos, 57, 5, sheet40_H1, "sheet40_H1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos, 57, 5, sheet40_I1, "sheet40_I1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos, 57, 5, sheet40_J1, "sheet40_J1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+5, 5, 15, sheet40_A2, "sheet40_A2", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+5, 99, 15, sheet40_B2, "sheet40_B2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos+5, 57, 15, sheet40_C2, "sheet40_C2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos+5, 57, 15, sheet40_D2, "sheet40_D2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos+5, 57, 15, sheet40_E2, "sheet40_E2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos+5, 57, 15, sheet40_F2, "sheet40_F2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos+5, 57, 15, sheet40_G2, "sheet40_G2", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos+5, 57, 15, sheet40_H2, "sheet40_H2", "cell_style_27");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos+5, 57, 15, sheet40_I2, "sheet40_I2", "cell_style_27");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos+5, 57, 15, sheet40_J2, "sheet40_J2", "cell_style_27");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+20, 5, 15, sheet40_A3, "sheet40_A3", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+20, 99, 15, sheet40_B3, "sheet40_B3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos+20, 57, 15, sheet40_C3, "sheet40_C3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos+20, 57, 15, sheet40_D3, "sheet40_D3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos+20, 57, 15, sheet40_E3, "sheet40_E3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos+20, 57, 15, sheet40_F3, "sheet40_F3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos+20, 57, 15, sheet40_G3, "sheet40_G3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos+20, 57, 15, sheet40_H3, "sheet40_H3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos+20, 57, 15, sheet40_I3, "sheet40_I3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos+20, 57, 15, sheet40_J3, "sheet40_J3", "cell_style_11");
	}

	//----IfBand4 스크립트 문 출력 함수----
	private void writeScriptIfBand4( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 5, 17, sheet40_A6, "sheet40_A6", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 99, 17, sheet40_B6, "sheet40_B6", "cell_style_34");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos, 57, 17, String.valueOf(sheet40_C6), "sheet40_C6", "cell_style_36");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos, 57, 17, String.valueOf(sheet40_D6), "sheet40_D6", "cell_style_38");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos, 57, 17, String.valueOf(sheet40_E6), "sheet40_E6", "cell_style_38");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos, 57, 17, String.valueOf(sheet40_F6), "sheet40_F6", "cell_style_38");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos, 57, 17, String.valueOf(sheet40_G6), "sheet40_G6", "cell_style_38");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos, 57, 17, String.valueOf(sheet40_H6), "sheet40_H6", "cell_style_38");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos, 57, 17, "", "sheet40_I6", "cell_style_38");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos, 57, 17, "", "sheet40_J6", "cell_style_38");
	}

	//----v42 스크립트 문 출력 함수----
	private void writeScriptv42( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 99, 15, "", "sheet40_B5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos, 57, 15, "", "sheet40_C5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos, 57, 15, "", "sheet40_D5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos, 57, 15, "", "sheet40_E5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos, 57, 15, "", "sheet40_F5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos, 57, 15, "", "sheet40_G5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos, 57, 15, "", "sheet40_H5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos, 57, 15, "", "sheet40_I5", "cell_style_33");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos, 57, 15, "", "sheet40_J5", "cell_style_33");
	}

	//----ListBand4 스크립트 문 출력 함수----
	private void writeScriptListBand4(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 5, 15, sheet40_A4, "sheet40_A4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 99, 15, sheet40_B4, "sheet40_B4", "cell_style_37");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos, 57, 15, String.valueOf(sheet40_C4), "sheet40_C4", "cell_style_31");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos, 57, 15, String.valueOf(sheet40_D4), "sheet40_D4", "cell_style_32");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos, 57, 15, String.valueOf(sheet40_E4), "sheet40_E4", "cell_style_32");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos, 57, 15, String.valueOf(sheet40_F4), "sheet40_F4", "cell_style_32");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos, 57, 15, String.valueOf(sheet40_G4), "sheet40_G4", "cell_style_31");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos, 57, 15, String.valueOf(sheet40_H4), "sheet40_H4", "cell_style_31");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos, 57, 15, "", "sheet40_I4", "cell_style_31");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos, 57, 15, "", "sheet40_J4", "cell_style_32");
	}

	//----v41 스크립트 문 출력 함수----
	private void writeScriptv41( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 5, 21, sheet40_A7, "sheet40_A7", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos, 99, 21, sheet40_B7, "sheet40_B7", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos, 57, 21, sheet40_C7, "sheet40_C7", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos, 57, 21, sheet40_D7, "sheet40_D7", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos, 57, 21, sheet40_E7, "sheet40_E7", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos, 57, 21, sheet40_F7, "sheet40_F7", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos, 57, 21, sheet40_G7, "sheet40_G7", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos, 57, 21, sheet40_H7, "sheet40_H7", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+446, nYCurPos, 57, 21, sheet40_I7, "sheet40_I7", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+503, nYCurPos, 57, 21, sheet40_J7, "sheet40_J7", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+21, 5, 21, sheet40_A8, "sheet40_A8", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+5, nYCurPos+21, 99, 21, sheet40_B8, "sheet40_B8", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+104, nYCurPos+21, 57, 21, sheet40_C8, "sheet40_C8", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+161, nYCurPos+21, 57, 21, sheet40_D8, "sheet40_D8", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+218, nYCurPos+21, 57, 21, sheet40_E8, "sheet40_E8", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos+21, 57, 21, sheet40_F8, "sheet40_F8", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+332, nYCurPos+21, 57, 21, sheet40_G8, "sheet40_G8", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+389, nYCurPos+21, 57, 21, sheet40_H8, "sheet40_H8", "cell_style_5");
		objectWrite(DRAW_OBJECT, nXCurPos+4, nYCurPos+4, 556, 59, "http://localhost:8080/AIViewer55/image/bill_foot_20130227.gif", "AI_IMAGE_OBJ3", "draw_style_1");
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
		switch(nIndex){
			case 10:		//SHEET=Sheet1   FRAME=0 배경 이미지 스크립트
			objectWrite(DRAW_OBJECT, 18, 77, 560, 108, "http://localhost:8080/AIViewer55/image/bill_visual_20130227_BG.gif", "AI_IMAGE_OBJ1", "draw_style_0");
			break;
		}
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//POSCOICT Connection 객체 생성
		Class.forName("oracle.jdbc.driver.OracleDriver");
		conn_POSCOICT = DriverManager.getConnection("jdbc:oracle:thin:@211.53.208.232:1521:XE","bill","rhkrma");
		stat_qry_POSCO_ICT0=conn_POSCOICT.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_qry_POSCO_ICT1=conn_POSCOICT.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_qry_POSCO_ICT2=conn_POSCOICT.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_qry_POSCO_ICT3=conn_POSCOICT.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stat_qry_POSCO_ICT4=conn_POSCOICT.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
	}

	//-----ResultSet, Statement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, Statement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
		sql_qry_POSCO_ICT0 = "SELECT A.SALESDATE ";
		sql_qry_POSCO_ICT0 = sql_qry_POSCO_ICT0 + "   , A.TOTALCHARGEGROUPID ";
		sql_qry_POSCO_ICT0 = sql_qry_POSCO_ICT0 + "   , A.CUSTOMERID ";
		sql_qry_POSCO_ICT0 = sql_qry_POSCO_ICT0 + "  FROM CUSTOMERCHARGEDATAS A ";
		sql_qry_POSCO_ICT0 = sql_qry_POSCO_ICT0 + " WHERE A.TOTALCHARGEGROUPID = '" + customerid_Param + "' ";
		sql_qry_POSCO_ICT0 = sql_qry_POSCO_ICT0 + "   AND A.SALESDATE = TO_DATE('" + salesdate_Param + "')";

		sql_qry_POSCO_ICT1 = "SELECT B.NAME as CUSTOMERNM ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "     , A.CUSTOMERID ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "     , (SELECT SUBSTR(xmlagg(xmlelement(a,'/' || servicekindNm) order by  SERVICEKIND).extract('//text()').getStringVal(), 2) ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "          FROM ( SELECT A.SERVICEKIND ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "                     , (SELECT VALUE ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "                          FROM CODES ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "                         WHERE COLUMNNAME = 'servicekind' ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "                           AND ID = A.SERVICEKIND) as servicekindNm ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "                  FROM TOTALCHARGEDATAS A ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "         WHERE A.CUSTOMERID = '202022800278' ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "           AND A.SALESDATE = TO_DATE('2012-12-24') ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "           AND A.SERVICE = '12002' ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "           GROUP BY A.SERVICEKIND )) as PRODUCTNAME ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "     , TO_CHAR(ADD_MONTHS('2012.12.24', -1), 'YYYY.MM.') ||'01 ~ '|| TO_CHAR(LAST_DAY(ADD_MONTHS('2012.12.24', -1)), 'YYYY.MM.DD') as USE_PERIOD ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "     , '2012.12.24' as PRINT_DATE ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "     , TO_CHAR(LAST_DAY('2012.12.24'), 'YYYY.MM.DD') as PAY_DATE ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "     , '219-81-00428' as PROVIDER_REG_NO ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "     , (SELECT S.REG_NO ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "          FROM COMPANIES S ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "         WHERE S.ID = B.COMPANIEID ) as REG_NO ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "     , A.SUPPLYAMOUNT ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "     , A.ADDITIONALTAX  ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "   FROM CUSTOMERCHARGEDATAS A, CUSTOMERS B ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "  WHERE A.CUSTOMERID = B.ID ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "    AND A.SALESDATE = TO_DATE('2012-12-24') ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "    AND A.TOTALCHARGEGROUPID = '202022800278001' ";
		sql_qry_POSCO_ICT1 = sql_qry_POSCO_ICT1 + "    AND A.CUSTOMERID = '202022800278'";

		sql_qry_POSCO_ICT2 = "SELECT A.AMOUNT01 ";
		sql_qry_POSCO_ICT2 = sql_qry_POSCO_ICT2 + "     , A.AMOUNT02 ";
		sql_qry_POSCO_ICT2 = sql_qry_POSCO_ICT2 + "     , A.AMOUNT03 ";
		sql_qry_POSCO_ICT2 = sql_qry_POSCO_ICT2 + "     , A.AMOUNT04 ";
		sql_qry_POSCO_ICT2 = sql_qry_POSCO_ICT2 + "     , A.AMOUNT05 ";
		sql_qry_POSCO_ICT2 = sql_qry_POSCO_ICT2 + "     , A.AMOUNT06 ";
		sql_qry_POSCO_ICT2 = sql_qry_POSCO_ICT2 + "     , A.DISCOUNTAMOUNT ";
		sql_qry_POSCO_ICT2 = sql_qry_POSCO_ICT2 + "     , A.CUTAMOUNT ";
		sql_qry_POSCO_ICT2 = sql_qry_POSCO_ICT2 + "  FROM CUSTOMERCHARGEDATAS A ";
		sql_qry_POSCO_ICT2 = sql_qry_POSCO_ICT2 + " WHERE A.SALESDATE = TO_DATE('2012-12-24') ";
		sql_qry_POSCO_ICT2 = sql_qry_POSCO_ICT2 + "   AND A.TOTALCHARGEGROUPID = '202022800278001' ";
		sql_qry_POSCO_ICT2 = sql_qry_POSCO_ICT2 + "   AND A.CUSTOMERID = '202022800278'";

		sql_qry_POSCO_ICT3 = "SELECT A.SERVICEKIND ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "     , A.COMPANYID ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "     , (SELECT NAME ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "          FROM COMPANIES ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "         WHERE ID = A.COMPANYID) as companyNm ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "     , A.CUSTOMERID     ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "     , ROUND(SUM(A.AMOUNT01)*MAX(B.RATE/100)) as AMOUNT01 ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "     , ROUND(SUM(A.AMOUNT02)*MAX(B.RATE/100)) as AMOUNT02 ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "     , ROUND(SUM(A.AMOUNT03)*MAX(B.RATE/100)) as AMOUNT03 ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "     , ROUND(SUM(A.AMOUNT04)*MAX(B.RATE/100)) as AMOUNT04 ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "     , ROUND(SUM(A.AMOUNT05)*MAX(B.RATE/100)) as AMOUNT05 ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "     , ROUND(SUM(A.AMOUNT06)*MAX(B.RATE/100)) as AMOUNT06 ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "     , ROUND(NVL(SUM(C.AMOUNT01 + C.AMOUNT02 + C.AMOUNT03 + C.AMOUNT04 + C.AMOUNT05 + C.AMOUNT06), 0)*MAX(B.RATE/100)) as AMOUNT07 ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "  FROM CHARGEDATAS A, (SELECT A.SALESDATE, A.CUSTOMERID, C.NAME, B.RATE ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "                         FROM CUSTOMERCHARGEDATAS A, TOTALCHARGEMEMBERS B, CUSTOMERS C ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "                        WHERE A.TOTALCHARGEGROUPID = B.TOTALCHARGEGROUPID ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "                          AND A.CUSTOMERID= B.CUSTOMERID ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "                          AND A.CUSTOMERID = C.ID ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "                          AND A.SALESDATE = TO_DATE('2012-12-24') ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "                          AND A.TOTALCHARGEGROUPID = '202022800278001' ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "                          AND B.CUSTOMERID = '202022800278' ) B, CHARGEDATAS C ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + " WHERE A.SALESDATE = B.SALESDATE ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "   AND A.CUSTOMERID = B.CUSTOMERID ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "   AND A.SALESDATE = C.SALESDATE(+) ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "   AND A.CUSTOMERID = C.CUSTOMERID(+) ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "   AND A.COMPANYID = C.COMPANYID(+) ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "   AND A.SERVICE = C.SERVICE(+) ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "   AND A.SERVICEKIND = C.SERVICEKIND(+) ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "   AND A.SALESDATE = TO_DATE('2012-12-24') ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "   AND A.SERVICE = '12002' ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "   AND A.IS_DISCOUNT = 'N' ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "   AND C.IS_DISCOUNT(+) = 'Y' ";
		sql_qry_POSCO_ICT3 = sql_qry_POSCO_ICT3 + "   GROUP BY A.COMPANYID, A.SERVICEKIND, A.CUSTOMERID";

		sql_qry_POSCO_ICT4 = "SELECT A.COMPANYID ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "     , A.SERVICEKIND  ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "     , (SELECT NAME ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "          FROM COMPANIES ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "         WHERE ID = A.COMPANYID) as companyNm ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "     , A.CUSTOMERID ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "     , ROUND(SUM(A.AMOUNT01)*MAX(B.RATE/100)) as AMOUNT01 ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "     , ROUND(SUM(A.AMOUNT02)*MAX(B.RATE/100)) as AMOUNT02 ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "     , ROUND(SUM(A.AMOUNT03)*MAX(B.RATE/100)) as AMOUNT03 ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "     , ROUND(SUM(A.AMOUNT04)*MAX(B.RATE/100)) as AMOUNT04 ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "     , ROUND(SUM(A.AMOUNT05)*MAX(B.RATE/100)) as AMOUNT05 ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "     , ROUND(SUM(A.AMOUNT06)*MAX(B.RATE/100)) as AMOUNT06 ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "  FROM CHARGEDATAS A, (SELECT A.SALESDATE, A.CUSTOMERID, B.RATE ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "                         FROM CUSTOMERCHARGEDATAS A, TOTALCHARGEMEMBERS B, CUSTOMERS C ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "                        WHERE A.TOTALCHARGEGROUPID = B.TOTALCHARGEGROUPID ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "                          AND A.CUSTOMERID = B.CUSTOMERID ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "                          AND A.CUSTOMERID = C.ID ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "                          AND A.SALESDATE = TO_DATE('2012-12-24') ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "                          AND A.TOTALCHARGEGROUPID = '202022800278001' ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "                          AND B.CUSTOMERID = '202022800278' ) B ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + " WHERE A.SALESDATE = B.SALESDATE ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "   AND A.CUSTOMERID = B.CUSTOMERID ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "   AND A.SERVICE = '12002' ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "   AND A.IS_DISCOUNT = 'Y' ";
		sql_qry_POSCO_ICT4 = sql_qry_POSCO_ICT4 + "   GROUP BY A.COMPANYID, A.SERVICEKIND, A.CUSTOMERID";
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet qry_POSCO_ICT0 객체에서 필드 값 설정 함수
	private void setFieldVariableFromqry_POSCO_ICT0() throws Exception{
		qry_POSCO_ICT0_SALESDATE=GetB(qry_POSCO_ICT0.getString(1));
		qry_POSCO_ICT0_TOTALCHARGEGROUPID=qry_POSCO_ICT0.getDouble(2);
		qry_POSCO_ICT0_CUSTOMERID=qry_POSCO_ICT0.getDouble(3);
	}

	//ResultSet qry_POSCO_ICT0 객체의 필드 값 초기화 함수
	private void setFieldInitFromqry_POSCO_ICT0(){
		qry_POSCO_ICT0_SALESDATE="";
		qry_POSCO_ICT0_TOTALCHARGEGROUPID=0;
		qry_POSCO_ICT0_CUSTOMERID=0;
	}

	//ResultSet qry_POSCO_ICT1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromqry_POSCO_ICT1() throws Exception{
		qry_POSCO_ICT1_CUSTOMERNM=GetB(qry_POSCO_ICT1.getString(1));
		qry_POSCO_ICT1_CUSTOMERID=qry_POSCO_ICT1.getDouble(2);
		qry_POSCO_ICT1_PRODUCTNAME=GetB(qry_POSCO_ICT1.getString(3));
		qry_POSCO_ICT1_USE_PERIOD=GetB(qry_POSCO_ICT1.getString(4));
		qry_POSCO_ICT1_PRINT_DATE=GetB(qry_POSCO_ICT1.getString(5));
		qry_POSCO_ICT1_PAY_DATE=GetB(qry_POSCO_ICT1.getString(6));
		qry_POSCO_ICT1_PROVIDER_REG_NO=GetB(qry_POSCO_ICT1.getString(7));
		qry_POSCO_ICT1_REG_NO=GetB(qry_POSCO_ICT1.getString(8));
		qry_POSCO_ICT1_SUPPLYAMOUNT=qry_POSCO_ICT1.getDouble(9);
		qry_POSCO_ICT1_ADDITIONALTAX=qry_POSCO_ICT1.getDouble(10);
	}

	//ResultSet qry_POSCO_ICT1 객체의 필드 값 초기화 함수
	private void setFieldInitFromqry_POSCO_ICT1(){
		qry_POSCO_ICT1_CUSTOMERNM="";
		qry_POSCO_ICT1_CUSTOMERID=0;
		qry_POSCO_ICT1_PRODUCTNAME="";
		qry_POSCO_ICT1_USE_PERIOD="";
		qry_POSCO_ICT1_PRINT_DATE="";
		qry_POSCO_ICT1_PAY_DATE="";
		qry_POSCO_ICT1_PROVIDER_REG_NO="";
		qry_POSCO_ICT1_REG_NO="";
		qry_POSCO_ICT1_SUPPLYAMOUNT=0;
		qry_POSCO_ICT1_ADDITIONALTAX=0;
	}

	//ResultSet qry_POSCO_ICT2 객체에서 필드 값 설정 함수
	private void setFieldVariableFromqry_POSCO_ICT2() throws Exception{
		qry_POSCO_ICT2_AMOUNT01=qry_POSCO_ICT2.getDouble(1);
		qry_POSCO_ICT2_AMOUNT02=qry_POSCO_ICT2.getDouble(2);
		qry_POSCO_ICT2_AMOUNT03=qry_POSCO_ICT2.getDouble(3);
		qry_POSCO_ICT2_AMOUNT04=qry_POSCO_ICT2.getDouble(4);
		qry_POSCO_ICT2_AMOUNT05=qry_POSCO_ICT2.getDouble(5);
		qry_POSCO_ICT2_AMOUNT06=qry_POSCO_ICT2.getDouble(6);
		qry_POSCO_ICT2_DISCOUNTAMOUNT=qry_POSCO_ICT2.getDouble(7);
		qry_POSCO_ICT2_CUTAMOUNT=qry_POSCO_ICT2.getDouble(8);
	}

	//ResultSet qry_POSCO_ICT2 객체의 필드 값 초기화 함수
	private void setFieldInitFromqry_POSCO_ICT2(){
		qry_POSCO_ICT2_AMOUNT01=0;
		qry_POSCO_ICT2_AMOUNT02=0;
		qry_POSCO_ICT2_AMOUNT03=0;
		qry_POSCO_ICT2_AMOUNT04=0;
		qry_POSCO_ICT2_AMOUNT05=0;
		qry_POSCO_ICT2_AMOUNT06=0;
		qry_POSCO_ICT2_DISCOUNTAMOUNT=0;
		qry_POSCO_ICT2_CUTAMOUNT=0;
	}

	//ResultSet qry_POSCO_ICT3 객체에서 필드 값 설정 함수
	private void setFieldVariableFromqry_POSCO_ICT3() throws Exception{
		qry_POSCO_ICT3_SERVICEKIND=qry_POSCO_ICT3.getDouble(1);
		qry_POSCO_ICT3_COMPANYID=qry_POSCO_ICT3.getDouble(2);
		qry_POSCO_ICT3_COMPANYNM=GetB(qry_POSCO_ICT3.getString(3));
		qry_POSCO_ICT3_CUSTOMERID=qry_POSCO_ICT3.getDouble(4);
		qry_POSCO_ICT3_AMOUNT01=qry_POSCO_ICT3.getDouble(5);
		qry_POSCO_ICT3_AMOUNT02=qry_POSCO_ICT3.getDouble(6);
		qry_POSCO_ICT3_AMOUNT03=qry_POSCO_ICT3.getDouble(7);
		qry_POSCO_ICT3_AMOUNT04=qry_POSCO_ICT3.getDouble(8);
		qry_POSCO_ICT3_AMOUNT05=qry_POSCO_ICT3.getDouble(9);
		qry_POSCO_ICT3_AMOUNT06=qry_POSCO_ICT3.getDouble(10);
		qry_POSCO_ICT3_AMOUNT07=qry_POSCO_ICT3.getDouble(11);
	}

	//ResultSet qry_POSCO_ICT3 객체의 필드 값 초기화 함수
	private void setFieldInitFromqry_POSCO_ICT3(){
		qry_POSCO_ICT3_SERVICEKIND=0;
		qry_POSCO_ICT3_COMPANYID=0;
		qry_POSCO_ICT3_COMPANYNM="";
		qry_POSCO_ICT3_CUSTOMERID=0;
		qry_POSCO_ICT3_AMOUNT01=0;
		qry_POSCO_ICT3_AMOUNT02=0;
		qry_POSCO_ICT3_AMOUNT03=0;
		qry_POSCO_ICT3_AMOUNT04=0;
		qry_POSCO_ICT3_AMOUNT05=0;
		qry_POSCO_ICT3_AMOUNT06=0;
		qry_POSCO_ICT3_AMOUNT07=0;
	}

	//ResultSet qry_POSCO_ICT4 객체에서 필드 값 설정 함수
	private void setFieldVariableFromqry_POSCO_ICT4() throws Exception{
		qry_POSCO_ICT4_COMPANYID=qry_POSCO_ICT4.getDouble(1);
		qry_POSCO_ICT4_SERVICEKIND=qry_POSCO_ICT4.getDouble(2);
		qry_POSCO_ICT4_COMPANYNM=GetB(qry_POSCO_ICT4.getString(3));
		qry_POSCO_ICT4_CUSTOMERID=qry_POSCO_ICT4.getDouble(4);
		qry_POSCO_ICT4_AMOUNT01=qry_POSCO_ICT4.getDouble(5);
		qry_POSCO_ICT4_AMOUNT02=qry_POSCO_ICT4.getDouble(6);
		qry_POSCO_ICT4_AMOUNT03=qry_POSCO_ICT4.getDouble(7);
		qry_POSCO_ICT4_AMOUNT04=qry_POSCO_ICT4.getDouble(8);
		qry_POSCO_ICT4_AMOUNT05=qry_POSCO_ICT4.getDouble(9);
		qry_POSCO_ICT4_AMOUNT06=qry_POSCO_ICT4.getDouble(10);
	}

	//ResultSet qry_POSCO_ICT4 객체의 필드 값 초기화 함수
	private void setFieldInitFromqry_POSCO_ICT4(){
		qry_POSCO_ICT4_COMPANYID=0;
		qry_POSCO_ICT4_SERVICEKIND=0;
		qry_POSCO_ICT4_COMPANYNM="";
		qry_POSCO_ICT4_CUSTOMERID=0;
		qry_POSCO_ICT4_AMOUNT01=0;
		qry_POSCO_ICT4_AMOUNT02=0;
		qry_POSCO_ICT4_AMOUNT03=0;
		qry_POSCO_ICT4_AMOUNT04=0;
		qry_POSCO_ICT4_AMOUNT05=0;
		qry_POSCO_ICT4_AMOUNT06=0;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		sheet10_A9="　";
		sheet10_B9="　";
		sheet10_C9="　";
		sheet10_D9="　";
		sheet10_E9="　";
		sheet10_F9="　";
		sheet10_G9="　";
		sheet10_H9="　";
		sheet10_I9="　";
		sheet10_J9="　";
		sheet10_K9="　";
		sheet10_L9="　";
		sheet10_A10="　";
		sheet10_B10="(주)포스코ICT";
		sheet10_F10="　";
		sheet10_G10="　";
		sheet10_H10="　";
		sheet10_I10="　";
		sheet10_J10="　";
		sheet10_K10="　";
		sheet10_L10="　";
		sheet10_A11="　";
		sheet10_B11="경기도 성남시 분당구 삼평동 622";
		sheet10_F11="　";
		sheet10_G11="　";
		sheet10_H11="　";
		sheet10_I11="　";
		sheet10_J11="　";
		sheet10_K11="　";
		sheet10_L11="　";
		sheet10_A12="　";
		sheet10_B12="고객지원센터: ☎ 031-723-2999";
		sheet10_F12="　";
		sheet10_G12="　";
		sheet10_H12="　";
		sheet10_I12="　";
		sheet10_J12="　";
		sheet10_K12="　";
		sheet10_L12="　";
		sheet10_A13="　";
		sheet10_B13="　";
		sheet10_C13="　";
		sheet10_D13="　";
		sheet10_E13="　";
		sheet10_F13="　";
		sheet10_G13="　";
		sheet10_H13="　";
		sheet10_I13="　";
		sheet10_J13="　";
		sheet10_K13="　";
		sheet10_L13="　";
		sheet10_A14="　";
		sheet10_B14="　";
		sheet10_C14="　";
		sheet10_D14="　";
		sheet10_E14="　";
		sheet10_F14="　";
		sheet10_G14="　";
		sheet10_H14="　";
		sheet10_I14="　";
		sheet10_J14="　";
		sheet10_K14="　";
		sheet10_L14="　";
		sheet10_A15="　";
		sheet10_B15="　";
		sheet10_C15="　";
		sheet10_D15="　";
		sheet10_E15="　";
		sheet10_F15="　";
		sheet10_G15="경기도 성남시 분당구 삼평동 622";
		sheet10_K15="　";
		sheet10_L15="　";
		sheet10_A16="　";
		sheet10_B16="　";
		sheet10_C16="　";
		sheet10_E16="　";
		sheet10_F16="　";
		sheet10_G16="(주)포스코특수강";
		sheet10_K16="　";
		sheet10_L16="　";
		sheet10_A17="　";
		sheet10_B17="　";
		sheet10_C17="　";
		sheet10_D17="　";
		sheet10_E17="　";
		sheet10_F17="　";
		sheet10_G17="　";
		sheet10_H17="　";
		sheet10_I17="　";
		sheet10_J17="　";
		sheet10_K17="　";
		sheet10_L17="　";
		sheet10_A18="　";
		sheet10_B18="　";
		sheet10_C18="　";
		sheet10_D18="　";
		sheet10_E18="　";
		sheet10_F18="　";
		sheet10_G18="　";
		sheet10_H18="　";
		sheet10_I18="　";
		sheet10_J18="별정요금 담당자님 귀하";
		sheet10_A19="　";
		sheet10_B19="　";
		sheet10_C19="　";
		sheet10_D19="　";
		sheet10_E19="　";
		sheet10_F19="　";
		sheet10_G19="　";
		sheet10_H19="　";
		sheet10_I19="　";
		sheet10_J19="　";
		sheet10_K19="123-456";
		sheet20_A1="　";
		sheet20_B1="　";
		sheet20_C1="　";
		sheet20_D1="　";
		sheet20_E1="　";
		sheet20_F1="　";
		sheet20_G1="　";
		sheet20_I1="　";
		sheet20_J1="　";
		sheet20_K1="　";
		sheet20_L1="　";
		sheet20_A2="　";
		sheet20_B2="2012년  04월  명세서";
		sheet20_F2="　";
		sheet20_G2="2012년  04월  요금  청구  내역서";
		sheet20_L2="　";
		sheet20_B3="고          객          명";
		sheet20_F3="　";
		sheet20_G3="구분";
		sheet20_I3="금액";
		sheet20_L3="　";
		sheet20_A4="　";
		sheet20_B4="고      객      번      호";
		sheet20_F4="　";
		sheet20_G4="기          본          료";
		sheet20_L4="　";
		sheet20_A5="　";
		sheet20_B5="상          품          명";
		sheet20_F5="　";
		sheet20_G5="시    내    통    화    료";
		sheet20_L5="　";
		sheet20_A6="　";
		sheet20_B6="이      용      기      간";
		sheet20_F6="　";
		sheet20_G6="시    외    통    화    료";
		sheet20_L6="　";
		sheet20_A7="　";
		sheet20_B7="작      성      일      자";
		sheet20_F7="　";
		sheet20_G7="이    동    통    화    료";
		sheet20_L7="　";
		sheet20_A8="　";
		sheet20_B8="납      부      일      자";
		sheet20_F8="　";
		sheet20_G8="국    제    통    화    료";
		sheet20_L8="　";
		sheet20_A9="　";
		sheet20_B9="공  급  자  등  록  번  호";
		sheet20_F9="　";
		sheet20_G9="기      타      요      금";
		sheet20_L9="　";
		sheet20_A10="　";
		sheet20_B10="공 급 받 는 자 등 록 번 호";
		sheet20_F10="　";
		sheet20_G10="할          인          액";
		sheet20_H10="-";
		sheet20_L10="　";
		sheet20_A11="　";
		sheet20_B11="공      급      가      액";
		sheet20_F11="　";
		sheet20_G11="100  원   미  만   절   사";
		sheet20_H11="-";
		sheet20_L11="　";
		sheet20_A12="　";
		sheet20_B12="부    가    가    치    세";
		sheet20_F12="　";
		sheet20_G12="당    월    공    급    가";
		sheet20_L12="　";
		sheet20_A13="　";
		sheet20_B13="부 가 가 치 세 제 외 요 금";
		sheet20_C13="　";
		sheet20_F13="　";
		sheet20_G13="　";
		sheet20_I13="　";
		sheet20_L13="　";
		sheet20_A14="　";
		sheet20_B14="　";
		sheet20_C14="　";
		sheet20_F14="　";
		sheet20_G14="무통장입금안내";
		sheet20_L14="　";
		sheet20_A15="　";
		sheet20_B15="　";
		sheet20_C15="　";
		sheet20_D15="　";
		sheet20_E15="　";
		sheet20_F15="　";
		sheet20_G15="예금주 (주)포스코아이씨티";
		sheet20_L15="　";
		sheet20_A16="　";
		sheet20_B16="납      입      금      액";
		sheet20_F16="　";
		sheet20_G16="외환은행 304-11-00130-6   신한은행150-000-133954";
		sheet20_L16="　";
		sheet20_A17="　";
		sheet20_F17="　";
		sheet20_G17="우리은행 339-086407-03-001";
		sheet20_L17="　";
		sheet20_A18="　";
		sheet20_B18="　";
		sheet20_C18="　";
		sheet20_D18="　";
		sheet20_E18="　";
		sheet20_F18="　";
		sheet20_G18="　";
		sheet20_L18="　";
		sheet30_A1="　";
		sheet30_B1="　";
		sheet30_C1="　";
		sheet30_D1="　";
		sheet30_E1="　";
		sheet30_F1="　";
		sheet30_G1="　";
		sheet30_H1="　";
		sheet30_I1="　";
		sheet30_J1="　";
		sheet30_K1="　";
		sheet30_A2="　";
		sheet30_B2="사용내역";
		sheet30_C2="　";
		sheet30_D2="　";
		sheet30_E2="　";
		sheet30_F2="　";
		sheet30_G2="　";
		sheet30_H2="　";
		sheet30_I2="　";
		sheet30_J2="　";
		sheet30_K2="　";
		sheet30_A3="　";
		sheet30_B3="　";
		sheet30_C3="기본료";
		sheet30_D3="시내통화료";
		sheet30_E3="시외통화료";
		sheet30_F3="이동통화료";
		sheet30_G3="국제통화료";
		sheet30_H3="기타요금";
		sheet30_I3="할인액";
		sheet30_J3="소계";
		sheet30_K3="　";
		sheet30_K4="　";
		sheet30_A6="　";
		sheet30_B6="요금계";
		sheet30_K6="　";
		sheet30_A7="　";
		sheet30_B7="　";
		sheet30_C7="　";
		sheet30_D7="　";
		sheet30_E7="　";
		sheet30_F7="　";
		sheet30_G7="　";
		sheet30_H7="　";
		sheet30_I7="　";
		sheet30_J7="　";
		sheet30_K7="　";
		sheet40_A1="　";
		sheet40_B1="　";
		sheet40_C1="　";
		sheet40_D1="　";
		sheet40_E1="　";
		sheet40_F1="　";
		sheet40_G1="　";
		sheet40_H1="　";
		sheet40_I1="　";
		sheet40_J1="　";
		sheet40_K1="　";
		sheet40_A2="　";
		sheet40_B2="할인 상세내역";
		sheet40_C2="　";
		sheet40_D2="　";
		sheet40_E2="　";
		sheet40_F2="　";
		sheet40_G2="　";
		sheet40_H2="　";
		sheet40_I2="　";
		sheet40_J2="　";
		sheet40_K2="　";
		sheet40_A3="　";
		sheet40_B3="　";
		sheet40_C3="기본료";
		sheet40_D3="시내통화료";
		sheet40_E3="시외통화료";
		sheet40_F3="이동통화료";
		sheet40_G3="국제통화료";
		sheet40_H3="기타요금";
		sheet40_I3="할인액";
		sheet40_J3="소계";
		sheet40_K3="　";
		sheet40_A4="　";
		sheet40_K4="　";
		sheet40_A6="　";
		sheet40_B6="할인계";
		sheet40_K6="　";
		sheet40_A7="　";
		sheet40_B7="　";
		sheet40_C7="　";
		sheet40_D7="　";
		sheet40_E7="　";
		sheet40_F7="　";
		sheet40_G7="　";
		sheet40_H7="　";
		sheet40_I7="　";
		sheet40_J7="　";
		sheet40_K7="　";
		sheet40_A8="　";
		sheet40_B8="　";
		sheet40_C8="　";
		sheet40_D8="　";
		sheet40_E8="　";
		sheet40_F8="　";
		sheet40_G8="　";
		sheet40_H8="　";
		sheet40_K8="　";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=toKor(GetB(request.getParameter("reportMode")));
		if(reportMode.equals("")) {
			reportMode="AIScript";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + toKor(GetB(request.getParameter("reportParams"))));

		char data[] = {0x14};
		String str = new String(data);
		service_Param=toKor(GetB(request.getParameter("service")));
		service_Param=aiReplace(service_Param, str, "\n");
		salesdate_Param=toKor(GetB(request.getParameter("salesdate")));
		salesdate_Param=aiReplace(salesdate_Param, str, "\n");
		totalchargeid_Param=toKor(GetB(request.getParameter("totalchargeid")));
		totalchargeid_Param=aiReplace(totalchargeid_Param, str, "\n");
		customerid_Param=toKor(GetB(request.getParameter("customerid")));
		customerid_Param=aiReplace(customerid_Param, str, "\n");
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getBgImageScript(10);		//배경 이미지 함수 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight){
		//GetPrintHeight_AutoCode
		int ch;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		printWidth = (printWidth-4)*100;

		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
				}
			} else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;

				if (ch==13) {
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}
			} else {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}
			}
		}

		if (height>printHeight) {
			height=height-printHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight){
		//GetPrintHeightEx_AutoCode
		int ch;
		int i;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		boolean bSplit=false;
		strSplitData[0]="";
		strSplitData[1]="";
		printWidth = (printWidth-4)*100;

		for (i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
				}
			}else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;
				if (ch==13){
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					if(i!=size-1){
						bSplit=true;
						i++;
					}
					break;
				}
			}else{
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					bSplit=true;
					break;
				}
			}
		}

		if(bSplit){
			strSplitData[0]=data.substring(0, i);
			strSplitData[1]=data.substring(i);
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|1|lineTest.style|보고서 (2013/1/11 11:36:20)", false);
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}
}
%>
