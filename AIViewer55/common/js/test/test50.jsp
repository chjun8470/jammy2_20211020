<%
/************************************************************************************
Generated by AIDesigner 5.0.3.6
************************************************************************************
보고서 제목 : 보고서 (2012/5/25 17:49:8)
작성일 : 2012년5월25일 17시49분8초
작성자 :
************************************************************************************/
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.net.URL" %>
<%@ page contentType="text/html; charset=utf-8" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>
<%@ page import="com.activeintra.util.uds.*" %>


<%
Object[] userObj = null;

    String reportMode=request.getParameter("reportMode");
    String reportParams=request.getParameter("reportParams");
    if(reportMode!=null) {
        if (reportMode.equals("PDF")) {
            if (reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1) {
                out.clear();
                out = pageContext.pushBody();
            }
        } else if (reportMode.equals("EXCEL")) {
            if (reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1) {
                out.clear();
                out = pageContext.pushBody();
            }
        } else if (reportMode.equals("AR5")) {
            out.clear();
            out = pageContext.pushBody();
        }
    }

ReportHandler handler = new ReportHandler(pageContext,request,response,userObj);
handler.service(out);

handler=null;

%>

<%!
private Logger logger = Logger.getLogger("test50.jsp");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용

	private PageContext pageContext;
	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_H17;
	String sheet10_B2;
	String sheet10_B5;
	String AI_CHART_OBJ38;
	String AI_STRING_OBJ39;
	String AI_STRING_OBJ40;
	String AI_STRING_OBJ41;
	String sheet10_B9;
	String sheet10_B10;
	String sheet10_B12;
	String sheet10_B13;
	String sheet10_B15;
	String sheet10_B16;
	String AI_BOX_OBJ2;
	String sheet20_B2;
	String sheet30_B2;
	String sheet30_C5;
	String sheet30_D5;
	String sheet30_C6;
	String sheet30_D6;
	String sheet30_C8;
	String sheet30_D8;
	String sheet30_E8;
	String AI_BOX_OBJ12;
	String AI_STRING_OBJ16;
	String AI_STRING_OBJ17;
	String AI_STRING_OBJ26;
	String sheet31_A5;
	String sheet31_B5;
	String sheet31_C5;
	String sheet31_D5;
	String sheet31_A6;
	String sheet31_B6;
	String sheet31_C6;
	double sheet31_D6;
	String sheet31_A7;
	String sheet31_B7;
	String sheet31_C7;
	String sheet31_D7;
	String sheet31_A9;
	String AI_BOX_OBJ27;
	String sheet40_B2;
	String sheet40_B4;
	String sheet40_B7;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private CSVSetHandler csv_chart=null;

	//-----쿼리 필드 변수 선언-----
	//UDS DataSet csv_chart 객체에서 필드 값을 받는 필드 변수
	private String csv_chart_a;
	private String csv_chart_b;
	private String csv_chart_c;
	

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext,HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.pageContext=pageContext;
		this.request=request;  
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화
			
			
			//AIreportURL aiURL = new AIreportURL();
			//URL url = new URL(request.getRequestURL().toString());
			//PropertyConfigurator.configure(new URL(url,aiURL.AIVIEWER_INSTALL_PATH + "/common/AIReport.properties"));
			
			manager = new AIScriptManager(request, response, pageContext, out, logger, null);
				
			ServletContext context = pageContext.getServletContext();
			//System.out.println(context.getContextPath());
			//System.out.println(request.getRequestURI());
				
			String temp=null;
			if(!context.getContextPath().equals("/"))
				temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
				temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");
				
		
			//System.out.println(path);
		
			//pdfFilename="test99.pdf";
				
			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "14 14 14 14");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();
				

				//---------------스크립트 종료---------------
				//String pageNames;
				//for(int i=1; i<=nMaxPage; i++)
				//{
				//	pageNames=pageNames+"insa_"+i+"$";
				//}
				
				manager.scriptWrite("/AIReport", "", "", false);
				
				//manager.addHtmlHeader("<script  type=\"text/javascript\" src=\"/htmlViewer/AIViewer50/common/js/XDomain.js\"></script>");
				//manager.addHtmlHeader("<link rel=\"stylesheet\" type=\"text/css\" href=\"/htmlViewer/AIViewer50/common/css/jquery-ui.css\" />");
				manager.close();
				
			}
		}catch(Exception e){    //catch 구문
			//RequestDispatcher dispatcher = request.getRequestDispatcher("/AIViewer50/aierror.jsp");
			//request.setAttribute("errorPGID", logger.getName());
			//request.setAttribute("errorMESSAGE",e.toString());
			//dispatcher.forward(request, response);
			out.print(e);
			out.print("\r");
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			//DataSet Close
			cleanup(csv_chart, null, null, null);
		}    //end try
		
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "14 14 14 14");
		initSheetVariant(27, 27, 560, 762, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//배경 이미지 함수 호출
		getBgImageScript(10);

		//밴드 함수 호출
		getScriptFromba(true, true);    //바닥글 밴드 호출
		getScriptFromV(true, true);    //Void 밴드 호출
		getScriptFromV2(true, true);    //Void 밴드 호출
		getScriptFromv3(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 27, 560, 762, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//배경 이미지 함수 호출
		getBgImageScript(20);

		//밴드 함수 호출
		getScriptFromv21(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
		//SHEET=Sheet3   FRAME=1 함수 호출
		executeSheet31();
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 27, 311, 762, true, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv31(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		if(nMaxPage<nPageNum || (nMaxPage==nPageNum && nYLastPos<nYCurPos)){
			nYLastPos=nYCurPos;
		}
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet3   FRAME=Frame1 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet31( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(311, 27, 560, 762, true, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv32(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		if(nMaxPage<nPageNum || (nMaxPage==nPageNum && nYLastPos<nYCurPos)){
			nYLastPos=nYCurPos;
		}
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
		nYCurPos=nYLastPos;
		nPageNum=nMaxPage;

		//자식 쉬트 호출
		//SHEET=Sheet4   FRAME=0 함수 호출
		executeSheet40();
	}

	//-----SHEET=Sheet4   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet40( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 27, 560, 762, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv4(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----ba FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : ba
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromba(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptba();
		}   //end if(bIsPrint)
	}

	//----V VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : V
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromV(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=80;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptV();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----V2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : V2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromV2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=307;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ38="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ38( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptV2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : v3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=344;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v21 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : v21
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv21(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=80;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv21();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v31 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : v31
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv31(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=318;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv31();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v32 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame1
	//----밴드 이름 : v32
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv32(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=318;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv32();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v4 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : v4
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=334;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----ba 스크립트 문 출력 함수----
	private void writeScriptba( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 508, 762, 32, 38, sheet10_H17, "sheet10_H17", "cell_style_11");
	}

	//----V 스크립트 문 출력 함수----
	private void writeScriptV( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+20, 240, 40, sheet10_B2, "sheet10_B2", "cell_style_0");
	}

	//----V2 스크립트 문 출력 함수----
	private void writeScriptV2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+15, 240, 20, sheet10_B5, "sheet10_B5", "cell_style_1");
		objectWrite(DRAW_OBJECT, nXCurPos+20, nYCurPos+35, 494, 272, AI_CHART_OBJ38, "AI_CHART_OBJ38", "draw_style_1");
		//propertyWrite(DRAW_OBJECT, "AI_CHART_OBJ38", "chartXyInterChange", "y");
		//propertyWrite(DRAW_OBJECT, "AI_CHART_OBJ38", "chartBackgroungImage", "http://www.ai-report.com/images/solbitech_top_logo.gif");
		propertyWrite(DRAW_OBJECT, "AI_CHART_OBJ38", "chartBackgroungImage", "http://www.ai-report.com/images/solbitech_top_logo.gif");
		
		objectWrite(DRAW_OBJECT, nXCurPos+59, nYCurPos+32, 84, 32, AI_STRING_OBJ39, "AI_STRING_OBJ39", "draw_style_2");
		objectWrite(DRAW_OBJECT, nXCurPos+164, nYCurPos+32, 84, 32, AI_STRING_OBJ40, "AI_STRING_OBJ40", "draw_style_2");
		objectWrite(DRAW_OBJECT, nXCurPos+346, nYCurPos+32, 84, 32, AI_STRING_OBJ41, "AI_STRING_OBJ41", "draw_style_2");
	}

	//----v3 스크립트 문 출력 함수----
	private void writeScriptv3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+34, 80, 20, "", "sheet10_B8", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+34, 80, 20, "", "sheet10_C8", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+180, nYCurPos+34, 80, 20, "", "sheet10_D8", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+260, nYCurPos+34, 80, 20, "", "sheet10_E8", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+340, nYCurPos+34, 80, 20, "", "sheet10_F8", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+420, nYCurPos+34, 61, 20, "", "sheet10_G8", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+481, nYCurPos+34, 32, 20, "", "sheet10_H8", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+54, 493, 20, sheet10_B9, "sheet10_B9", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+74, 493, 70, sheet10_B10, "sheet10_B10", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+144, 80, 10, "", "sheet10_B11", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+481, nYCurPos+144, 32, 10, "", "sheet10_H11", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+154, 493, 20, sheet10_B12, "sheet10_B12", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+174, 493, 70, sheet10_B13, "sheet10_B13", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+244, 80, 10, "", "sheet10_B14", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+481, nYCurPos+244, 32, 10, "", "sheet10_H14", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+254, 493, 20, sheet10_B15, "sheet10_B15", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+274, 493, 70, sheet10_B16, "sheet10_B16", "cell_style_10");
		objectWrite(DRAW_OBJECT, nXCurPos+20, nYCurPos+9, 154, 25, AI_BOX_OBJ2, "AI_BOX_OBJ2", "draw_style_3");
		
		/*
		if(true)
		{
			propertyWrite(CELL_OBJECT, "sheet10_B16", "fontName[@FIND:역동성은]|fontBold[@FIND:핵심적인]|fontSize[@FIND:굴림체]|fontItalic[@FIND2:굴림체]|fontColor[@FIND2:글꼴]|fontBkColor[@FIND2:글꼴(Font)]|fontColor[@FIND2:Font]|fontUnderline[@FIND2:Font]|fontBold[@NUM2]|fontColor[@NUM2]|fontBkColor[@NUM2]", "궁서체" + "|" + "y" + "|" + "14" + "|" + "y" + "|" + "RGB[0,0,255]" + "|" + "RGB[255,0,0]" + "|" + "RGB[255,0,0]" + "|" + "y" + "|" + "y" + "|" + "RGB[255,0,0]" + "|" + "RGB[0,255,255]");
		}
		*/
	}

	//----v21 스크립트 문 출력 함수----
	private void writeScriptv21( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+20, 335, 40, sheet20_B2, "sheet20_B2", "cell_style_0");
	}

	//----v31 스크립트 문 출력 함수----
	private void writeScriptv31( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+15, 244, 20, sheet30_B2, "sheet30_B2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+55, 20, 20, "", "sheet30_B4", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+40, nYCurPos+55, 112, 20, "", "sheet30_C4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+152, nYCurPos+55, 30, 20, "", "sheet30_D4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+182, nYCurPos+55, 82, 20, "", "sheet30_E4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+264, nYCurPos+55, 20, 20, "", "sheet30_F4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+75, 20, 90, "", "sheet30_B5", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+40, nYCurPos+75, 112, 90, sheet30_C5, "sheet30_C5", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+152, nYCurPos+75, 112, 90, sheet30_D5, "sheet30_D5", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+165, 20, 90, "", "sheet30_B6", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+40, nYCurPos+165, 112, 90, sheet30_C6, "sheet30_C6", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+152, nYCurPos+165, 112, 90, sheet30_D6, "sheet30_D6", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+255, 20, 21, "", "sheet30_B7", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+276, 20, 22, "", "sheet30_B8", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+40, nYCurPos+276, 112, 22, sheet30_C8, "sheet30_C8", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+152, nYCurPos+276, 30, 22, sheet30_D8, "sheet30_D8", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+182, nYCurPos+276, 82, 22, sheet30_E8, "sheet30_E8", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+298, 20, 20, "", "sheet30_B9", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos+40, nYCurPos+298, 112, 20, "", "sheet30_C9", "cell_style_18");
		objectWrite(CELL_OBJECT, nXCurPos+152, nYCurPos+298, 30, 20, "", "sheet30_D9", "cell_style_18");
		objectWrite(CELL_OBJECT, nXCurPos+182, nYCurPos+298, 82, 20, "", "sheet30_E9", "cell_style_18");
		objectWrite(CELL_OBJECT, nXCurPos+264, nYCurPos+298, 20, 20, "", "sheet30_F9", "cell_style_18");
		objectWrite(DRAW_OBJECT, nXCurPos+92, nYCurPos+38, 118, 17, AI_BOX_OBJ12, "AI_BOX_OBJ12", "draw_style_4");
		objectWrite(DRAW_OBJECT, nXCurPos+24, nYCurPos+124, 15, 83, AI_STRING_OBJ16, "AI_STRING_OBJ16", "draw_style_5");
		objectWrite(DRAW_OBJECT, nXCurPos+107, nYCurPos+257, 87, 15, AI_STRING_OBJ17, "AI_STRING_OBJ17", "draw_style_5");
		objectWrite(DRAW_OBJECT, nXCurPos+159, nYCurPos+155, 6, 6, "", "AI_CIRCLE_OBJ20", "draw_style_6");
		objectWrite(DRAW_OBJECT, nXCurPos+183, nYCurPos+172, 6, 6, "", "AI_CIRCLE_OBJ21", "draw_style_6");
		objectWrite(DRAW_OBJECT, nXCurPos+190, nYCurPos+125, 6, 6, "", "AI_CIRCLE_OBJ22", "draw_style_6");
		objectWrite(DRAW_OBJECT, nXCurPos+101, nYCurPos+167, 6, 6, "", "AI_CIRCLE_OBJ23", "draw_style_6");
		objectWrite(DRAW_OBJECT, nXCurPos+115, nYCurPos+194, 6, 6, "", "AI_CIRCLE_OBJ24", "draw_style_6");
		objectWrite(DRAW_OBJECT, nXCurPos+140, nYCurPos+192, 6, 6, "", "AI_CIRCLE_OBJ25", "draw_style_6");
		objectWrite(DRAW_OBJECT, nXCurPos+135, nYCurPos+170, 20, 22, AI_STRING_OBJ26, "AI_STRING_OBJ26", "draw_style_7");
	}

	//----v32 스크립트 문 출력 함수----
	private void writeScriptv32( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+55, 77, 20, "", "sheet31_A4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+77, nYCurPos+55, 44, 20, "", "sheet31_B4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+121, nYCurPos+55, 44, 20, "", "sheet31_C4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+165, nYCurPos+55, 44, 20, "", "sheet31_D4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+209, nYCurPos+55, 10, 20, "", "sheet31_E4", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+219, nYCurPos+55, 10, 20, "", "sheet31_F4", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+75, 77, 55, sheet31_A5, "sheet31_A5", "cell_style_19");
		objectWrite(CELL_OBJECT, nXCurPos+77, nYCurPos+75, 44, 55, sheet31_B5, "sheet31_B5", "cell_style_19");
		objectWrite(CELL_OBJECT, nXCurPos+121, nYCurPos+75, 44, 55, sheet31_C5, "sheet31_C5", "cell_style_19");
		objectWrite(CELL_OBJECT, nXCurPos+165, nYCurPos+75, 44, 55, sheet31_D5, "sheet31_D5", "cell_style_19");
		objectWrite(CELL_OBJECT, nXCurPos+219, nYCurPos+75, 10, 55, "", "sheet31_F5", "cell_style_20");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+130, 77, 55, sheet31_A6, "sheet31_A6", "cell_style_21");
		objectWrite(CELL_OBJECT, nXCurPos+77, nYCurPos+130, 44, 55, sheet31_B6, "sheet31_B6", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos+121, nYCurPos+130, 44, 55, sheet31_C6, "sheet31_C6", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos+165, nYCurPos+130, 44, 55, String.valueOf(sheet31_D6), "sheet31_D6", "cell_style_23");
		objectWrite(CELL_OBJECT, nXCurPos+219, nYCurPos+130, 10, 55, "", "sheet31_F6", "cell_style_20");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+185, 77, 55, sheet31_A7, "sheet31_A7", "cell_style_21");
		objectWrite(CELL_OBJECT, nXCurPos+77, nYCurPos+185, 44, 55, sheet31_B7, "sheet31_B7", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos+121, nYCurPos+185, 44, 55, sheet31_C7, "sheet31_C7", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos+165, nYCurPos+185, 44, 55, sheet31_D7, "sheet31_D7", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos+219, nYCurPos+185, 10, 55, "", "sheet31_F7", "cell_style_20");
		objectWrite(CELL_OBJECT, nXCurPos+219, nYCurPos+240, 10, 20, "", "sheet31_F8", "cell_style_20");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+260, 219, 58, sheet31_A9, "sheet31_A9", "cell_style_24");
		objectWrite(CELL_OBJECT, nXCurPos+219, nYCurPos+260, 10, 58, "", "sheet31_F9", "cell_style_25");
		objectWrite(DRAW_OBJECT, nXCurPos+58, nYCurPos+38, 127, 17, AI_BOX_OBJ27, "AI_BOX_OBJ27", "draw_style_4");
	}

	//----v4 스크립트 문 출력 함수----
	private void writeScriptv4( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+30, 492, 24, sheet40_B2, "sheet40_B2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+69, 492, 70, sheet40_B4, "sheet40_B4", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+154, 165, 10, "", "sheet40_B6", "cell_style_27");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+154, 165, 10, "", "sheet40_C6", "cell_style_28");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos+154, 162, 10, "", "sheet40_D6", "cell_style_29");
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos+164, 492, 170, sheet40_B7, "sheet40_B7", "cell_style_30");
		
		if(true)
		{
			propertyWrite(CELL_OBJECT, "sheet40_B4", "fontName[@FIND:广州高新技术产业开发区科学城科学大道号广]|fontBold[@FIND:广州高新技术产业开发区科学城科学大道号广]|fontSize[@FIND:모두]|fontItalic[@FIND2:수준에]|fontColor[@FIND2:수준에]|fontBkColor[@FIND2:글꼴(Font)]|fontColor[@FIND2:Font]|fontUnderline[@FIND2:Font]|fontBold[@NUM2]|fontColor[@NUM2]|fontBkColor[@NUM2]", "궁서체" + "|" + "y" + "|" + "14" + "|" + "y" + "|" + "RGB[0,0,255]" + "|" + "RGB[255,0,0]" + "|" + "RGB[255,0,0]" + "|" + "y" + "|" + "y" + "|" + "RGB[255,0,0]" + "|" + "RGB[0,255,255]");
		}
		
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
		switch(nIndex){
			case 10:		//SHEET=Sheet1   FRAME=0 배경 이미지 스크립트
			//objectWrite(DRAW_OBJECT, 28, 27, 531, 785, "http://www.w3schools.com/tags/img_the_scream.jpg", "AI_IMAGE_OBJ1", "draw_style_0");
			//objectWrite(DRAW_OBJECT, 28, 27, 531, 785, "http://192.168.0.27:8080/springViewer/test/bg1.jpg", "AI_IMAGE_OBJ1", "draw_style_0");
			objectWrite(DRAW_OBJECT, 28, 27, 531, 785, "http://www.ai-report.com/expertCst/bg1.jpg", "AI_IMAGE_OBJ1", "draw_style_0");
			//objectWrite(DRAW_OBJECT, 28, 27, 531, 785, "file:///log/bg1.jpg", "AI_IMAGE_OBJ1", "draw_style_0");
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ1", "absoluteURL", "y");
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ1", "secondNumberAxisVisible", "n");
			
			//propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ1", "secondNumberAxisVisible", "n");
			//propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ1", "imageSource", "http://www.ai-report.com/images/com_img01.gif" );
			break;
			case 20:		//SHEET=Sheet2   FRAME=0 배경 이미지 스크립트
			break;
		}
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----ResultSet, Statement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, Statement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
	}

	//UDS ResultSet 객체 생성 함수
	//UDS DataSet csv_chart 객체 생성 함수
	private void createUDSDataSetcsv_chart(){
		int csvSource;
		String csvUrl;
		String csvParams;
		String csvReqMethod;
		String csvMetaInfo;
		String csvSeparator;
		String csvEncoding;
		int csvParsingLine;

		csvSource=2;
		csvUrl="http://www.ai-report.com/expertCst/chart.csv";
		csvParams=null;
		csvReqMethod="GET";
		csvMetaInfo="<a><b><c>";
		csvSeparator="TAB";
		csvEncoding="KSC5601";
		csvParsingLine=1;

		csv_chart=new CSVSetHandler(csvSource, csvUrl, csvParams, csvReqMethod);
		csv_chart.init(csvMetaInfo, csvSeparator, csvEncoding, csvParsingLine);
		csv_chart.makeDataSet();
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//UDS DataSet csv_chart 객체에서 필드 값 설정 함수
	private void setFieldVariableFromcsv_chart() throws Exception{
		csv_chart_a=GetB(csv_chart.getField(1));
		csv_chart_b=GetB(csv_chart.getField(2));
		csv_chart_c=GetB(csv_chart.getField(3));
	}

	//UDS DataSet csv_chart 객체의 필드 값 초기화 함수
	private void setFieldInitFromcsv_chart(){
		csv_chart_a="";
		csv_chart_b="";
		csv_chart_c="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		sheet10_H17="#PAGE";
		sheet10_B2="2. EXC-TAB 요약 프로파일";
		sheet10_B5=" ▶ EXC-TAPⓒ 요약 프로파일";
		AI_STRING_OBJ39="팀 과업특성";
		AI_STRING_OBJ40="팀 성숙도";
		AI_STRING_OBJ41="팀 역동성";
		sheet10_B9="  팀과업특성(Task-Contingent Model)";
		sheet10_B10="   팀이 어떤 일을 하고 있는지(과업특성)에 따라서 팀에 필요한 솔루션은 크게 달라질 수 있습니다. 이러한 \n";
		sheet10_B10=sheet10_B10 + "  내용은 직무설계(Job Design)의 대가인 Andrew Van De Ven교수에 의해 Task-Contingent Model(TCM)로\n  이론화 되었습니다. TCM에서는 과업난이도(깊이)와 과업다양성(폭)으로 과업의 특성을 측정하고 있으며,\n";
		sheet10_B10=sheet10_B10 + "  본 진단도구에서는 팀과업특성을 진단하기위해 TCM을 국내실정에 맞게 타당화하였습니다. ";
		sheet10_B12="  팀성숙도(Team Maturity Model)";
		sheet10_B13="   팀의 성숙도는 팀성과와 관련된 핵심요소 중 하나입니다. 팀성숙도는 팀공유성(shared mental model;\n  Ricahard Klimoski, 1994), 팀보완성(tracsaction memory; Daniel Wegner, 1986), 집단 응집성(group\n";
		sheet10_B13=sheet10_B13 + "  cohesiveness; Michael Hogg, 1992), 집단 효능감(collective efficacy; Albert Bandura, 2000)의 결합된\n";
		sheet10_B13=sheet10_B13 + "  개념으로 경영학과 심리학 분야에서 오랜 기간 연구된 개념입니다.  ";
		sheet10_B15="  팀역동성(Team dynamics Model)";
		sheet10_B16="   팀의 역동성은 팀성과와 직결되는 이슈입니다. 팀역동의 대가인 Daniel Levi(2007)교수는 팀과 관련된 오\n";
		sheet10_B16=sheet10_B16 + "  랜기간 동안의 다양한 연구들을 섭렵한 결과 2인 이상이 모인 “팀”이라면 항시 겪는 핵심적인 이슈가 있음\n";
		sheet10_B16=sheet10_B16 + "  을 알게 되었습니다. 이러한 핵심적인 이슈들은 팀이 어떠한 과업특성을 가지고 있고, 팀성숙도의 수준이\n";
		sheet10_B16=sheet10_B16 + "  어떠한지에 따라서 그 해결 방법이 달라질 수 있습니다.";
		AI_BOX_OBJ2="TAP의 진단영역";
		sheet20_B2="PART I : 팀 과업특성 유형결과";
		sheet30_B2=" ▶ 팀 과업특성";
		sheet30_C5="High Special";
		sheet30_D5="Professional";
		sheet30_C6="Routine";
		sheet30_D6="High General";
		sheet30_C8="★ 팀조정평균";
		sheet30_D8="●";
		sheet30_E8=" 팀구성원";
		AI_BOX_OBJ12="팀 과업특성유형 그래프";
		AI_STRING_OBJ16="과\n업\n난\n이\n도";
		AI_STRING_OBJ17="과  업  다  양  성";
		AI_STRING_OBJ26="★";
		sheet31_A5="팀 과업특성";
		sheet31_B5="T";
		sheet31_C5="R²";
		sheet31_D5="gap";
		sheet31_A6="과업 난이도";
		sheet31_B6="4.09";
		sheet31_C6="0.91";
		sheet31_D6=3.93;
		sheet31_A7="과업 다양성";
		sheet31_B7="5.00";
		sheet31_C7="0.70";
		sheet31_D7="4.20";
		sheet31_A9="R² : 팀 진단 시, 팀구성원들이 팀에 대해 얼마나 일치되게 \n      바라보고 있는지를 알 수 있는 척도. \n(0 < R2 < 1), (0.3미만 : 낮은 수준, 0.6이상 : 양호한 수준)\n";
		sheet31_A9=sheet31_A9 + "T : 팀평균에 대한 조정점수. ";
		AI_BOX_OBJ27="팀 과업특성유형별 측정치";
		sheet40_B2=" ▶ 팀 과업특성 유형에 따른 해석";
		sheet40_B4="팀의 广州高新技术产业开发区科学城科学大道号广 과업다양성이 모두 높은 수준에 해당됩니다111";
		sheet40_B7="  과업난이도가 높다는 것은 팀구성원들이 팀과업을 수행할 때 전반적으로 과업이 복잡하고 \n  해결하기 어려운 문제가 빈번히 발생한다는 것을 의미합니다.\n";
		sheet40_B7=sheet40_B7 + "  그리고 과업다양성이 높다는 것은 팀과업을 수행해 나갈 때 예측하기 어려운 변수들이 빈번히 \n  발생하고, 절차화하기 어려운 다양한 일들이 많다는 것을 의미합니다. ";
	}

	//----AI_CHART_OBJ38 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ38( ) throws Exception{
		//DataSet 객체 생성
		//UDS DataSet csv_chart 객체의 생성 여부
		if(csv_chart==null){
			createUDSDataSetcsv_chart();
		}else{
			csv_chart.beforeFirst();
		}
		
		if(!csv_chart.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ38="\t";
		AI_CHART_OBJ38=AI_CHART_OBJ38 + "b\t";
		AI_CHART_OBJ38=AI_CHART_OBJ38 + "c\r\n";

		while(csv_chart.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromcsv_chart();   //RecordSet csv_chart에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ38=AI_CHART_OBJ38 + csv_chart_a + "\t";

			//데이터 설정
			AI_CHART_OBJ38=AI_CHART_OBJ38 + csv_chart_b + "\t";
			AI_CHART_OBJ38=AI_CHART_OBJ38 + csv_chart_c + "\r\n";
			
			//logger.debug(AI_CHART_OBJ38);
		}   //while end
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=toKor(GetB(request.getParameter("reportMode")));
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + toKor(GetB(request.getParameter("reportParams"))));
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getBgImageScript(10);		//배경 이미지 함수 호출
			getScriptFromba(false, true);		//바닥글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight){
		//GetPrintHeight_AutoCode
		int ch;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		printWidth = (printWidth-4)*100;

		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
				}
			} else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;

				if (ch==13) {
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}
			} else {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}
			}
		}

		if (height>printHeight) {
			height=height-printHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight){
		//GetPrintHeightEx_AutoCode
		int ch;
		int i;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		boolean bSplit=false;
		strSplitData[0]="";
		strSplitData[1]="";
		printWidth = (printWidth-4)*100;

		for (i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
				}
			}else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;
				if (ch==13){
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					if(i!=size-1){
						bSplit=true;
						i++;
					}
					break;
				}
			}else{
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					bSplit=true;
					break;
				}
			}
		}

		if(bSplit){
			strSplitData[0]=data.substring(0, i);
			strSplitData[1]=data.substring(i);
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|6|test50.style|보고서 (2012/5/25 17:49:8)", false);
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}
}
%>
