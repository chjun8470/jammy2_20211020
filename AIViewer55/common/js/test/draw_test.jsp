<%
/************************************************************************************
Generated by AIDesigner 5.0.2.7
************************************************************************************
보고서 제목 : 보고서 (2011/8/12 10:25:3)
작성일 : 2011년8월12일 10시25분3초
작성자 :
************************************************************************************/
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.net.URL" %>
<%@ page contentType="text/html; charset=euc-kr" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>
<%@ page import="com.activeintra.util.uds.*" %>

<%
Object[] userObj = null;
ReportHandler handler = new ReportHandler(pageContext,request,response,userObj);
handler.service(out);
%>

<%!
public Logger logger = Logger.getLogger("draw_test.jsp");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT;
	private int DRAW_OBJECT;
	private String isEmpty="";		//빈 문자열 비교에 사용

	
	private PageContext pageContext;
	private HttpServletRequest request;
	private HttpServletResponse response;
	private JspWriter out;
	
	
	private AIScriptManager manager;

	//-----데이터 변수 선언-----
	String AI_ROUNDBOX_OBJ2;
	String sheet10_B5;
	String sheet10_C5;
	String sheet10_D5;
	String sheet10_E5;
	long sheet10_B6;
	String sheet10_C6;
	long sheet10_D6;
	long sheet10_E6;
	long sheet10_B7;
	String sheet10_C7;
	long sheet10_D7;
	long sheet10_E7;
	long sheet10_B8;
	String sheet10_C8;
	long sheet10_D8;
	long sheet10_E8;
	long sheet10_B9;
	String sheet10_C9;
	long sheet10_D9;
	long sheet10_E9;
	long sheet10_B10;
	String sheet10_C10;
	long sheet10_D10;
	long sheet10_E10;
	long sheet10_B11;
	String sheet10_C11;
	long sheet10_D11;
	long sheet10_E11;
	long sheet10_B12;
	String sheet10_C12;
	long sheet10_D12;
	long sheet10_E12;

	//ReportHandler 생성자 함수

	ReportHandler(PageContext pageContext,HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.pageContext=pageContext;
		this.request=request;  
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화
			
			
			logger = Logger.getLogger("test50.jsp");
				
				
			manager = new AIScriptManager(request, response, pageContext,out, logger, null);
			
			ServletContext context = pageContext.getServletContext();
			
			String temp = request.getRequestURI().replace(context.getContextPath(), "");
			

			String path = temp.replace("jsp", "style");
			

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open("HTML", context.getRealPath(path))){
			
			//manager.init("PDF", context.getRealPath(path)+filename);
			//manager.init("AIScript", context.getRealPath(path)+filename);

			//스크립트 헤더 함수 호출
			getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "56 70 56 70");

			//고정 데이터 초기화 함수 호출
			initConstVarient();

			//Connection 및 Statement 객체 생성 함수 호출
			createConnAndStateObject();

			//쿼리문 초기화 함수 호출
			initSQLConst();

			//쉬트 함수 호출
			//SHEET=Sheet1   FRAME=0 함수 호출
			executeSheet10();

			//---------------스크립트 종료---------------
			//out.print("</AIReport>");
			manager.scriptWrite("/AIReport", "", "", false);
			//out.print(manager.scriptPrint());
			manager.close();
			}
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("\r");
			out.print("AI!REPORT JSP ERROR!!!!\r");
			e.printStackTrace();
		}finally{    //finally 구문
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception {
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "56 70 56 70");
		initSheetVariant(71, 85, 525, 761, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//배경 이미지 함수 호출
		getBgImageScript(10);

		//밴드 함수 호출
		getScriptFromasd(true, true);    //Void 밴드 호출
		getScriptFromVoidBand100(true, true);    //Void 밴드 호출
		getScriptFromqwe(true, true);    //Void 밴드 호출
		getScriptFromVoidBand102(true, true);    //Void 밴드 호출
		getScriptFromdraw(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----asd VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : asd
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromasd(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=60;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptasd();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----VoidBand100 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : VoidBand100
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromVoidBand100(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//----qwe VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : qwe
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromqwe(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=160;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptqwe();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----VoidBand102 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : VoidBand102
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromVoidBand102(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//----draw VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : draw
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromdraw(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=200;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptdraw();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----asd 스크립트 문 출력 함수----
	private void writeScriptasd( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos+73, nYCurPos+7, 218, 43, "", "AI_ROUNDBOX_OBJ1", "draw_style_1");
		objectWrite(DRAW_OBJECT, nXCurPos+86, nYCurPos+13, 218, 43, AI_ROUNDBOX_OBJ2, "AI_ROUNDBOX_OBJ2", "draw_style_2");
	}

	//----qwe 스크립트 문 출력 함수----
	private void writeScriptqwe( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+44, nYCurPos, 40, 20, sheet10_B5, "sheet10_B5", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+84, nYCurPos, 116, 20, sheet10_C5, "sheet10_C5", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+200, nYCurPos, 84, 20, sheet10_D5, "sheet10_D5", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+284, nYCurPos, 104, 20, sheet10_E5, "sheet10_E5", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+44, nYCurPos+20, 40, 20, String.valueOf(sheet10_B6), "sheet10_B6", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+84, nYCurPos+20, 116, 20, sheet10_C6, "sheet10_C6", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+200, nYCurPos+20, 84, 20, String.valueOf(sheet10_D6), "sheet10_D6", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+284, nYCurPos+20, 104, 20, String.valueOf(sheet10_E6), "sheet10_E6", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+44, nYCurPos+40, 40, 20, String.valueOf(sheet10_B7), "sheet10_B7", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+84, nYCurPos+40, 116, 20, sheet10_C7, "sheet10_C7", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+200, nYCurPos+40, 84, 20, String.valueOf(sheet10_D7), "sheet10_D7", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+284, nYCurPos+40, 104, 20, String.valueOf(sheet10_E7), "sheet10_E7", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+44, nYCurPos+60, 40, 20, String.valueOf(sheet10_B8), "sheet10_B8", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+84, nYCurPos+60, 116, 20, sheet10_C8, "sheet10_C8", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+200, nYCurPos+60, 84, 20, String.valueOf(sheet10_D8), "sheet10_D8", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+284, nYCurPos+60, 104, 20, String.valueOf(sheet10_E8), "sheet10_E8", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+44, nYCurPos+80, 40, 20, String.valueOf(sheet10_B9), "sheet10_B9", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+84, nYCurPos+80, 116, 20, sheet10_C9, "sheet10_C9", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+200, nYCurPos+80, 84, 20, String.valueOf(sheet10_D9), "sheet10_D9", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+284, nYCurPos+80, 104, 20, String.valueOf(sheet10_E9), "sheet10_E9", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+44, nYCurPos+100, 40, 20, String.valueOf(sheet10_B10), "sheet10_B10", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+84, nYCurPos+100, 116, 20, sheet10_C10, "sheet10_C10", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+200, nYCurPos+100, 84, 20, String.valueOf(sheet10_D10), "sheet10_D10", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+284, nYCurPos+100, 104, 20, String.valueOf(sheet10_E10), "sheet10_E10", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+44, nYCurPos+120, 40, 20, String.valueOf(sheet10_B11), "sheet10_B11", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+84, nYCurPos+120, 116, 20, sheet10_C11, "sheet10_C11", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+200, nYCurPos+120, 84, 20, String.valueOf(sheet10_D11), "sheet10_D11", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+284, nYCurPos+120, 104, 20, String.valueOf(sheet10_E11), "sheet10_E11", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+44, nYCurPos+140, 40, 20, String.valueOf(sheet10_B12), "sheet10_B12", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+84, nYCurPos+140, 116, 20, sheet10_C12, "sheet10_C12", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+200, nYCurPos+140, 84, 20, String.valueOf(sheet10_D12), "sheet10_D12", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+284, nYCurPos+140, 104, 20, String.valueOf(sheet10_E12), "sheet10_E12", "cell_style_4");
	}

	//----draw 스크립트 문 출력 함수----
	private void writeScriptdraw( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos+23, nYCurPos+12, 97, 44, "", "AI_BOX_OBJ4", "draw_style_3");
		objectWrite(DRAW_OBJECT, nXCurPos+20, nYCurPos+80, 106, 51, "", "AI_ROUNDBOX_OBJ5", "draw_style_4");
		objectWrite(DRAW_OBJECT, nXCurPos+197, nYCurPos+33, 81, 51, "", "AI_CIRCLE_OBJ6", "draw_style_5");
		objectWrite(DRAW_OBJECT, nXCurPos+180, nYCurPos+101, 63, 36, "", "AI_CIRCLE_OBJ7", "draw_style_6");
		objectWrite(DRAW_OBJECT, nXCurPos+279, nYCurPos+29, 83, 51, "", "AI_LINE_OBJ8", "draw_style_7");
		objectWrite(DRAW_OBJECT, nXCurPos+275, nYCurPos+110, 82, 0, "", "AI_HLINE_OBJ9", "draw_style_7");
		objectWrite(DRAW_OBJECT, nXCurPos+405, nYCurPos+32, 0, 79, "", "AI_VLINE_OBJ10", "draw_style_7");
		objectWrite(DRAW_OBJECT, nXCurPos+57, nYCurPos+148, 315, 43, "http://static.naver.net/w9/btn_sch.gif", "AI_IMAGE_OBJ11", "draw_style_8");
		objectWrite(DRAW_OBJECT, nXCurPos+143, nYCurPos+14, 64, 69, "", "AI_BOX_OBJ12", "draw_style_9");
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
		switch(nIndex){
			case 10:		//SHEET=Sheet1   FRAME=0 배경 이미지 스크립트
			objectWrite(DRAW_OBJECT, 167, 204, 234, 85, "http://static.naver.net/w9/btn_sch.gif", "AI_IMAGE_OBJ3", "draw_style_0");
			break;
		}
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----ResultSet, Statement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, Statement st, CallableStatement cs, Connection conn){
		
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		AI_ROUNDBOX_OBJ2="그리기 객체 테스트";
		sheet10_B5="번호";
		sheet10_C5="지역";
		sheet10_D5="수량";
		sheet10_E5="금액";
		sheet10_B6=1;
		sheet10_C6="서울시 동대문구";
		sheet10_D6=100;
		sheet10_E6=124530;
		sheet10_B7=2;
		sheet10_C7="서울시 서대문구";
		sheet10_D7=200;
		sheet10_E7=254587;
		sheet10_B8=3;
		sheet10_C8="서울시 강남구";
		sheet10_D8=300;
		sheet10_E8=221254;
		sheet10_B9=4;
		sheet10_C9="서울시 동작구";
		sheet10_D9=400;
		sheet10_E9=2334000;
		sheet10_B10=5;
		sheet10_C10="서울시 서초구";
		sheet10_D10=500;
		sheet10_E10=555621000;
		sheet10_B11=6;
		sheet10_C11="서울시 송파구";
		sheet10_D11=1500;
		sheet10_E11=442100;
		sheet10_B12=7;
		sheet10_C12="서울시 관악수";
		sheet10_D12=2450;
		sheet10_E12=452511400;
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getBgImageScript(10);		//배경 이미지 함수 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight){
		//GetPrintHeight_AutoCode
		int ch;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		printWidth = (printWidth-4)*100;

		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
				}
			} else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;

				if (ch==13) {
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}
			} else {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}
			}
		}

		if (height>printHeight) {
			height=height-printHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight){
		//GetPrintHeightEx_AutoCode
		int ch;
		int i;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		boolean bSplit=false;
		strSplitData[0]="";
		strSplitData[1]="";
		printWidth = (printWidth-4)*100;

		for (i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
				}
			}else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;
				if (ch==13){
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					if(i!=size-1){
						bSplit=true;
						i++;
					}
					break;
				}
			}else{
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					bSplit=true;
					break;
				}
			}
		}

		if(bSplit){
			strSplitData[0]=data.substring(0, i);
			strSplitData[1]=data.substring(i);
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		//out.println("<AIReport scriptVersion=\"32\" docVersion=\"3\" style=\"test_ht.style\" title=\"보고서 (2011/7/8 14:45:16)\">");
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|3|test_ht.style|보고서 (2011/7/8 14:45:16)", false);
		//out.println("<PaperInfo name=\"" + paper + "\" size=\"" + size + "\" value=\"" + value + "\" orientation=\"" + orient + "\" margin=\"" + margin + "\"/>");
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		//out.println("<PaperInfo name=\"" + paper + "\" size=\"" + size + "\" value=\"" + value + "\" orientation=\"" + orient + "\" margin=\"" + margin + "\"/>");
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		/*if(!data.equals(isEmpty)){
			data=aiReplace(data, "&", "&amp;");
			data=aiReplace(data, "<", "&lt;");
			data=aiReplace(data, ">", "&gt;");
		}

		if(type==CELL_OBJECT){
			out.print("<CellObject left=\"" + left + "\" top=\"" + top + "\" width=\"" + width + "\" height=\"" + height + "\" style=\"" + style + "\" name=\"" + name + "\"");
			if(style.equals(isEmpty)){
				out.println("/>");
			}else{
				out.println(">" + data + "</CellObject>");
			}
		}else{
			out.print("<DrawObject left=\"" + left + "\" top=\"" + top + "\" width=\"" + width + "\" height=\"" + height + "\" style=\"" + style + "\" name=\"" + name + "\"");
			if(data.equals(isEmpty)){
				out.println("/>");
			}else{
				out.println(">" + data + "</DrawObject>");
			}
		}*/
		
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		/*style=aiReplace(style, "&", "&amp;");
		style=aiReplace(style, "<", "&lt;");
		style=aiReplace(style, ">", "&gt;");
		style=aiReplace(style, "\"", "&quot;");
		style=aiReplace(style, "'", "&apos;");
		if(type==CELL_OBJECT){
			out.println("<CellProperty name=\"" + name + "\" property=\"" + property + "\" value=\"" + style + "\"/>");
		}else{
			out.println("<DrawProperty name=\"" + name + "\" property=\"" + property + "\" value=\"" + style + "\"/>");
		}*/
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		//out.println("<Page number=\"" + pageNum + "\"/>");
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}
}
%>
