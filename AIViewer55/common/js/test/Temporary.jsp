<%
/************************************************************************************
Generated by AIDesigner 5.5.0.9
************************************************************************************
보고서 제목 : 보고서 (2013/5/1 18:43:25)
작성일 : 2013년5월1일 18시43분25초
작성자 :
************************************************************************************/
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page contentType="text/html; charset=utf-8" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>
<%@ page import="com.activeintra.util.uds.*" %>


<%
Object[] userObj = null;

String reportMode=request.getParameter("reportMode");
String reportParams=request.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext,request,response,userObj);
handler.service(out);
handler = null;
%>

<%!
private Logger logger = Logger.getLogger("Temporary.jsp");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	int[] nAutoHeight_r=new int[1];
	String sheet10_A1;
	String sheet10_B1;
	String sheet20_A10;
	String sheet20_B30;
	String sheet20_C30;
	String sheet20_B31;
	String sheet20_C31;
	String sheet20_B32;
	String sheet20_C32;
	String sheet20_B33;
	String sheet20_C33;
	String sheet20_B35;
	String sheet20_B36;
	String AI_BOX_OBJ7;
	String sheet30_A1;
	String sheet30_A2;
	String sheet30_I2;
	String sheet30_B3;
	String sheet30_C3;
	String sheet30_D3;
	String sheet30_F3;
	String sheet30_G3;
	String sheet30_B4;
	String sheet30_C4;
	String sheet30_F4;
	String sheet30_H4;
	String sheet30_B5;
	String sheet30_C5;
	String sheet30_B6;
	String sheet30_C6;
	String sheet30_B7;
	String sheet30_C7;
	String sheet30_E7;
	String sheet30_F7;
	String sheet30_H7;
	String sheet30_C8;
	String sheet30_E8;
	String AI_BOX_OBJ9;
	String sheet40_A1;
	String sheet40_A2;
	String sheet40_B2;
	String sheet40_C2;
	String sheet40_D2;
	String sheet40_E2;
	String sheet40_F2;
	String sheet40_G2;
	String sheet40_B3;
	String sheet40_C3;
	String sheet40_F3;
	String sheet40_G3;
	String sheet40_B4;
	String sheet40_C4;
	String sheet40_A5;
	String sheet40_B5;
	String sheet40_C5;
	String sheet40_F5;
	String sheet40_G5;
	String sheet40_B6;
	String sheet40_C6;
	String sheet40_F6;
	String sheet40_G6;
	String sheet50_A1;
	String sheet50_A2;
	String sheet50_B2;
	String sheet50_C2;
	String sheet50_D2;
	String sheet50_E2;
	String sheet50_F2;
	String sheet50_G2;
	String sheet50_A3;
	String sheet50_B3;
	String sheet50_C3;
	String sheet50_D3;
	String sheet50_E3;
	String sheet50_F3;
	String sheet50_G3;
	String sheet60_A1;
	String sheet60_A2;
	String sheet60_B2;
	String sheet60_C2;
	String sheet60_D2;
	String sheet60_E2;
	String sheet60_F2;
	String sheet60_G2;
	String sheet60_A3;
	String sheet60_B3;
	String sheet60_C3;
	String sheet60_D3;
	String sheet60_E3;
	long sheet60_F3;
	String sheet60_G3;
	String sheet70_A1;
	String sheet70_A2;
	String sheet70_B2;
	String sheet70_C2;
	String sheet70_A3;
	String sheet70_B3;
	String sheet70_C3;
	String sheet80_A1;
	String sheet80_A2;
	String sheet80_B2;
	String sheet80_C2;
	String sheet80_D2;
	String sheet80_E2;
	String sheet80_F2;
	long sheet80_A3;
	long sheet80_B3;
	long sheet80_C3;
	long sheet80_D3;
	String sheet80_E3;
	long sheet80_F3;
	String sheet90_A1;
	String sheet90_A2;
	String sheet90_B2;
	String sheet90_C2;
	String sheet90_D2;
	String sheet90_E2;
	String sheet90_F2;
	String sheet90_G2;
	String sheet90_A3;
	String sheet90_B3;
	String sheet90_C3;
	String sheet90_D3;
	String sheet90_E3;
	String sheet90_F3;
	String sheet90_G3;
	String sheet100_A1;
	String sheet100_A2;
	String sheet100_B2;
	String sheet100_C2;
	String sheet100_D2;
	String sheet100_E2;
	String sheet100_F2;
	String sheet100_G2;
	String sheet100_H2;
	long sheet100_A3;
	long sheet100_B3;
	String sheet100_C3;
	long sheet100_D3;
	long sheet100_E3;
	long sheet100_F3;
	long sheet100_H3;
	String sheet110_A1;
	String sheet110_A2;
	String sheet110_B2;
	String sheet110_C2;
	String sheet110_D2;
	String sheet110_A3;
	String sheet110_B3;
	String sheet110_C3;
	String sheet110_D3;
	String sheet120_A1;
	String sheet120_A2;
	String sheet120_B2;
	String sheet120_C2;
	String sheet120_D2;
	String sheet120_E2;
	String sheet120_A3;
	String sheet120_B3;
	String sheet120_C3;
	String sheet120_D3;
	String sheet120_E3;
	String sheet130_A1;
	String sheet130_A2;
	String sheet130_B2;
	String sheet130_C2;
	String sheet130_D2;
	String sheet130_E2;
	String sheet130_A3;
	String sheet130_B3;
	String sheet130_C3;
	String sheet130_D3;
	String sheet130_E3;
	String sheet140_A1;
	String sheet140_A2;
	String sheet140_B2;
	String sheet140_C2;
	String sheet140_D2;
	String sheet140_E2;
	String sheet140_F2;
	String sheet140_G2;
	String sheet140_H2;
	String sheet140_A3;
	String sheet140_B3;
	String sheet140_C3;
	String sheet140_D3;
	String sheet140_E3;
	String sheet140_F3;
	String sheet140_G3;
	String sheet140_H3;
	String sheet150_A1;
	String sheet150_A2;
	String sheet150_B2;
	String sheet150_C2;
	String sheet150_D2;
	String sheet150_E2;
	String sheet150_F2;
	String sheet150_G2;
	String sheet150_A3;
	String sheet150_B3;
	String sheet150_C3;
	String sheet150_D3;
	String sheet150_E3;
	String sheet150_F3;
	String sheet150_G3;
	String sheet160_A1;
	String sheet160_A2;
	String sheet160_B2;
	String sheet160_C2;
	String sheet160_D2;
	String sheet160_E2;
	String sheet160_A3;
	String sheet160_B3;
	String sheet160_C3;
	String sheet160_D3;
	long sheet160_E3;
	String sheet170_A1;
	String sheet170_A2;
	String sheet170_B2;
	String sheet170_C2;
	String sheet170_D2;
	String sheet170_E2;
	String sheet170_A3;
	String sheet170_B3;
	String sheet170_C3;
	String sheet170_D3;
	String sheet170_E3;
	String sheet180_A1;
	String sheet180_A2;
	String sheet180_B2;
	String sheet180_C2;
	String sheet180_D2;
	String sheet180_E2;
	String sheet180_A3;
	String sheet180_B3;
	String sheet180_C3;
	String sheet180_D3;
	String sheet180_E3;
	String sheet190_A1;
	String sheet190_A2;
	String sheet190_B2;
	String sheet190_C2;
	String sheet190_D2;
	String sheet190_A3;
	String sheet190_B3;
	String sheet190_C3;
	long sheet190_D3;
	String sheet200_A1;
	String sheet200_A2;
	String sheet200_B2;
	String sheet200_C2;
	String sheet200_D2;
	String sheet200_E2;
	String sheet200_F2;
	String sheet200_A3;
	String sheet200_B3;
	String sheet200_C3;
	String sheet200_D3;
	String sheet200_E3;
	String sheet200_F3;
	String sheet210_A1;
	String sheet210_A2;
	String sheet210_B2;
	String sheet210_C2;
	String sheet210_A3;
	String sheet210_B3;
	String sheet210_C3;
	int[] nAutoHeight_info20Band=new int[2];
	String sheet220_A1;
	String sheet220_A2;
	int[] nAutoHeight_info21Band=new int[2];
	String sheet230_A1;
	String sheet230_A2;
	int[] nAutoHeight_info22Band=new int[2];
	String sheet240_A1;
	String sheet240_A2;
	String sheet250_A1;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_sunmoon;		//DSN sunmoon Connection 객체
	private CallableStatement cs_RPT_Folio_Door_door;	//ResultSet RPT_Folio_Door_door 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Door_door;		//ResultSet RPT_Folio_Door_door 객체
	private CallableStatement cs_RPT_Folio_Info1_info1;	//ResultSet RPT_Folio_Info1_info1 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info1_info1;		//ResultSet RPT_Folio_Info1_info1 객체
	private CallableStatement cs_RPT_Folio_Info2_info2;	//ResultSet RPT_Folio_Info2_info2 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info2_info2;		//ResultSet RPT_Folio_Info2_info2 객체
	private CallableStatement cs_RPT_Folio_IsView_view;	//ResultSet RPT_Folio_IsView_view 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_IsView_view;		//ResultSet RPT_Folio_IsView_view 객체
	private CallableStatement cs_RPT_Folio_Info3_info3;	//ResultSet RPT_Folio_Info3_info3 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info3_info3;		//ResultSet RPT_Folio_Info3_info3 객체
	private CallableStatement cs_RPT_Folio_Info4_info4;	//ResultSet RPT_Folio_Info4_info4 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info4_info4;		//ResultSet RPT_Folio_Info4_info4 객체
	private CallableStatement cs_RPT_Folio_Info5_info5;	//ResultSet RPT_Folio_Info5_info5 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info5_info5;		//ResultSet RPT_Folio_Info5_info5 객체
	private CallableStatement cs_RPT_Folio_Info6_info6;	//ResultSet RPT_Folio_Info6_info6 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info6_info6;		//ResultSet RPT_Folio_Info6_info6 객체
	private CallableStatement cs_RPT_Folio_Info8_info8;	//ResultSet RPT_Folio_Info8_info8 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info8_info8;		//ResultSet RPT_Folio_Info8_info8 객체
	private CallableStatement cs_RPT_Folio_Info9_info9;	//ResultSet RPT_Folio_Info9_info9 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info9_info9;		//ResultSet RPT_Folio_Info9_info9 객체
	private CallableStatement cs_RPT_Folio_Info10_info10;	//ResultSet RPT_Folio_Info10_info10 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info10_info10;		//ResultSet RPT_Folio_Info10_info10 객체
	private CallableStatement cs_RPT_Folio_Info11_info11;	//ResultSet RPT_Folio_Info11_info11 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info11_info11;		//ResultSet RPT_Folio_Info11_info11 객체
	private CallableStatement cs_RPT_Folio_Info12_info12;	//ResultSet RPT_Folio_Info12_info12 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info12_info12;		//ResultSet RPT_Folio_Info12_info12 객체
	private CallableStatement cs_RPT_Folio_Info13_info13;	//ResultSet RPT_Folio_Info13_info13 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info13_info13;		//ResultSet RPT_Folio_Info13_info13 객체
	private CallableStatement cs_RPT_Folio_Info14_info14;	//ResultSet RPT_Folio_Info14_info14 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info14_info14;		//ResultSet RPT_Folio_Info14_info14 객체
	private CallableStatement cs_RPT_Folio_Info15_info15;	//ResultSet RPT_Folio_Info15_info15 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info15_info15;		//ResultSet RPT_Folio_Info15_info15 객체
	private CallableStatement cs_RPT_Folio_Info16_info16;	//ResultSet RPT_Folio_Info16_info16 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info16_info16;		//ResultSet RPT_Folio_Info16_info16 객체
	private CallableStatement cs_RPT_Folio_Info17_info17;	//ResultSet RPT_Folio_Info17_info17 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info17_info17;		//ResultSet RPT_Folio_Info17_info17 객체
	private CallableStatement cs_RPT_Folio_Info18_info18;	//ResultSet RPT_Folio_Info18_info18 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info18_info18;		//ResultSet RPT_Folio_Info18_info18 객체
	private CallableStatement cs_RPT_Folio_Info19_info19;	//ResultSet RPT_Folio_Info19_info19 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info19_info19;		//ResultSet RPT_Folio_Info19_info19 객체
	private CallableStatement cs_RPT_Folio_Info7_info7;	//ResultSet RPT_Folio_Info7_info7 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info7_info7;		//ResultSet RPT_Folio_Info7_info7 객체
	private CallableStatement cs_RPT_Folio_Info20_info20;	//ResultSet RPT_Folio_Info20_info20 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info20_info20;		//ResultSet RPT_Folio_Info20_info20 객체
	private CallableStatement cs_RPT_Folio_Info21_info21;	//ResultSet RPT_Folio_Info21_info21 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info21_info21;		//ResultSet RPT_Folio_Info21_info21 객체
	private CallableStatement cs_RPT_Folio_Info22_info22;	//ResultSet RPT_Folio_Info22_info22 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info22_info22;		//ResultSet RPT_Folio_Info22_info22 객체
	private CallableStatement cs_RPT_Folio_Info23_sp23;	//ResultSet RPT_Folio_Info23_sp23 객체를 생성하기 위한 CallableStatement 객체
	private ResultSet RPT_Folio_Info23_sp23;		//ResultSet RPT_Folio_Info23_sp23 객체

	//-----쿼리 필드 변수 선언-----
	//ResultSet RPT_Folio_Door_door 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Door_door_departName;
	private String RPT_Folio_Door_door_sNumber;
	private String RPT_Folio_Door_door_sName;
	private String RPT_Folio_Door_door_qrcode;

	//ResultSet RPT_Folio_Info1_info1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info1_info1_img;
	private String RPT_Folio_Info1_info1_sName;
	private String RPT_Folio_Info1_info1_cName;
	private String RPT_Folio_Info1_info1_birthDay;
	private String RPT_Folio_Info1_info1_sex;
	private String RPT_Folio_Info1_info1_addr;
	private String RPT_Folio_Info1_info1_homepage;
	private String RPT_Folio_Info1_info1_tel;
	private String RPT_Folio_Info1_info1_phone;
	private String RPT_Folio_Info1_info1_isPhone;

	//ResultSet RPT_Folio_Info2_info2 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info2_info2_isArmyName;
	private String RPT_Folio_Info2_info2_armyRankName;
	private String RPT_Folio_Info2_info2_armyKindName;
	private String RPT_Folio_Info2_info2_armyDate;
	private String RPT_Folio_Info2_info2_armyCode;
	private String RPT_Folio_Info2_info2_exemptReason;
	private String RPT_Folio_Info2_info2_isBohun;
	private String RPT_Folio_Info2_info2_bohunName;
	private String RPT_Folio_Info2_info2_bohunNo;
	private String RPT_Folio_Info2_info2_bohunDate;

	//ResultSet RPT_Folio_IsView_view 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_IsView_view_openUnit;

	//ResultSet RPT_Folio_Info3_info3 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info3_info3_schoolName;
	private String RPT_Folio_Info3_info3_region;
	private String RPT_Folio_Info3_info3_major;
	private String RPT_Folio_Info3_info3_score;
	private String RPT_Folio_Info3_info3_enterDate;
	private String RPT_Folio_Info3_info3_graduDate;
	private String RPT_Folio_Info3_info3_graduName;

	//ResultSet RPT_Folio_Info4_info4 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info4_info4_relationName;
	private String RPT_Folio_Info4_info4_fName;
	private String RPT_Folio_Info4_info4_eduName;
	private String RPT_Folio_Info4_info4_jobName;
	private String RPT_Folio_Info4_info4_birthDay;
	private long RPT_Folio_Info4_info4_old;
	private String RPT_Folio_Info4_info4_isLiveCode;

	//ResultSet RPT_Folio_Info5_info5 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info5_info5_fName;
	private String RPT_Folio_Info5_info5_jobName;
	private String RPT_Folio_Info5_info5_tel;

	//ResultSet RPT_Folio_Info6_info6 객체에서 필드 값을 받는 쿼리 필드 변수
	private long RPT_Folio_Info6_info6_year;
	private long RPT_Folio_Info6_info6_grade;
	private long RPT_Folio_Info6_info6_term;
	private long RPT_Folio_Info6_info6_getCredit;
	private String RPT_Folio_Info6_info6_markAvg;
	private long RPT_Folio_Info6_info6_chgPoint;

	//ResultSet RPT_Folio_Info8_info8 객체에서 필드 값을 받는 쿼리 필드 변수
	private long RPT_Folio_Info8_info8_year;
	private long RPT_Folio_Info8_info8_term;
	private String RPT_Folio_Info8_info8_encourageName;
	private long RPT_Folio_Info8_info8_entranceFee;
	private long RPT_Folio_Info8_info8_tuitionfee;
	private long RPT_Folio_Info8_info8_supportFee;
	private long RPT_Folio_Info8_info8_totalFee;

	//ResultSet RPT_Folio_Info9_info9 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info9_info9_isPrizeName;
	private String RPT_Folio_Info9_info9_prizeName;
	private String RPT_Folio_Info9_info9_prizeDetail;
	private String RPT_Folio_Info9_info9_getDate;

	//ResultSet RPT_Folio_Info10_info10 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info10_info10_typeName;
	private String RPT_Folio_Info10_info10_licenseName;
	private String RPT_Folio_Info10_info10_grade;
	private String RPT_Folio_Info10_info10_organName;
	private String RPT_Folio_Info10_info10_getDate;

	//ResultSet RPT_Folio_Info11_info11 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info11_info11_typeName;
	private String RPT_Folio_Info11_info11_licenseName;
	private String RPT_Folio_Info11_info11_grade;
	private String RPT_Folio_Info11_info11_organName;
	private String RPT_Folio_Info11_info11_getDate;

	//ResultSet RPT_Folio_Info12_info12 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info12_info12_divName;
	private String RPT_Folio_Info12_info12_contestName;
	private String RPT_Folio_Info12_info12_startDate;
	private String RPT_Folio_Info12_info12_endDate;
	private String RPT_Folio_Info12_info12_typeName;
	private String RPT_Folio_Info12_info12_kindName;
	private String RPT_Folio_Info12_info12_isAwardName;
	private String RPT_Folio_Info12_info12_prizeName;

	//ResultSet RPT_Folio_Info13_info13 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info13_info13_divName;
	private String RPT_Folio_Info13_info13_typeName;
	private String RPT_Folio_Info13_info13_eduName;
	private String RPT_Folio_Info13_info13_nationName;
	private String RPT_Folio_Info13_info13_organName;
	private String RPT_Folio_Info13_info13_startDate;
	private String RPT_Folio_Info13_info13_endDate;

	//ResultSet RPT_Folio_Info14_info14 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info14_info14_typeName;
	private String RPT_Folio_Info14_info14_title;
	private String RPT_Folio_Info14_info14_pubDate;
	private String RPT_Folio_Info14_info14_organName;
	private long RPT_Folio_Info14_info14_writerNumber;

	//ResultSet RPT_Folio_Info15_info15 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info15_info15_typeName;
	private String RPT_Folio_Info15_info15_title;
	private String RPT_Folio_Info15_info15_startDate;
	private String RPT_Folio_Info15_info15_endDate;
	private String RPT_Folio_Info15_info15_organName;

	//ResultSet RPT_Folio_Info16_info16 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info16_info16_typeName;
	private String RPT_Folio_Info16_info16_title;
	private String RPT_Folio_Info16_info16_positionName;
	private String RPT_Folio_Info16_info16_startDate;
	private String RPT_Folio_Info16_info16_endDate;

	//ResultSet RPT_Folio_Info17_info17 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info17_info17_typeName;
	private String RPT_Folio_Info17_info17_unitName;
	private String RPT_Folio_Info17_info17_levelName;
	private long RPT_Folio_Info17_info17_useYear;

	//ResultSet RPT_Folio_Info18_info18 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info18_info18_companyName;
	private String RPT_Folio_Info18_info18_workStartEnd;
	private String RPT_Folio_Info18_info18_career;
	private String RPT_Folio_Info18_info18_duty;
	private String RPT_Folio_Info18_info18_positionName;
	private String RPT_Folio_Info18_info18_inCome;

	//ResultSet RPT_Folio_Info19_info19 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info19_info19_title;
	private String RPT_Folio_Info19_info19_content;
	private String RPT_Folio_Info19_info19_workStartEnd;

	//ResultSet RPT_Folio_Info7_info7 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info7_info7_year;
	private String RPT_Folio_Info7_info7_term;
	private String RPT_Folio_Info7_info7_chgName;
	private String RPT_Folio_Info7_info7_reason;
	private String RPT_Folio_Info7_info7_startDate;
	private String RPT_Folio_Info7_info7_endDate;
	private String RPT_Folio_Info7_info7_grade;

	//ResultSet RPT_Folio_Info20_info20 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info20_info20_title;
	private String RPT_Folio_Info20_info20_content;

	//ResultSet RPT_Folio_Info21_info21 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info21_info21_title;
	private String RPT_Folio_Info21_info21_content;

	//ResultSet RPT_Folio_Info22_info22 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info22_info22_title;
	private String RPT_Folio_Info22_info22_content;

	//ResultSet RPT_Folio_Info23_sp23 객체에서 필드 값을 받는 쿼리 필드 변수
	private String RPT_Folio_Info23_sp23_title;
	private String RPT_Folio_Info23_sp23_content;
	private long RPT_Folio_Info23_sp23_year;

	//파라미터 변수 선언
	String fidx_Param;
	String inOutcode_Param;
	String typecode_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext,HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.pageContext=pageContext;
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "28 42 28 42");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				/*

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();
				//SHEET=Sheet2   FRAME=0 함수 호출
				executeSheet20();
				//SHEET=Sheet25   FRAME=0 함수 호출
				executeSheet250();

				*/
				executeSheet10();

				//SHEET=Sheet24   FRAME=0 함수 호출
				//executeSheet240();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("\r");
			StackTraceElement[] trace = e.getStackTrace();
			for(int i = 0; i < trace.length; i++) {
				out.println(trace[i]);
			}
			out.print("\r");
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
			//DataSet Close
			cleanup(RPT_Folio_Info23_sp23, null, cs_RPT_Folio_Info23_sp23, null);
			cleanup(RPT_Folio_Info22_info22, null, cs_RPT_Folio_Info22_info22, null);
			cleanup(RPT_Folio_Info21_info21, null, cs_RPT_Folio_Info21_info21, null);
			cleanup(RPT_Folio_Info20_info20, null, cs_RPT_Folio_Info20_info20, null);
			cleanup(RPT_Folio_Info7_info7, null, cs_RPT_Folio_Info7_info7, null);
			cleanup(RPT_Folio_Info19_info19, null, cs_RPT_Folio_Info19_info19, null);
			cleanup(RPT_Folio_Info18_info18, null, cs_RPT_Folio_Info18_info18, null);
			cleanup(RPT_Folio_Info17_info17, null, cs_RPT_Folio_Info17_info17, null);
			cleanup(RPT_Folio_Info16_info16, null, cs_RPT_Folio_Info16_info16, null);
			cleanup(RPT_Folio_Info15_info15, null, cs_RPT_Folio_Info15_info15, null);
			cleanup(RPT_Folio_Info14_info14, null, cs_RPT_Folio_Info14_info14, null);
			cleanup(RPT_Folio_Info13_info13, null, cs_RPT_Folio_Info13_info13, null);
			cleanup(RPT_Folio_Info12_info12, null, cs_RPT_Folio_Info12_info12, null);
			cleanup(RPT_Folio_Info11_info11, null, cs_RPT_Folio_Info11_info11, null);
			cleanup(RPT_Folio_Info10_info10, null, cs_RPT_Folio_Info10_info10, null);
			cleanup(RPT_Folio_Info9_info9, null, cs_RPT_Folio_Info9_info9, null);
			cleanup(RPT_Folio_Info8_info8, null, cs_RPT_Folio_Info8_info8, null);
			cleanup(RPT_Folio_Info6_info6, null, cs_RPT_Folio_Info6_info6, null);
			cleanup(RPT_Folio_Info5_info5, null, cs_RPT_Folio_Info5_info5, null);
			cleanup(RPT_Folio_Info4_info4, null, cs_RPT_Folio_Info4_info4, null);
			cleanup(RPT_Folio_Info3_info3, null, cs_RPT_Folio_Info3_info3, null);
			cleanup(RPT_Folio_IsView_view, null, cs_RPT_Folio_IsView_view, null);
			cleanup(RPT_Folio_Info2_info2, null, cs_RPT_Folio_Info2_info2, null);
			cleanup(RPT_Folio_Info1_info1, null, cs_RPT_Folio_Info1_info1, null);
			cleanup(RPT_Folio_Door_door, null, cs_RPT_Folio_Door_door, null);
			cleanup(null, null, null, conn_sunmoon);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "28 42 28 42");
		initSheetVariant(28, 42, 567, 799, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromr(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "28 42 28 42");
		initSheetVariant(28, 42, 567, 799, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromdoorBand(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		if( false ){
			//자식 쉬트 호출
			//SHEET=Sheet3   FRAME=0 함수 호출
			executeSheet30();
			//SHEET=Sheet4   FRAME=0 함수 호출
			executeSheet40();
			//SHEET=Sheet5   FRAME=0 함수 호출
			executeSheet50();
			//SHEET=Sheet6   FRAME=0 함수 호출
			executeSheet60();
			//SHEET=Sheet7   FRAME=0 함수 호출
			executeSheet70();
			//SHEET=Sheet8   FRAME=0 함수 호출
			executeSheet80();
			//SHEET=Sheet9   FRAME=0 함수 호출
			executeSheet90();
			//SHEET=Sheet10   FRAME=0 함수 호출
			executeSheet100();
			//SHEET=Sheet11   FRAME=0 함수 호출
			executeSheet110();
			//SHEET=Sheet12   FRAME=0 함수 호출
			executeSheet120();
			//SHEET=Sheet13   FRAME=0 함수 호출
			executeSheet130();
			//SHEET=Sheet14   FRAME=0 함수 호출
			executeSheet140();
			//SHEET=Sheet15   FRAME=0 함수 호출
			executeSheet150();
			//SHEET=Sheet16   FRAME=0 함수 호출
			executeSheet160();
			//SHEET=Sheet17   FRAME=0 함수 호출
			executeSheet170();
			//SHEET=Sheet18   FRAME=0 함수 호출
			executeSheet180();
			//SHEET=Sheet19   FRAME=0 함수 호출
			executeSheet190();
			//SHEET=Sheet20   FRAME=0 함수 호출
			executeSheet200();
			//SHEET=Sheet21   FRAME=0 함수 호출
			executeSheet210();
			//SHEET=Sheet22   FRAME=0 함수 호출
			executeSheet220();
			//SHEET=Sheet23   FRAME=0 함수 호출
			executeSheet230();
			//SHEET=Sheet24   FRAME=0 함수 호출
			executeSheet240();
		}
		executeSheet20();
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo1Band(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet4   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet40( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo2Band(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet5   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet50( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo3Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet6   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet60( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo4Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet7   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet70( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo5Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet8   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet80( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo6Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet9   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet90( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo7Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet10   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet100( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo8Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet11   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet110( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo9Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet12   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet120( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo10Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet13   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet130( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo11Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet14   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet140( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo12Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet15   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet150( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo13Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet16   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet160( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo14Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet17   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet170( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo15Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet18   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet180( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo16Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet19   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet190( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo17Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet20   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet200( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo18Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet21   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet210( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo19Band(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet22   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet220( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo20Band(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet23   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet230( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo21Band(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet24   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet240( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(28, 42, 567, 799, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrominfo22Band(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet25   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet250( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "28 42 28 42");
		initSheetVariant(28, 42, 567, 799, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv1(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//-----r RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : r
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromr(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=80;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 굴림
		//폰트 사이즈 : 11
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {366,366,413,825,657,963,756,312,413,413,550,688,367,688,367,459,632,632,632,632,632,632,632,632,632,632,367,367,688,688,688,596,1100,710,744,790,794,688,655,846,804,296,550,698,597,894,769,846,700,851,733,696,640,782,660,984,688,688,688,550,1009,550,596,550,366,619,666,630,666,624,376,666,628,265,265,550,255,947,638,666,666,666,366,578,345,627,550,825,550,550,550,550,550,550,871,1100};

		//데이터 변수 초기화
		sheet10_A1="";
		sheet10_B1="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info23_sp23 객체의 생성
		if(RPT_Folio_Info23_sp23==null){
			RPT_Folio_Info23_sp23 = cs_RPT_Folio_Info23_sp23.executeQuery();
		}else{
			RPT_Folio_Info23_sp23.beforeFirst();
		}

		while(RPT_Folio_Info23_sp23.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info23_sp23();	//RecordSet RPT_Folio_Info23_sp23에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			logger.debug(RPT_Folio_Info23_sp23_content);
			sheet10_B1=manager.scriptObject.HtmlDataParsing(80, 80, "cell_style_0", RPT_Folio_Info23_sp23_content, "sheet10_B1");
			logger.debug("b1---------------"+ sheet10_B1+"-------------");
			sheet10_A1="";
			sheet10_A1=sheet10_B1;
			/*

			//데이터 변수 할당
			sheet10_A1="";
			sheet10_A1=sheet10_B1;
			sheet10_B1=manager.scriptObject.HtmlDataParsing(80, 80, "cell_style_0", RPT_Folio_Info23_sp23_content, "sheet10_B1");

			*/

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				//페이지 연결 출력 루프문 시작
				boolean bSplitLoopPrint=true;
				boolean bSplitLoop=true;
				String []sheet10_A1_Split=new String[2];
				String []sheet10_B1_Split=new String[2];
				do{
					if(isPageSkip(nYCurPos+15)){   //스크립트 출력 영역 검사
						//페이지 스킵 함수 호출
						pageSkip(10);
					}   //end if(page skip test)

					//페이지 연결 출력 Auto Size Code
					nAutoHeight_r[0]=0;
					nAutoHeight_r[0]=getPrintHeightEx(sheet10_A1, sheet10_A1_Split, charWidth, 11, 454, nYEndPos-nYCurPos, nAutoHeight_r[0]);
					nAutoHeight_r[0]=manager.scriptObject.HtmlDataPrintHeightEx(nYEndPos-nYCurPos, nAutoHeight_r[0], sheet10_B1_Split, "sheet10_B1");
					nBandHeight=nAutoHeight_r[0];
					if(!sheet10_A1_Split[0].equals(isEmpty)){
						sheet10_A1=sheet10_A1_Split[0];
					}
					if(!sheet10_B1_Split[0].equals(isEmpty)){
						sheet10_B1=sheet10_B1_Split[0];
					}

					//스크립트 출력 함수 호출
					writeScriptr(bSplitLoopPrint);

					//페이지 연결 출력 및 가상병합 플래그 Reset
					if(sheet10_A1_Split[0].equals(isEmpty) && sheet10_B1_Split[0].equals(isEmpty)){
						bSplitLoop=false;
					}else{
						sheet10_A1=sheet10_A1_Split[1];
						sheet10_B1=sheet10_B1_Split[1];
						bSplitLoopPrint=false;
					}

					//다음 출력 좌표 설정
					nYCurPos=nYCurPos+nBandHeight;
				}while(bSplitLoop);    //페이지 연결 출력 루프문 종료
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)

		//수행 후 페이지 넘기기
		nYCurPos=nYEndPos;
	}

	//----doorBand VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : doorBand
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromdoorBand(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=750;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet RPT_Folio_Door_door 객체의 생성
			if(RPT_Folio_Door_door==null){
				RPT_Folio_Door_door = cs_RPT_Folio_Door_door.executeQuery();
			}else{
				RPT_Folio_Door_door.beforeFirst();
			}

			//데이터 fetch
			if(RPT_Folio_Door_door.next()){
				setFieldVariableFromRPT_Folio_Door_door();	//ResultSet RPT_Folio_Door_door에서 필드 값 설정
			}else{
				setFieldInitFromRPT_Folio_Door_door();	//ResultSet RPT_Folio_Door_door의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_C31="";
			sheet20_C32="";
			sheet20_C33="";
			AI_BOX_OBJ7="";

			//데이터 변수 할당
			sheet20_C31=RPT_Folio_Door_door_departName;
			sheet20_C32=RPT_Folio_Door_door_sNumber;
			sheet20_C33=RPT_Folio_Door_door_sName;
			AI_BOX_OBJ7=String.valueOf(RPT_Folio_Door_door_qrcode);
			//AI_BOX_OBJ7="http://localhost:8080/AIViewer55/image"+RPT_Folio_Door_door_qrcode;
			AI_BOX_OBJ7="http://localhost:8080/springViewer/AIViewer/image/loadingbar1.gif";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//objectWrite(DRAW_OBJECT, nXCurPos+433, nYCurPos+580, 80, 80, "http://"+request.getRequestURL().toString().split("/")[2]+ RPT_Folio_Door_door_qrcode , "AI_IMAGE_OBJ5", "draw_style_1");

			//스크립트 출력 함수 호출
			writeScriptdoorBand();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----info1Band VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : info1Band
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrominfo1Band(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=185;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet RPT_Folio_IsView_view 객체의 생성
			if(RPT_Folio_IsView_view==null){
				RPT_Folio_IsView_view = cs_RPT_Folio_IsView_view.executeQuery();
			}else{
				RPT_Folio_IsView_view.beforeFirst();
			}
			//ResultSet RPT_Folio_Info1_info1 객체의 생성
			if(RPT_Folio_Info1_info1==null){
				RPT_Folio_Info1_info1 = cs_RPT_Folio_Info1_info1.executeQuery();
			}else{
				RPT_Folio_Info1_info1.beforeFirst();
			}

			//데이터 fetch
			if(RPT_Folio_IsView_view.next()){
				setFieldVariableFromRPT_Folio_IsView_view();	//ResultSet RPT_Folio_IsView_view에서 필드 값 설정
			}else{
				setFieldInitFromRPT_Folio_IsView_view();	//ResultSet RPT_Folio_IsView_view의 필드 값 초기화
			}
			if(RPT_Folio_Info1_info1.next()){
				setFieldVariableFromRPT_Folio_Info1_info1();	//ResultSet RPT_Folio_Info1_info1에서 필드 값 설정
			}else{
				setFieldInitFromRPT_Folio_Info1_info1();	//ResultSet RPT_Folio_Info1_info1의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet30_I2="";
			sheet30_D3="";
			sheet30_G3="";
			sheet30_C4="";
			sheet30_H4="";
			sheet30_C5="";
			sheet30_C6="";
			sheet30_E7="";
			sheet30_H7="";
			sheet30_E8="";
			AI_BOX_OBJ9="";

			//데이터 변수 할당
			sheet30_I2=RPT_Folio_IsView_view_openUnit;
			sheet30_D3=RPT_Folio_Info1_info1_sName;
			sheet30_G3=RPT_Folio_Info1_info1_cName;
			sheet30_C4=RPT_Folio_Info1_info1_birthDay;
			sheet30_H4=RPT_Folio_Info1_info1_sex;
			sheet30_C5=RPT_Folio_Info1_info1_addr;
			sheet30_C6=RPT_Folio_Info1_info1_homepage;
			sheet30_E7=RPT_Folio_Info1_info1_tel;
			sheet30_H7=RPT_Folio_Info1_info1_phone;
			sheet30_E8=RPT_Folio_Info1_info1_isPhone;
			AI_BOX_OBJ9=String.valueOf(RPT_Folio_Info1_info1_img);
			//AI_BOX_OBJ9= "http://localhost:8080" + RPT_Folio_Info1_info1_img;
			AI_BOX_OBJ9= "http://localhost:8080/springViewer/AIViewer/image/loadingbar1.gif";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//objectWrite(DRAW_OBJECT, nXCurPos+3, nYCurPos+69, 93, 113, "http://" + request.getRequestURL().toString().split("/")[2]+ RPT_Folio_Info1_info1_img, "AI_IMAGE_OBJ6", "draw_style_0");

			//스크립트 출력 함수 호출
			writeScriptinfo1Band();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)

		String[] views = RPT_Folio_IsView_view_openUnit.split(",");

		if( views[0].equals("1") ){
			getScriptFrominfo2Band(true, true);
		}
		if( views[1].equals("1") ){
			getScriptFrominfo3Band(true);
		}
		if( views[2].equals("1") ){
			getScriptFrominfo4Band(true);
		}
		if( views[3].equals("1") ){
			getScriptFrominfo5Band(true);
		}
		if( views[4].equals("1") ){
			getScriptFrominfo6Band(true);
		}
		if( views[5].equals("1") ){
			getScriptFrominfo7Band(true);
		}
		if( views[6].equals("1") ){
			getScriptFrominfo8Band(true);
		}
		if( views[7].equals("1") ){
			getScriptFrominfo9Band(true);
		}
		if( views[8].equals("1") ){
			getScriptFrominfo10Band(true);
		}
		if( views[9].equals("1") ){
			getScriptFrominfo11Band(true);
		}
		if( views[10].equals("1") ){
			getScriptFrominfo12Band(true);
		}
		if( views[11].equals("1") ){
			getScriptFrominfo13Band(true);
		}
		if( views[12].equals("1") ){
			getScriptFrominfo14Band(true);
		}
		if( views[13].equals("1") ){
			getScriptFrominfo15Band(true);
		}
		if( views[14].equals("1") ){
			getScriptFrominfo16Band(true);
		}
		if( views[15].equals("1") ){
			getScriptFrominfo17Band(true);
		}
		if( views[16].equals("1") ){
			getScriptFrominfo18Band(true);
		}
		if( views[17].equals("1") ){
			getScriptFrominfo19Band(true);
		}
		if( views[18].equals("1") ){
			getScriptFrominfo20Band(true, true);
		}
		if( views[19].equals("1") ){
			getScriptFrominfo21Band(true, true);
		}
		if( views[20].equals("1") ){
			getScriptFrominfo22Band(true, true);
		}
	}

	//----info2Band VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : info2Band
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrominfo2Band(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=130;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet RPT_Folio_Info2_info2 객체의 생성
			if(RPT_Folio_Info2_info2==null){
				RPT_Folio_Info2_info2 = cs_RPT_Folio_Info2_info2.executeQuery();
			}else{
				RPT_Folio_Info2_info2.beforeFirst();
			}

			//데이터 fetch
			if(RPT_Folio_Info2_info2.next()){
				setFieldVariableFromRPT_Folio_Info2_info2();	//ResultSet RPT_Folio_Info2_info2에서 필드 값 설정
			}else{
				setFieldInitFromRPT_Folio_Info2_info2();	//ResultSet RPT_Folio_Info2_info2의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet40_C2="";
			sheet40_E2="";
			sheet40_G2="";
			sheet40_C3="";
			sheet40_G3="";
			sheet40_C4="";
			sheet40_C5="";
			sheet40_G5="";
			sheet40_C6="";
			sheet40_G6="";

			//데이터 변수 할당
			sheet40_C2=RPT_Folio_Info2_info2_isArmyName;
			sheet40_E2=RPT_Folio_Info2_info2_armyRankName;
			sheet40_G2=RPT_Folio_Info2_info2_armyKindName;
			sheet40_C3=RPT_Folio_Info2_info2_armyDate;
			sheet40_G3=RPT_Folio_Info2_info2_armyCode;
			sheet40_C4=RPT_Folio_Info2_info2_exemptReason;
			sheet40_C5=RPT_Folio_Info2_info2_isBohun;
			sheet40_G5=RPT_Folio_Info2_info2_bohunName;
			sheet40_C6=RPT_Folio_Info2_info2_bohunNo;
			sheet40_G6=RPT_Folio_Info2_info2_bohunDate;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo2Band();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----info3Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet5    FRAME=Frame0
	//----밴드 이름 : info3Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo3Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo3Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info3Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet5   FRAME=Frame0
	//-----밴드 이름 : info3Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo3Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet50_A3="";
		sheet50_B3="";
		sheet50_C3="";
		sheet50_D3="";
		sheet50_E3="";
		sheet50_F3="";
		sheet50_G3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info3_info3 객체의 생성
		if(RPT_Folio_Info3_info3==null){
			RPT_Folio_Info3_info3 = cs_RPT_Folio_Info3_info3.executeQuery();
		}else{
			RPT_Folio_Info3_info3.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo3Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info3_info3.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info3_info3();	//RecordSet RPT_Folio_Info3_info3에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet50_A3=RPT_Folio_Info3_info3_schoolName;
			sheet50_B3=RPT_Folio_Info3_info3_region;
			sheet50_C3=RPT_Folio_Info3_info3_major;
			sheet50_D3=RPT_Folio_Info3_info3_score;
			sheet50_E3=RPT_Folio_Info3_info3_enterDate;
			sheet50_F3=RPT_Folio_Info3_info3_graduDate;
			sheet50_G3=RPT_Folio_Info3_info3_graduName;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo3Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo3Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info4Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet6    FRAME=Frame0
	//----밴드 이름 : info4Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo4Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo4Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info4Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet6   FRAME=Frame0
	//-----밴드 이름 : info4Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo4Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet60_A3="";
		sheet60_B3="";
		sheet60_C3="";
		sheet60_D3="";
		sheet60_E3="";
		sheet60_F3=0L;
		sheet60_G3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info4_info4 객체의 생성
		if(RPT_Folio_Info4_info4==null){
			RPT_Folio_Info4_info4 = cs_RPT_Folio_Info4_info4.executeQuery();
		}else{
			RPT_Folio_Info4_info4.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo4Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info4_info4.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info4_info4();	//RecordSet RPT_Folio_Info4_info4에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet60_A3=RPT_Folio_Info4_info4_relationName;
			sheet60_B3=RPT_Folio_Info4_info4_fName;
			sheet60_C3=RPT_Folio_Info4_info4_eduName;
			sheet60_D3=RPT_Folio_Info4_info4_jobName;
			sheet60_E3=RPT_Folio_Info4_info4_birthDay;
			sheet60_F3=RPT_Folio_Info4_info4_old;
			sheet60_G3=RPT_Folio_Info4_info4_isLiveCode;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo4Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo4Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info5Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet7    FRAME=Frame0
	//----밴드 이름 : info5Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo5Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo5Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info5Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet7   FRAME=Frame0
	//-----밴드 이름 : info5Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo5Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet70_A3="";
		sheet70_B3="";
		sheet70_C3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info5_info5 객체의 생성
		if(RPT_Folio_Info5_info5==null){
			RPT_Folio_Info5_info5 = cs_RPT_Folio_Info5_info5.executeQuery();
		}else{
			RPT_Folio_Info5_info5.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo5Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info5_info5.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info5_info5();	//RecordSet RPT_Folio_Info5_info5에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet70_A3=RPT_Folio_Info5_info5_fName;
			sheet70_B3=RPT_Folio_Info5_info5_jobName;
			sheet70_C3=RPT_Folio_Info5_info5_tel;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo5Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo5Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info6Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet8    FRAME=Frame0
	//----밴드 이름 : info6Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo6Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo6Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info6Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet8   FRAME=Frame0
	//-----밴드 이름 : info6Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo6Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet80_A3=0L;
		sheet80_B3=0L;
		sheet80_C3=0L;
		sheet80_D3=0L;
		sheet80_E3="";
		sheet80_F3=0L;

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info6_info6 객체의 생성
		if(RPT_Folio_Info6_info6==null){
			RPT_Folio_Info6_info6 = cs_RPT_Folio_Info6_info6.executeQuery();
		}else{
			RPT_Folio_Info6_info6.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo6Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info6_info6.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info6_info6();	//RecordSet RPT_Folio_Info6_info6에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet80_A3=RPT_Folio_Info6_info6_year;
			sheet80_B3=RPT_Folio_Info6_info6_grade;
			sheet80_C3=RPT_Folio_Info6_info6_term;
			sheet80_D3=RPT_Folio_Info6_info6_getCredit;
			sheet80_E3=RPT_Folio_Info6_info6_markAvg;
			sheet80_F3=RPT_Folio_Info6_info6_chgPoint;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo6Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo6Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info7Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet9    FRAME=Frame0
	//----밴드 이름 : info7Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo7Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo7Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info7Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet9   FRAME=Frame0
	//-----밴드 이름 : info7Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo7Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet90_A3="";
		sheet90_B3="";
		sheet90_C3="";
		sheet90_D3="";
		sheet90_E3="";
		sheet90_F3="";
		sheet90_G3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info7_info7 객체의 생성
		if(RPT_Folio_Info7_info7==null){
			RPT_Folio_Info7_info7 = cs_RPT_Folio_Info7_info7.executeQuery();
		}else{
			RPT_Folio_Info7_info7.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo7Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info7_info7.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info7_info7();	//RecordSet RPT_Folio_Info7_info7에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet90_A3=RPT_Folio_Info7_info7_year;
			sheet90_B3=RPT_Folio_Info7_info7_grade;
			sheet90_C3=RPT_Folio_Info7_info7_term;
			sheet90_D3=RPT_Folio_Info7_info7_chgName;
			sheet90_E3=RPT_Folio_Info7_info7_reason;
			sheet90_F3=RPT_Folio_Info7_info7_startDate;
			sheet90_G3=RPT_Folio_Info7_info7_endDate;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo7Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo7Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info8Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet10    FRAME=Frame0
	//----밴드 이름 : info8Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo8Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo8Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info8Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet10   FRAME=Frame0
	//-----밴드 이름 : info8Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo8Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet100_A3=0L;
		sheet100_B3=0L;
		sheet100_C3="";
		sheet100_D3=0L;
		sheet100_E3=0L;
		sheet100_F3=0L;
		sheet100_H3=0L;

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info8_info8 객체의 생성
		if(RPT_Folio_Info8_info8==null){
			RPT_Folio_Info8_info8 = cs_RPT_Folio_Info8_info8.executeQuery();
		}else{
			RPT_Folio_Info8_info8.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo8Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info8_info8.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info8_info8();	//RecordSet RPT_Folio_Info8_info8에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet100_A3=RPT_Folio_Info8_info8_year;
			sheet100_B3=RPT_Folio_Info8_info8_term;
			sheet100_C3=RPT_Folio_Info8_info8_encourageName;
			sheet100_D3=RPT_Folio_Info8_info8_entranceFee;
			sheet100_E3=RPT_Folio_Info8_info8_tuitionfee;
			sheet100_F3=RPT_Folio_Info8_info8_supportFee;
			sheet100_H3=RPT_Folio_Info8_info8_totalFee;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo8Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo8Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info9Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet11    FRAME=Frame0
	//----밴드 이름 : info9Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo9Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo9Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info9Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet11   FRAME=Frame0
	//-----밴드 이름 : info9Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo9Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet110_A3="";
		sheet110_B3="";
		sheet110_C3="";
		sheet110_D3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info9_info9 객체의 생성
		if(RPT_Folio_Info9_info9==null){
			RPT_Folio_Info9_info9 = cs_RPT_Folio_Info9_info9.executeQuery();
		}else{
			RPT_Folio_Info9_info9.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo9Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info9_info9.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info9_info9();	//RecordSet RPT_Folio_Info9_info9에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet110_A3=RPT_Folio_Info9_info9_isPrizeName;
			sheet110_B3=RPT_Folio_Info9_info9_prizeName;
			sheet110_C3=RPT_Folio_Info9_info9_prizeDetail;
			sheet110_D3=RPT_Folio_Info9_info9_getDate;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo9Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo9Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info10Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet12    FRAME=Frame0
	//----밴드 이름 : info10Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo10Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo10Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info10Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet12   FRAME=Frame0
	//-----밴드 이름 : info10Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo10Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet120_A3="";
		sheet120_B3="";
		sheet120_C3="";
		sheet120_D3="";
		sheet120_E3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info10_info10 객체의 생성
		if(RPT_Folio_Info10_info10==null){
			RPT_Folio_Info10_info10 = cs_RPT_Folio_Info10_info10.executeQuery();
		}else{
			RPT_Folio_Info10_info10.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo10Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info10_info10.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info10_info10();	//RecordSet RPT_Folio_Info10_info10에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet120_A3=RPT_Folio_Info10_info10_typeName;
			sheet120_B3=RPT_Folio_Info10_info10_licenseName;
			sheet120_C3=RPT_Folio_Info10_info10_grade;
			sheet120_D3=RPT_Folio_Info10_info10_organName;
			sheet120_E3=RPT_Folio_Info10_info10_getDate;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo10Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo10Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info11Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet13    FRAME=Frame0
	//----밴드 이름 : info11Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo11Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo11Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info11Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet13   FRAME=Frame0
	//-----밴드 이름 : info11Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo11Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet130_A3="";
		sheet130_B3="";
		sheet130_C3="";
		sheet130_D3="";
		sheet130_E3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info11_info11 객체의 생성
		if(RPT_Folio_Info11_info11==null){
			RPT_Folio_Info11_info11 = cs_RPT_Folio_Info11_info11.executeQuery();
		}else{
			RPT_Folio_Info11_info11.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo11Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info11_info11.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info11_info11();	//RecordSet RPT_Folio_Info11_info11에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet130_A3=RPT_Folio_Info11_info11_typeName;
			sheet130_B3=RPT_Folio_Info11_info11_licenseName;
			sheet130_C3=RPT_Folio_Info11_info11_grade;
			sheet130_D3=RPT_Folio_Info11_info11_organName;
			sheet130_E3=RPT_Folio_Info11_info11_getDate;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo11Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo11Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info12Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet14    FRAME=Frame0
	//----밴드 이름 : info12Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo12Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo12Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info12Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet14   FRAME=Frame0
	//-----밴드 이름 : info12Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo12Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet140_A3="";
		sheet140_B3="";
		sheet140_C3="";
		sheet140_D3="";
		sheet140_E3="";
		sheet140_F3="";
		sheet140_G3="";
		sheet140_H3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info12_info12 객체의 생성
		if(RPT_Folio_Info12_info12==null){
			RPT_Folio_Info12_info12 = cs_RPT_Folio_Info12_info12.executeQuery();
		}else{
			RPT_Folio_Info12_info12.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo12Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info12_info12.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info12_info12();	//RecordSet RPT_Folio_Info12_info12에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet140_A3=RPT_Folio_Info12_info12_divName;
			sheet140_B3=RPT_Folio_Info12_info12_contestName;
			sheet140_C3=RPT_Folio_Info12_info12_startDate;
			sheet140_D3=RPT_Folio_Info12_info12_endDate;
			sheet140_E3=RPT_Folio_Info12_info12_typeName;
			sheet140_F3=RPT_Folio_Info12_info12_kindName;
			sheet140_G3=RPT_Folio_Info12_info12_isAwardName;
			sheet140_H3=RPT_Folio_Info12_info12_prizeName;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo12Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo12Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info13Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet15    FRAME=Frame0
	//----밴드 이름 : info13Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo13Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo13Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info13Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet15   FRAME=Frame0
	//-----밴드 이름 : info13Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo13Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet150_A3="";
		sheet150_B3="";
		sheet150_C3="";
		sheet150_D3="";
		sheet150_E3="";
		sheet150_F3="";
		sheet150_G3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info13_info13 객체의 생성
		if(RPT_Folio_Info13_info13==null){
			RPT_Folio_Info13_info13 = cs_RPT_Folio_Info13_info13.executeQuery();
		}else{
			RPT_Folio_Info13_info13.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo13Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info13_info13.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info13_info13();	//RecordSet RPT_Folio_Info13_info13에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet150_A3=RPT_Folio_Info13_info13_divName;
			sheet150_B3=RPT_Folio_Info13_info13_typeName;
			sheet150_C3=RPT_Folio_Info13_info13_eduName;
			sheet150_D3=RPT_Folio_Info13_info13_nationName;
			sheet150_E3=RPT_Folio_Info13_info13_organName;
			sheet150_F3=RPT_Folio_Info13_info13_startDate;
			sheet150_G3=RPT_Folio_Info13_info13_endDate;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo13Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo13Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info14Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet16    FRAME=Frame0
	//----밴드 이름 : info14Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo14Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo14Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info14Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet16   FRAME=Frame0
	//-----밴드 이름 : info14Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo14Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet160_A3="";
		sheet160_B3="";
		sheet160_C3="";
		sheet160_D3="";
		sheet160_E3=0L;

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info14_info14 객체의 생성
		if(RPT_Folio_Info14_info14==null){
			RPT_Folio_Info14_info14 = cs_RPT_Folio_Info14_info14.executeQuery();
		}else{
			RPT_Folio_Info14_info14.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo14Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info14_info14.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info14_info14();	//RecordSet RPT_Folio_Info14_info14에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet160_A3=RPT_Folio_Info14_info14_typeName;
			sheet160_B3=RPT_Folio_Info14_info14_title;
			sheet160_C3=RPT_Folio_Info14_info14_pubDate;
			sheet160_D3=RPT_Folio_Info14_info14_organName;
			sheet160_E3=RPT_Folio_Info14_info14_writerNumber;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo14Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo14Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info15Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet17    FRAME=Frame0
	//----밴드 이름 : info15Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo15Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo15Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info15Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet17   FRAME=Frame0
	//-----밴드 이름 : info15Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo15Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet170_A3="";
		sheet170_B3="";
		sheet170_C3="";
		sheet170_D3="";
		sheet170_E3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info15_info15 객체의 생성
		if(RPT_Folio_Info15_info15==null){
			RPT_Folio_Info15_info15 = cs_RPT_Folio_Info15_info15.executeQuery();
		}else{
			RPT_Folio_Info15_info15.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo15Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info15_info15.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info15_info15();	//RecordSet RPT_Folio_Info15_info15에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet170_A3=RPT_Folio_Info15_info15_typeName;
			sheet170_B3=RPT_Folio_Info15_info15_title;
			sheet170_C3=RPT_Folio_Info15_info15_startDate;
			sheet170_D3=RPT_Folio_Info15_info15_endDate;
			sheet170_E3=RPT_Folio_Info15_info15_organName;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo15Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo15Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info16Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet18    FRAME=Frame0
	//----밴드 이름 : info16Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo16Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo16Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info16Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet18   FRAME=Frame0
	//-----밴드 이름 : info16Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo16Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet180_A3="";
		sheet180_B3="";
		sheet180_C3="";
		sheet180_D3="";
		sheet180_E3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info16_info16 객체의 생성
		if(RPT_Folio_Info16_info16==null){
			RPT_Folio_Info16_info16 = cs_RPT_Folio_Info16_info16.executeQuery();
		}else{
			RPT_Folio_Info16_info16.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo16Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info16_info16.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info16_info16();	//RecordSet RPT_Folio_Info16_info16에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet180_A3=RPT_Folio_Info16_info16_typeName;
			sheet180_B3=RPT_Folio_Info16_info16_title;
			sheet180_C3=RPT_Folio_Info16_info16_positionName;
			sheet180_D3=RPT_Folio_Info16_info16_startDate;
			sheet180_E3=RPT_Folio_Info16_info16_endDate;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo16Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo16Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info17Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet19    FRAME=Frame0
	//----밴드 이름 : info17Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo17Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo17Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info17Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet19   FRAME=Frame0
	//-----밴드 이름 : info17Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo17Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet190_A3="";
		sheet190_B3="";
		sheet190_C3="";
		sheet190_D3=0L;

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info17_info17 객체의 생성
		if(RPT_Folio_Info17_info17==null){
			RPT_Folio_Info17_info17 = cs_RPT_Folio_Info17_info17.executeQuery();
		}else{
			RPT_Folio_Info17_info17.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo17Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info17_info17.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info17_info17();	//RecordSet RPT_Folio_Info17_info17에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet190_A3=RPT_Folio_Info17_info17_typeName;
			sheet190_B3=RPT_Folio_Info17_info17_unitName;
			sheet190_C3=RPT_Folio_Info17_info17_levelName;
			sheet190_D3=RPT_Folio_Info17_info17_useYear;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo17Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo17Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info18Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet20    FRAME=Frame0
	//----밴드 이름 : info18Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo18Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo18Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info18Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet20   FRAME=Frame0
	//-----밴드 이름 : info18Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo18Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet200_A3="";
		sheet200_B3="";
		sheet200_C3="";
		sheet200_D3="";
		sheet200_E3="";
		sheet200_F3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info18_info18 객체의 생성
		if(RPT_Folio_Info18_info18==null){
			RPT_Folio_Info18_info18 = cs_RPT_Folio_Info18_info18.executeQuery();
		}else{
			RPT_Folio_Info18_info18.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo18Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info18_info18.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info18_info18();	//RecordSet RPT_Folio_Info18_info18에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet200_A3=RPT_Folio_Info18_info18_companyName;
			sheet200_B3=RPT_Folio_Info18_info18_workStartEnd;
			sheet200_C3=RPT_Folio_Info18_info18_career;
			sheet200_D3=RPT_Folio_Info18_info18_duty;
			sheet200_E3=RPT_Folio_Info18_info18_positionName;
			sheet200_F3=RPT_Folio_Info18_info18_inCome;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo18Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo18Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info19Head RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet21    FRAME=Frame0
	//----밴드 이름 : info19Head
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrominfo19Head(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo19Head();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----info19Band RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet21   FRAME=Frame0
	//-----밴드 이름 : info19Band
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFrominfo19Band(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet210_A3="";
		sheet210_B3="";
		sheet210_C3="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info19_info19 객체의 생성
		if(RPT_Folio_Info19_info19==null){
			RPT_Folio_Info19_info19 = cs_RPT_Folio_Info19_info19.executeQuery();
		}else{
			RPT_Folio_Info19_info19.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFrominfo19Head(bIsFirst, true);	//반복 헤더 호출

		while(RPT_Folio_Info19_info19.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info19_info19();	//RecordSet RPT_Folio_Info19_info19에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet210_A3=RPT_Folio_Info19_info19_title;
			sheet210_B3=RPT_Folio_Info19_info19_content;
			sheet210_C3=RPT_Folio_Info19_info19_workStartEnd;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(20);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFrominfo19Head(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptinfo19Band();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----info20Band VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet22    FRAME=Frame0
	//----밴드 이름 : info20Band
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrominfo20Band(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;    //밴드 출력 높이
		//폰트명 : 굴림
		//폰트 사이즈 : 11
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {366,366,413,825,657,963,756,312,413,413,550,688,367,688,367,459,632,632,632,632,632,632,632,632,632,632,367,367,688,688,688,596,1100,710,744,790,794,688,655,846,804,296,550,698,597,894,769,846,700,851,733,696,640,782,660,984,688,688,688,550,1009,550,596,550,366,619,666,630,666,624,376,666,628,265,265,550,255,947,638,666,666,666,366,578,345,627,550,825,550,550,550,550,550,550,871,1100};

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet RPT_Folio_Info20_info20 객체의 생성
			if(RPT_Folio_Info20_info20==null){
				RPT_Folio_Info20_info20 = cs_RPT_Folio_Info20_info20.executeQuery();
			}else{
				RPT_Folio_Info20_info20.beforeFirst();
			}

			//데이터 fetch
			if(RPT_Folio_Info20_info20.next()){
				setFieldVariableFromRPT_Folio_Info20_info20();	//ResultSet RPT_Folio_Info20_info20에서 필드 값 설정
			}else{
				setFieldInitFromRPT_Folio_Info20_info20();	//ResultSet RPT_Folio_Info20_info20의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet220_A2="";

			//데이터 변수 할당
			sheet220_A2=RPT_Folio_Info20_info20_content;

			//Auto Size Code
			nAutoHeight_info20Band[0]=0;
			nAutoHeight_info20Band[1]=0;
			nAutoHeight_info20Band[1]=getPrintHeight(sheet220_A2, charWidth, 11, 535, 20, nAutoHeight_info20Band[1]);
			nAutoHeight_info20Band[0]=nAutoHeight_info20Band[0]+30;
			nAutoHeight_info20Band[1]=nAutoHeight_info20Band[0]+nAutoHeight_info20Band[1]+20;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			nBandHeight=nAutoHeight_info20Band[1];
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo20Band();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----info21Band VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet23    FRAME=Frame0
	//----밴드 이름 : info21Band
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrominfo21Band(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;    //밴드 출력 높이
		//폰트명 : 굴림
		//폰트 사이즈 : 11
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {366,366,413,825,657,963,756,312,413,413,550,688,367,688,367,459,632,632,632,632,632,632,632,632,632,632,367,367,688,688,688,596,1100,710,744,790,794,688,655,846,804,296,550,698,597,894,769,846,700,851,733,696,640,782,660,984,688,688,688,550,1009,550,596,550,366,619,666,630,666,624,376,666,628,265,265,550,255,947,638,666,666,666,366,578,345,627,550,825,550,550,550,550,550,550,871,1100};

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet RPT_Folio_Info21_info21 객체의 생성
			if(RPT_Folio_Info21_info21==null){
				RPT_Folio_Info21_info21 = cs_RPT_Folio_Info21_info21.executeQuery();
			}else{
				RPT_Folio_Info21_info21.beforeFirst();
			}

			//데이터 fetch
			if(RPT_Folio_Info21_info21.next()){
				setFieldVariableFromRPT_Folio_Info21_info21();	//ResultSet RPT_Folio_Info21_info21에서 필드 값 설정
			}else{
				setFieldInitFromRPT_Folio_Info21_info21();	//ResultSet RPT_Folio_Info21_info21의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet230_A2="";

			//데이터 변수 할당
			sheet230_A2=RPT_Folio_Info21_info21_content;

			//Auto Size Code
			nAutoHeight_info21Band[0]=0;
			nAutoHeight_info21Band[1]=0;
			nAutoHeight_info21Band[1]=getPrintHeight(sheet230_A2, charWidth, 11, 535, 20, nAutoHeight_info21Band[1]);
			nAutoHeight_info21Band[0]=nAutoHeight_info21Band[0]+30;
			nAutoHeight_info21Band[1]=nAutoHeight_info21Band[0]+nAutoHeight_info21Band[1]+20;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			nBandHeight=nAutoHeight_info21Band[1];
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo21Band();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----info22Band VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet24    FRAME=Frame0
	//----밴드 이름 : info22Band
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrominfo22Band(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=50;    //밴드 출력 높이
		//폰트명 : 굴림
		//폰트 사이즈 : 11
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {366,366,413,825,657,963,756,312,413,413,550,688,367,688,367,459,632,632,632,632,632,632,632,632,632,632,367,367,688,688,688,596,1100,710,744,790,794,688,655,846,804,296,550,698,597,894,769,846,700,851,733,696,640,782,660,984,688,688,688,550,1009,550,596,550,366,619,666,630,666,624,376,666,628,265,265,550,255,947,638,666,666,666,366,578,345,627,550,825,550,550,550,550,550,550,871,1100};

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet RPT_Folio_Info22_info22 객체의 생성
			if(RPT_Folio_Info22_info22==null){
				RPT_Folio_Info22_info22 = cs_RPT_Folio_Info22_info22.executeQuery();
			}else{
				RPT_Folio_Info22_info22.beforeFirst();
			}

			//데이터 fetch
			if(RPT_Folio_Info22_info22.next()){
				setFieldVariableFromRPT_Folio_Info22_info22();	//ResultSet RPT_Folio_Info22_info22에서 필드 값 설정
			}else{
				setFieldInitFromRPT_Folio_Info22_info22();	//ResultSet RPT_Folio_Info22_info22의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet240_A2="";

			//데이터 변수 할당
			sheet240_A2=RPT_Folio_Info22_info22_content;

			//Auto Size Code
			nAutoHeight_info22Band[0]=0;
			nAutoHeight_info22Band[1]=0;
			nAutoHeight_info22Band[1]=getPrintHeight(sheet240_A2, charWidth, 11, 535, 20, nAutoHeight_info22Band[1]);
			nAutoHeight_info22Band[0]=nAutoHeight_info22Band[0]+30;
			nAutoHeight_info22Band[1]=nAutoHeight_info22Band[0]+nAutoHeight_info22Band[1]+20;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			nBandHeight=nAutoHeight_info22Band[1];
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptinfo22Band();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----v1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet25   FRAME=Frame0
	//-----밴드 이름 : v1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromv1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=80;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet250_A1="";

		//DataSet 객체 생성
		//ResultSet RPT_Folio_Info23_sp23 객체의 생성
		if(RPT_Folio_Info23_sp23==null){
			RPT_Folio_Info23_sp23 = cs_RPT_Folio_Info23_sp23.executeQuery();
		}else{
			RPT_Folio_Info23_sp23.beforeFirst();
		}

		while(RPT_Folio_Info23_sp23.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromRPT_Folio_Info23_sp23();	//RecordSet RPT_Folio_Info23_sp23에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet250_A1=manager.scriptObject.HtmlDataParsing(507, 80, "cell_style_17", RPT_Folio_Info23_sp23_content, "sheet250_A1");

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(250);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptv1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)

		//수행 후 페이지 넘기기
		nYCurPos=nYEndPos;
	}

	//-----스크립트 출력 함수-----
	//----r 스크립트 문 출력 함수----
	private void writeScriptr(boolean bSplitLoopPrint) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 458, nAutoHeight_r[0], sheet10_A1, "sheet10_A1", "cell_style_0");
		manager.scriptObject.HtmlDataWrite(nXCurPos+458, nYCurPos, nAutoHeight_r[0], "cell_style_0", "sheet10_B1", manager);
	}

	//----doorBand 스크립트 문 출력 함수----
	private void writeScriptdoorBand( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+180, 538, 20, sheet20_A10, "sheet20_A10", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+580, 80, 20, sheet20_B30, "sheet20_B30", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+180, nYCurPos+580, 240, 20, sheet20_C30, "sheet20_C30", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+600, 80, 20, sheet20_B31, "sheet20_B31", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+180, nYCurPos+600, 240, 20, sheet20_C31, "sheet20_C31", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+620, 80, 20, sheet20_B32, "sheet20_B32", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+180, nYCurPos+620, 240, 20, sheet20_C32, "sheet20_C32", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+640, 80, 20, sheet20_B33, "sheet20_B33", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+180, nYCurPos+640, 240, 20, sheet20_C33, "sheet20_C33", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+670, 400, 20, sheet20_B35, "sheet20_B35", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+690, 400, 20, sheet20_B36, "sheet20_B36", "cell_style_3");
		objectWrite(DRAW_OBJECT, nXCurPos+12, nYCurPos+4, 517, 174, "", "AI_IMAGE_OBJ2", "draw_style_0");
		objectWrite(DRAW_OBJECT, nXCurPos+160, nYCurPos+271, 220, 220, "", "AI_IMAGE_OBJ4", "draw_style_1");
		objectWrite(DRAW_OBJECT, nXCurPos+429, nYCurPos+580, 80, 80, AI_BOX_OBJ7, "AI_BOX_OBJ7", "draw_style_2");
	}

	//----info1Band 스크립트 문 출력 함수----
	private void writeScriptinfo1Band( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 99, 35, sheet30_A1, "sheet30_A1", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+35, 99, 30, sheet30_A2, "sheet30_A2", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+65, 99, 120, "", "sheet30_A3", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+99, nYCurPos+65, 80, 20, sheet30_B3, "sheet30_B3", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+179, nYCurPos+65, 45, 20, sheet30_C3, "sheet30_C3", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+224, nYCurPos+65, 135, 20, sheet30_D3, "sheet30_D3", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+359, nYCurPos+65, 45, 20, sheet30_F3, "sheet30_F3", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+404, nYCurPos+65, 135, 20, sheet30_G3, "sheet30_G3", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+99, nYCurPos+85, 80, 20, sheet30_B4, "sheet30_B4", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+179, nYCurPos+85, 180, 20, sheet30_C4, "sheet30_C4", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+359, nYCurPos+85, 60, 20, sheet30_F4, "sheet30_F4", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+419, nYCurPos+85, 120, 20, sheet30_H4, "sheet30_H4", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+99, nYCurPos+105, 80, 20, sheet30_B5, "sheet30_B5", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+179, nYCurPos+105, 360, 20, sheet30_C5, "sheet30_C5", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+99, nYCurPos+125, 80, 20, sheet30_B6, "sheet30_B6", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+179, nYCurPos+125, 360, 20, sheet30_C6, "sheet30_C6", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+99, nYCurPos+145, 80, 40, sheet30_B7, "sheet30_B7", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+179, nYCurPos+145, 60, 20, sheet30_C7, "sheet30_C7", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+239, nYCurPos+145, 120, 20, sheet30_E7, "sheet30_E7", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+359, nYCurPos+145, 60, 20, sheet30_F7, "sheet30_F7", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+419, nYCurPos+145, 120, 20, sheet30_H7, "sheet30_H7", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+179, nYCurPos+165, 60, 20, sheet30_C8, "sheet30_C8", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+239, nYCurPos+165, 300, 20, sheet30_E8, "sheet30_E8", "cell_style_11");
		objectWrite(DRAW_OBJECT, nXCurPos+3, nYCurPos+69, 93, 113, AI_BOX_OBJ9, "AI_BOX_OBJ9", "draw_style_2");
	}

	//----info2Band 스크립트 문 출력 함수----
	private void writeScriptinfo2Band( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 139, 30, sheet40_A1, "sheet40_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 59, 60, sheet40_A2, "sheet40_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+59, nYCurPos+30, 80, 20, sheet40_B2, "sheet40_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+139, nYCurPos+30, 70, 20, sheet40_C2, "sheet40_C2", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+209, nYCurPos+30, 40, 20, sheet40_D2, "sheet40_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+249, nYCurPos+30, 70, 20, sheet40_E2, "sheet40_E2", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+319, nYCurPos+30, 80, 20, sheet40_F2, "sheet40_F2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+399, nYCurPos+30, 140, 20, sheet40_G2, "sheet40_G2", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+59, nYCurPos+50, 80, 20, sheet40_B3, "sheet40_B3", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+139, nYCurPos+50, 180, 20, sheet40_C3, "sheet40_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+319, nYCurPos+50, 80, 20, sheet40_F3, "sheet40_F3", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+399, nYCurPos+50, 140, 20, sheet40_G3, "sheet40_G3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+59, nYCurPos+70, 80, 20, sheet40_B4, "sheet40_B4", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+139, nYCurPos+70, 400, 20, sheet40_C4, "sheet40_C4", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+90, 59, 40, sheet40_A5, "sheet40_A5", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+59, nYCurPos+90, 80, 20, sheet40_B5, "sheet40_B5", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+139, nYCurPos+90, 180, 20, sheet40_C5, "sheet40_C5", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+319, nYCurPos+90, 80, 20, sheet40_F5, "sheet40_F5", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+399, nYCurPos+90, 140, 20, sheet40_G5, "sheet40_G5", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+59, nYCurPos+110, 80, 20, sheet40_B6, "sheet40_B6", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+139, nYCurPos+110, 180, 20, sheet40_C6, "sheet40_C6", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+319, nYCurPos+110, 80, 20, sheet40_F6, "sheet40_F6", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+399, nYCurPos+110, 140, 20, sheet40_G6, "sheet40_G6", "cell_style_12");
	}

	//----info3Head 스크립트 문 출력 함수----
	private void writeScriptinfo3Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 190, 30, sheet50_A1, "sheet50_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 120, 20, sheet50_A2, "sheet50_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+120, nYCurPos+30, 70, 20, sheet50_B2, "sheet50_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+30, 70, 20, sheet50_C2, "sheet50_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+260, nYCurPos+30, 60, 20, sheet50_D2, "sheet50_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+30, 80, 20, sheet50_E2, "sheet50_E2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+400, nYCurPos+30, 80, 20, sheet50_F2, "sheet50_F2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+480, nYCurPos+30, 59, 20, sheet50_G2, "sheet50_G2", "cell_style_8");
	}

	//----info3Band 스크립트 문 출력 함수----
	private void writeScriptinfo3Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 120, 20, sheet50_A3, "sheet50_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+120, nYCurPos, 70, 20, sheet50_B3, "sheet50_B3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos, 70, 20, sheet50_C3, "sheet50_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+260, nYCurPos, 60, 20, sheet50_D3, "sheet50_D3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos, 80, 20, sheet50_E3, "sheet50_E3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+400, nYCurPos, 80, 20, sheet50_F3, "sheet50_F3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+480, nYCurPos, 59, 20, sheet50_G3, "sheet50_G3", "cell_style_12");
	}

	//----info4Head 스크립트 문 출력 함수----
	private void writeScriptinfo4Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 160, 30, sheet60_A1, "sheet60_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 80, 20, sheet60_A2, "sheet60_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+80, nYCurPos+30, 80, 20, sheet60_B2, "sheet60_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+160, nYCurPos+30, 89, 20, sheet60_C2, "sheet60_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+249, nYCurPos+30, 90, 20, sheet60_D2, "sheet60_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+339, nYCurPos+30, 90, 20, sheet60_E2, "sheet60_E2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+30, 60, 20, sheet60_F2, "sheet60_F2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+489, nYCurPos+30, 50, 20, sheet60_G2, "sheet60_G2", "cell_style_8");
	}

	//----info4Band 스크립트 문 출력 함수----
	private void writeScriptinfo4Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 80, 20, sheet60_A3, "sheet60_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+80, nYCurPos, 80, 20, sheet60_B3, "sheet60_B3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+160, nYCurPos, 89, 20, sheet60_C3, "sheet60_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+249, nYCurPos, 90, 20, sheet60_D3, "sheet60_D3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+339, nYCurPos, 90, 20, sheet60_E3, "sheet60_E3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos, 60, 20, String.valueOf(sheet60_F3), "sheet60_F3", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+489, nYCurPos, 50, 20, sheet60_G3, "sheet60_G3", "cell_style_12");
	}

	//----info5Head 스크립트 문 출력 함수----
	private void writeScriptinfo5Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 419, 30, sheet70_A1, "sheet70_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 100, 20, sheet70_A2, "sheet70_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+30, 319, 20, sheet70_B2, "sheet70_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+419, nYCurPos+30, 120, 20, sheet70_C2, "sheet70_C2", "cell_style_8");
	}

	//----info5Band 스크립트 문 출력 함수----
	private void writeScriptinfo5Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 100, 20, sheet70_A3, "sheet70_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos, 319, 20, sheet70_B3, "sheet70_B3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+419, nYCurPos, 120, 20, sheet70_C3, "sheet70_C3", "cell_style_12");
	}

	//----info6Head 스크립트 문 출력 함수----
	private void writeScriptinfo6Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 180, 30, sheet80_A1, "sheet80_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 90, 20, sheet80_A2, "sheet80_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+90, nYCurPos+30, 90, 20, sheet80_B2, "sheet80_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+180, nYCurPos+30, 90, 20, sheet80_C2, "sheet80_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+270, nYCurPos+30, 90, 20, sheet80_D2, "sheet80_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+360, nYCurPos+30, 90, 20, sheet80_E2, "sheet80_E2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+450, nYCurPos+30, 89, 20, sheet80_F2, "sheet80_F2", "cell_style_8");
	}

	//----info6Band 스크립트 문 출력 함수----
	private void writeScriptinfo6Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 90, 20, String.valueOf(sheet80_A3), "sheet80_A3", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+90, nYCurPos, 90, 20, String.valueOf(sheet80_B3), "sheet80_B3", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+180, nYCurPos, 90, 20, String.valueOf(sheet80_C3), "sheet80_C3", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+270, nYCurPos, 90, 20, String.valueOf(sheet80_D3), "sheet80_D3", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+360, nYCurPos, 90, 20, sheet80_E3, "sheet80_E3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+450, nYCurPos, 89, 20, String.valueOf(sheet80_F3), "sheet80_F3", "cell_style_14");
	}

	//----info7Head 스크립트 문 출력 함수----
	private void writeScriptinfo7Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 100, 30, sheet90_A1, "sheet90_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 50, 20, sheet90_A2, "sheet90_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+50, nYCurPos+30, 50, 20, sheet90_B2, "sheet90_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+30, 50, 20, sheet90_C2, "sheet90_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+150, nYCurPos+30, 100, 20, sheet90_D2, "sheet90_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+250, nYCurPos+30, 140, 20, sheet90_E2, "sheet90_E2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+390, nYCurPos+30, 75, 20, sheet90_F2, "sheet90_F2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos+30, 74, 20, sheet90_G2, "sheet90_G2", "cell_style_8");
	}

	//----info7Band 스크립트 문 출력 함수----
	private void writeScriptinfo7Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 50, 20, sheet90_A3, "sheet90_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+50, nYCurPos, 50, 20, sheet90_B3, "sheet90_B3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos, 50, 20, sheet90_C3, "sheet90_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+150, nYCurPos, 100, 20, sheet90_D3, "sheet90_D3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+250, nYCurPos, 140, 20, sheet90_E3, "sheet90_E3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+390, nYCurPos, 75, 20, sheet90_F3, "sheet90_F3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos, 74, 20, sheet90_G3, "sheet90_G3", "cell_style_12");
	}

	//----info8Head 스크립트 문 출력 함수----
	private void writeScriptinfo8Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 185, 30, sheet100_A1, "sheet100_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 40, 20, sheet100_A2, "sheet100_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+40, nYCurPos+30, 35, 20, sheet100_B2, "sheet100_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+75, nYCurPos+30, 110, 20, sheet100_C2, "sheet100_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+30, 70, 20, sheet100_D2, "sheet100_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+30, 70, 20, sheet100_E2, "sheet100_E2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+325, nYCurPos+30, 70, 20, sheet100_F2, "sheet100_F2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+395, nYCurPos+30, 70, 20, sheet100_G2, "sheet100_G2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos+30, 74, 20, sheet100_H2, "sheet100_H2", "cell_style_8");
	}

	//----info8Band 스크립트 문 출력 함수----
	private void writeScriptinfo8Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 40, 20, String.valueOf(sheet100_A3), "sheet100_A3", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+40, nYCurPos, 35, 20, String.valueOf(sheet100_B3), "sheet100_B3", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+75, nYCurPos, 110, 20, sheet100_C3, "sheet100_C3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos, 70, 20, String.valueOf(sheet100_D3), "sheet100_D3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos, 70, 20, String.valueOf(sheet100_E3), "sheet100_E3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+325, nYCurPos, 70, 20, String.valueOf(sheet100_F3), "sheet100_F3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+395, nYCurPos, 70, 20, "", "sheet100_G3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+465, nYCurPos, 74, 20, String.valueOf(sheet100_H3), "sheet100_H3", "cell_style_15");
	}

	//----info9Head 스크립트 문 출력 함수----
	private void writeScriptinfo9Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 459, 30, sheet110_A1, "sheet110_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 80, 20, sheet110_A2, "sheet110_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+80, nYCurPos+30, 110, 20, sheet110_B2, "sheet110_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+30, 269, 20, sheet110_C2, "sheet110_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+459, nYCurPos+30, 80, 20, sheet110_D2, "sheet110_D2", "cell_style_8");
	}

	//----info9Band 스크립트 문 출력 함수----
	private void writeScriptinfo9Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 80, 20, sheet110_A3, "sheet110_A3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+80, nYCurPos, 110, 20, sheet110_B3, "sheet110_B3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos, 269, 20, sheet110_C3, "sheet110_C3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+459, nYCurPos, 80, 20, sheet110_D3, "sheet110_D3", "cell_style_12");
	}

	//----info10Head 스크립트 문 출력 함수----
	private void writeScriptinfo10Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 339, 30, sheet120_A1, "sheet120_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 60, 20, sheet120_A2, "sheet120_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+30, 220, 20, sheet120_B2, "sheet120_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+280, nYCurPos+30, 59, 20, sheet120_C2, "sheet120_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+339, nYCurPos+30, 120, 20, sheet120_D2, "sheet120_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+459, nYCurPos+30, 80, 20, sheet120_E2, "sheet120_E2", "cell_style_8");
	}

	//----info10Band 스크립트 문 출력 함수----
	private void writeScriptinfo10Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 60, 20, sheet120_A3, "sheet120_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos, 220, 20, sheet120_B3, "sheet120_B3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+280, nYCurPos, 59, 20, sheet120_C3, "sheet120_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+339, nYCurPos, 120, 20, sheet120_D3, "sheet120_D3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+459, nYCurPos, 80, 20, sheet120_E3, "sheet120_E3", "cell_style_12");
	}

	//----info11Head 스크립트 문 출력 함수----
	private void writeScriptinfo11Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 309, 30, sheet130_A1, "sheet130_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 60, 20, sheet130_A2, "sheet130_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+30, 169, 20, sheet130_B2, "sheet130_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+229, nYCurPos+30, 80, 20, sheet130_C2, "sheet130_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+309, nYCurPos+30, 140, 20, sheet130_D2, "sheet130_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+449, nYCurPos+30, 90, 20, sheet130_E2, "sheet130_E2", "cell_style_8");
	}

	//----info11Band 스크립트 문 출력 함수----
	private void writeScriptinfo11Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 60, 20, sheet130_A3, "sheet130_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos, 169, 20, sheet130_B3, "sheet130_B3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+229, nYCurPos, 80, 20, sheet130_C3, "sheet130_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+309, nYCurPos, 140, 20, sheet130_D3, "sheet130_D3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+449, nYCurPos, 90, 20, sheet130_E3, "sheet130_E3", "cell_style_12");
	}

	//----info12Head 스크립트 문 출력 함수----
	private void writeScriptinfo12Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 239, 30, sheet140_A1, "sheet140_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 40, 20, sheet140_A2, "sheet140_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+40, nYCurPos+30, 119, 20, sheet140_B2, "sheet140_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+159, nYCurPos+30, 80, 20, sheet140_C2, "sheet140_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+239, nYCurPos+30, 80, 20, sheet140_D2, "sheet140_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+319, nYCurPos+30, 60, 20, sheet140_E2, "sheet140_E2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+379, nYCurPos+30, 60, 20, sheet140_F2, "sheet140_F2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+439, nYCurPos+30, 60, 20, sheet140_G2, "sheet140_G2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+499, nYCurPos+30, 40, 20, sheet140_H2, "sheet140_H2", "cell_style_8");
	}

	//----info12Band 스크립트 문 출력 함수----
	private void writeScriptinfo12Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 40, 20, sheet140_A3, "sheet140_A3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+40, nYCurPos, 119, 20, sheet140_B3, "sheet140_B3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+159, nYCurPos, 80, 20, sheet140_C3, "sheet140_C3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+239, nYCurPos, 80, 20, sheet140_D3, "sheet140_D3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+319, nYCurPos, 60, 20, sheet140_E3, "sheet140_E3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+379, nYCurPos, 60, 20, sheet140_F3, "sheet140_F3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+439, nYCurPos, 60, 20, sheet140_G3, "sheet140_G3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+499, nYCurPos, 40, 20, sheet140_H3, "sheet140_H3", "cell_style_11");
	}

	//----info13Head 스크립트 문 출력 함수----
	private void writeScriptinfo13Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 210, 30, sheet150_A1, "sheet150_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 40, 20, sheet150_A2, "sheet150_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+40, nYCurPos+30, 100, 20, sheet150_B2, "sheet150_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+140, nYCurPos+30, 70, 20, sheet150_C2, "sheet150_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+210, nYCurPos+30, 70, 20, sheet150_D2, "sheet150_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+280, nYCurPos+30, 99, 20, sheet150_E2, "sheet150_E2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+379, nYCurPos+30, 80, 20, sheet150_F2, "sheet150_F2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+459, nYCurPos+30, 80, 20, sheet150_G2, "sheet150_G2", "cell_style_8");
	}

	//----info13Band 스크립트 문 출력 함수----
	private void writeScriptinfo13Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 40, 20, sheet150_A3, "sheet150_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+40, nYCurPos, 100, 20, sheet150_B3, "sheet150_B3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+140, nYCurPos, 70, 20, sheet150_C3, "sheet150_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+210, nYCurPos, 70, 20, sheet150_D3, "sheet150_D3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+280, nYCurPos, 99, 20, sheet150_E3, "sheet150_E3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+379, nYCurPos, 80, 20, sheet150_F3, "sheet150_F3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+459, nYCurPos, 80, 20, sheet150_G3, "sheet150_G3", "cell_style_12");
	}

	//----info14Head 스크립트 문 출력 함수----
	private void writeScriptinfo14Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 360, 30, sheet160_A1, "sheet160_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 60, 20, sheet160_A2, "sheet160_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+30, 220, 20, sheet160_B2, "sheet160_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+280, nYCurPos+30, 80, 20, sheet160_C2, "sheet160_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+360, nYCurPos+30, 120, 20, sheet160_D2, "sheet160_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+480, nYCurPos+30, 59, 20, sheet160_E2, "sheet160_E2", "cell_style_8");
	}

	//----info14Band 스크립트 문 출력 함수----
	private void writeScriptinfo14Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 60, 20, sheet160_A3, "sheet160_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos, 220, 20, sheet160_B3, "sheet160_B3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+280, nYCurPos, 80, 20, sheet160_C3, "sheet160_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+360, nYCurPos, 120, 20, sheet160_D3, "sheet160_D3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+480, nYCurPos, 59, 20, String.valueOf(sheet160_E3), "sheet160_E3", "cell_style_13");
	}

	//----info15Head 스크립트 문 출력 함수----
	private void writeScriptinfo15Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 350, 30, sheet170_A1, "sheet170_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 60, 20, sheet170_A2, "sheet170_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+30, 210, 20, sheet170_B2, "sheet170_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+270, nYCurPos+30, 80, 20, sheet170_C2, "sheet170_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos+30, 80, 20, sheet170_D2, "sheet170_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+30, 109, 20, sheet170_E2, "sheet170_E2", "cell_style_8");
	}

	//----info15Band 스크립트 문 출력 함수----
	private void writeScriptinfo15Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 60, 20, sheet170_A3, "sheet170_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos, 210, 20, sheet170_B3, "sheet170_B3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+270, nYCurPos, 80, 20, sheet170_C3, "sheet170_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+350, nYCurPos, 80, 20, sheet170_D3, "sheet170_D3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos, 109, 20, sheet170_E3, "sheet170_E3", "cell_style_11");
	}

	//----info16Head 스크립트 문 출력 함수----
	private void writeScriptinfo16Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 369, 30, sheet180_A1, "sheet180_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 60, 20, sheet180_A2, "sheet180_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+30, 220, 20, sheet180_B2, "sheet180_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+280, nYCurPos+30, 89, 20, sheet180_C2, "sheet180_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+369, nYCurPos+30, 85, 20, sheet180_D2, "sheet180_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+454, nYCurPos+30, 85, 20, sheet180_E2, "sheet180_E2", "cell_style_8");
	}

	//----info16Band 스크립트 문 출력 함수----
	private void writeScriptinfo16Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 60, 20, sheet180_A3, "sheet180_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos, 220, 20, sheet180_B3, "sheet180_B3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+280, nYCurPos, 89, 20, sheet180_C3, "sheet180_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+369, nYCurPos, 85, 20, sheet180_D3, "sheet180_D3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+454, nYCurPos, 85, 20, sheet180_E3, "sheet180_E3", "cell_style_12");
	}

	//----info17Head 스크립트 문 출력 함수----
	private void writeScriptinfo17Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 459, 30, sheet190_A1, "sheet190_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 120, 20, sheet190_A2, "sheet190_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+120, nYCurPos+30, 259, 20, sheet190_B2, "sheet190_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+379, nYCurPos+30, 80, 20, sheet190_C2, "sheet190_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+459, nYCurPos+30, 80, 20, sheet190_D2, "sheet190_D2", "cell_style_8");
	}

	//----info17Band 스크립트 문 출력 함수----
	private void writeScriptinfo17Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 120, 20, sheet190_A3, "sheet190_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+120, nYCurPos, 259, 20, sheet190_B3, "sheet190_B3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+379, nYCurPos, 80, 20, sheet190_C3, "sheet190_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+459, nYCurPos, 80, 20, String.valueOf(sheet190_D3), "sheet190_D3", "cell_style_13");
	}

	//----info18Head 스크립트 문 출력 함수----
	private void writeScriptinfo18Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 330, 30, sheet200_A1, "sheet200_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 100, 20, sheet200_A2, "sheet200_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+30, 160, 20, sheet200_B2, "sheet200_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+260, nYCurPos+30, 70, 20, sheet200_C2, "sheet200_C2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+330, nYCurPos+30, 100, 20, sheet200_D2, "sheet200_D2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+30, 40, 20, sheet200_E2, "sheet200_E2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+470, nYCurPos+30, 69, 20, sheet200_F2, "sheet200_F2", "cell_style_8");
	}

	//----info18Band 스크립트 문 출력 함수----
	private void writeScriptinfo18Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 100, 20, sheet200_A3, "sheet200_A3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos, 160, 20, sheet200_B3, "sheet200_B3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+260, nYCurPos, 70, 20, sheet200_C3, "sheet200_C3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+330, nYCurPos, 100, 20, sheet200_D3, "sheet200_D3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos, 40, 20, sheet200_E3, "sheet200_E3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+470, nYCurPos, 69, 20, sheet200_F3, "sheet200_F3", "cell_style_12");
	}

	//----info19Head 스크립트 문 출력 함수----
	private void writeScriptinfo19Head( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 539, 30, sheet210_A1, "sheet210_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+30, 160, 20, sheet210_A2, "sheet210_A2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+160, nYCurPos+30, 239, 20, sheet210_B2, "sheet210_B2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+399, nYCurPos+30, 140, 20, sheet210_C2, "sheet210_C2", "cell_style_8");
	}

	//----info19Band 스크립트 문 출력 함수----
	private void writeScriptinfo19Band(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 160, 20, sheet210_A3, "sheet210_A3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+160, nYCurPos, 239, 20, sheet210_B3, "sheet210_B3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+399, nYCurPos, 140, 20, sheet210_C3, "sheet210_C3", "cell_style_12");
	}

	//----info20Band 스크립트 문 출력 함수----
	private void writeScriptinfo20Band( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 240, nAutoHeight_info20Band[0], sheet220_A1, "sheet220_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_info20Band[0], 539, nAutoHeight_info20Band[1]-nAutoHeight_info20Band[0], sheet220_A2, "sheet220_A2", "cell_style_16");
	}

	//----info21Band 스크립트 문 출력 함수----
	private void writeScriptinfo21Band( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 240, nAutoHeight_info21Band[0], sheet230_A1, "sheet230_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_info21Band[0], 539, nAutoHeight_info21Band[1]-nAutoHeight_info21Band[0], sheet230_A2, "sheet230_A2", "cell_style_16");
	}

	//----info22Band 스크립트 문 출력 함수----
	private void writeScriptinfo22Band( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 240, nAutoHeight_info22Band[0], sheet240_A1, "sheet240_A1", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_info22Band[0], 539, nAutoHeight_info22Band[1]-nAutoHeight_info22Band[0], sheet240_A2, "sheet240_A2", "cell_style_16");
	}

	//----v1 스크립트 문 출력 함수----
	private void writeScriptv1(  ) throws Exception{
		//스크립트문 생성
		manager.scriptObject.HtmlDataWrite(nXCurPos, nYCurPos, 80, "cell_style_17", "sheet250_A1", manager);
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//sunmoon Connection 객체 생성
		Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
		conn_sunmoon = DriverManager.getConnection("jdbc:sqlserver://211.236.42.10:1433;DatabaseName=BLOG7SETUP_SUNMOON","user_ai","ai0000!");
		cs_RPT_Folio_Door_door=conn_sunmoon.prepareCall("{call RPT_Folio_Door(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Door_door.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info1_info1=conn_sunmoon.prepareCall("{call RPT_Folio_Info1(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info1_info1.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info2_info2=conn_sunmoon.prepareCall("{call RPT_Folio_Info2(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info2_info2.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_IsView_view=conn_sunmoon.prepareCall("{call RPT_Folio_IsView(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_IsView_view.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info3_info3=conn_sunmoon.prepareCall("{call RPT_Folio_Info3(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info3_info3.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info4_info4=conn_sunmoon.prepareCall("{call RPT_Folio_Info4(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info4_info4.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info5_info5=conn_sunmoon.prepareCall("{call RPT_Folio_Info5(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info5_info5.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info6_info6=conn_sunmoon.prepareCall("{call RPT_Folio_Info6(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info6_info6.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info8_info8=conn_sunmoon.prepareCall("{call RPT_Folio_Info8(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info8_info8.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info9_info9=conn_sunmoon.prepareCall("{call RPT_Folio_Info9(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info9_info9.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info10_info10=conn_sunmoon.prepareCall("{call RPT_Folio_Info10(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info10_info10.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info11_info11=conn_sunmoon.prepareCall("{call RPT_Folio_Info11(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info11_info11.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info12_info12=conn_sunmoon.prepareCall("{call RPT_Folio_Info12(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info12_info12.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info13_info13=conn_sunmoon.prepareCall("{call RPT_Folio_Info13(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info13_info13.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info14_info14=conn_sunmoon.prepareCall("{call RPT_Folio_Info14(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info14_info14.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info15_info15=conn_sunmoon.prepareCall("{call RPT_Folio_Info15(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info15_info15.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info16_info16=conn_sunmoon.prepareCall("{call RPT_Folio_Info16(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info16_info16.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info17_info17=conn_sunmoon.prepareCall("{call RPT_Folio_Info17(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info17_info17.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info18_info18=conn_sunmoon.prepareCall("{call RPT_Folio_Info18(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info18_info18.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info19_info19=conn_sunmoon.prepareCall("{call RPT_Folio_Info19(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info19_info19.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info7_info7=conn_sunmoon.prepareCall("{call RPT_Folio_Info7(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info7_info7.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info20_info20=conn_sunmoon.prepareCall("{call RPT_Folio_Info20(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info20_info20.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info21_info21=conn_sunmoon.prepareCall("{call RPT_Folio_Info21(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info21_info21.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info22_info22=conn_sunmoon.prepareCall("{call RPT_Folio_Info22(?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info22_info22.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info23_sp23=conn_sunmoon.prepareCall("{call RPT_Folio_Info23(?, ?, ?)}", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		cs_RPT_Folio_Info23_sp23.setInt(1, Integer.parseInt(Get0(fidx_Param)));
		cs_RPT_Folio_Info23_sp23.setString(2, inOutcode_Param);
		cs_RPT_Folio_Info23_sp23.setString(3, typecode_Param);
	}

	//-----ResultSet, Statement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, Statement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet RPT_Folio_Door_door 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Door_door() throws Exception{
		RPT_Folio_Door_door_departName=GetB(RPT_Folio_Door_door.getString(1));
		RPT_Folio_Door_door_sNumber=GetB(RPT_Folio_Door_door.getString(2));
		RPT_Folio_Door_door_sName=GetB(RPT_Folio_Door_door.getString(3));
		RPT_Folio_Door_door_qrcode=GetB(RPT_Folio_Door_door.getString(4));
	}

	//ResultSet RPT_Folio_Door_door 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Door_door(){
		RPT_Folio_Door_door_departName="";
		RPT_Folio_Door_door_sNumber="";
		RPT_Folio_Door_door_sName="";
		RPT_Folio_Door_door_qrcode="";
	}

	//ResultSet RPT_Folio_Info1_info1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info1_info1() throws Exception{
		RPT_Folio_Info1_info1_img=GetB(RPT_Folio_Info1_info1.getString(1));
		RPT_Folio_Info1_info1_sName=GetB(RPT_Folio_Info1_info1.getString(2));
		RPT_Folio_Info1_info1_cName=GetB(RPT_Folio_Info1_info1.getString(3));
		RPT_Folio_Info1_info1_birthDay=GetB(RPT_Folio_Info1_info1.getString(4));
		RPT_Folio_Info1_info1_sex=GetB(RPT_Folio_Info1_info1.getString(5));
		RPT_Folio_Info1_info1_addr=GetB(RPT_Folio_Info1_info1.getString(6));
		RPT_Folio_Info1_info1_homepage=GetB(RPT_Folio_Info1_info1.getString(7));
		RPT_Folio_Info1_info1_tel=GetB(RPT_Folio_Info1_info1.getString(8));
		RPT_Folio_Info1_info1_phone=GetB(RPT_Folio_Info1_info1.getString(9));
		RPT_Folio_Info1_info1_isPhone=GetB(RPT_Folio_Info1_info1.getString(10));
	}

	//ResultSet RPT_Folio_Info1_info1 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info1_info1(){
		RPT_Folio_Info1_info1_img="";
		RPT_Folio_Info1_info1_sName="";
		RPT_Folio_Info1_info1_cName="";
		RPT_Folio_Info1_info1_birthDay="";
		RPT_Folio_Info1_info1_sex="";
		RPT_Folio_Info1_info1_addr="";
		RPT_Folio_Info1_info1_homepage="";
		RPT_Folio_Info1_info1_tel="";
		RPT_Folio_Info1_info1_phone="";
		RPT_Folio_Info1_info1_isPhone="";
	}

	//ResultSet RPT_Folio_Info2_info2 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info2_info2() throws Exception{
		RPT_Folio_Info2_info2_isArmyName=GetB(RPT_Folio_Info2_info2.getString(1));
		RPT_Folio_Info2_info2_armyRankName=GetB(RPT_Folio_Info2_info2.getString(2));
		RPT_Folio_Info2_info2_armyKindName=GetB(RPT_Folio_Info2_info2.getString(3));
		RPT_Folio_Info2_info2_armyDate=GetB(RPT_Folio_Info2_info2.getString(4));
		RPT_Folio_Info2_info2_armyCode=GetB(RPT_Folio_Info2_info2.getString(5));
		RPT_Folio_Info2_info2_exemptReason=GetB(RPT_Folio_Info2_info2.getString(6));
		RPT_Folio_Info2_info2_isBohun=GetB(RPT_Folio_Info2_info2.getString(7));
		RPT_Folio_Info2_info2_bohunName=GetB(RPT_Folio_Info2_info2.getString(8));
		RPT_Folio_Info2_info2_bohunNo=GetB(RPT_Folio_Info2_info2.getString(9));
		RPT_Folio_Info2_info2_bohunDate=GetB(RPT_Folio_Info2_info2.getString(10));
	}

	//ResultSet RPT_Folio_Info2_info2 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info2_info2(){
		RPT_Folio_Info2_info2_isArmyName="";
		RPT_Folio_Info2_info2_armyRankName="";
		RPT_Folio_Info2_info2_armyKindName="";
		RPT_Folio_Info2_info2_armyDate="";
		RPT_Folio_Info2_info2_armyCode="";
		RPT_Folio_Info2_info2_exemptReason="";
		RPT_Folio_Info2_info2_isBohun="";
		RPT_Folio_Info2_info2_bohunName="";
		RPT_Folio_Info2_info2_bohunNo="";
		RPT_Folio_Info2_info2_bohunDate="";
	}

	//ResultSet RPT_Folio_IsView_view 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_IsView_view() throws Exception{
		RPT_Folio_IsView_view_openUnit=GetB(RPT_Folio_IsView_view.getString(1));
	}

	//ResultSet RPT_Folio_IsView_view 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_IsView_view(){
		RPT_Folio_IsView_view_openUnit="";
	}

	//ResultSet RPT_Folio_Info3_info3 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info3_info3() throws Exception{
		RPT_Folio_Info3_info3_schoolName=GetB(RPT_Folio_Info3_info3.getString(1));
		RPT_Folio_Info3_info3_region=GetB(RPT_Folio_Info3_info3.getString(2));
		RPT_Folio_Info3_info3_major=GetB(RPT_Folio_Info3_info3.getString(3));
		RPT_Folio_Info3_info3_score=GetB(RPT_Folio_Info3_info3.getString(4));
		RPT_Folio_Info3_info3_enterDate=GetB(RPT_Folio_Info3_info3.getString(5));
		RPT_Folio_Info3_info3_graduDate=GetB(RPT_Folio_Info3_info3.getString(6));
		RPT_Folio_Info3_info3_graduName=GetB(RPT_Folio_Info3_info3.getString(7));
	}

	//ResultSet RPT_Folio_Info3_info3 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info3_info3(){
		RPT_Folio_Info3_info3_schoolName="";
		RPT_Folio_Info3_info3_region="";
		RPT_Folio_Info3_info3_major="";
		RPT_Folio_Info3_info3_score="";
		RPT_Folio_Info3_info3_enterDate="";
		RPT_Folio_Info3_info3_graduDate="";
		RPT_Folio_Info3_info3_graduName="";
	}

	//ResultSet RPT_Folio_Info4_info4 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info4_info4() throws Exception{
		RPT_Folio_Info4_info4_relationName=GetB(RPT_Folio_Info4_info4.getString(1));
		RPT_Folio_Info4_info4_fName=GetB(RPT_Folio_Info4_info4.getString(2));
		RPT_Folio_Info4_info4_eduName=GetB(RPT_Folio_Info4_info4.getString(3));
		RPT_Folio_Info4_info4_jobName=GetB(RPT_Folio_Info4_info4.getString(4));
		RPT_Folio_Info4_info4_birthDay=GetB(RPT_Folio_Info4_info4.getString(5));
		RPT_Folio_Info4_info4_old=RPT_Folio_Info4_info4.getLong(6);
		RPT_Folio_Info4_info4_isLiveCode=GetB(RPT_Folio_Info4_info4.getString(7));
	}

	//ResultSet RPT_Folio_Info4_info4 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info4_info4(){
		RPT_Folio_Info4_info4_relationName="";
		RPT_Folio_Info4_info4_fName="";
		RPT_Folio_Info4_info4_eduName="";
		RPT_Folio_Info4_info4_jobName="";
		RPT_Folio_Info4_info4_birthDay="";
		RPT_Folio_Info4_info4_old=0L;
		RPT_Folio_Info4_info4_isLiveCode="";
	}

	//ResultSet RPT_Folio_Info5_info5 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info5_info5() throws Exception{
		RPT_Folio_Info5_info5_fName=GetB(RPT_Folio_Info5_info5.getString(1));
		RPT_Folio_Info5_info5_jobName=GetB(RPT_Folio_Info5_info5.getString(2));
		RPT_Folio_Info5_info5_tel=GetB(RPT_Folio_Info5_info5.getString(3));
	}

	//ResultSet RPT_Folio_Info5_info5 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info5_info5(){
		RPT_Folio_Info5_info5_fName="";
		RPT_Folio_Info5_info5_jobName="";
		RPT_Folio_Info5_info5_tel="";
	}

	//ResultSet RPT_Folio_Info6_info6 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info6_info6() throws Exception{
		RPT_Folio_Info6_info6_year=RPT_Folio_Info6_info6.getLong(1);
		RPT_Folio_Info6_info6_grade=RPT_Folio_Info6_info6.getLong(2);
		RPT_Folio_Info6_info6_term=RPT_Folio_Info6_info6.getLong(3);
		RPT_Folio_Info6_info6_getCredit=RPT_Folio_Info6_info6.getLong(4);
		RPT_Folio_Info6_info6_markAvg=GetB(RPT_Folio_Info6_info6.getString(5));
		RPT_Folio_Info6_info6_chgPoint=RPT_Folio_Info6_info6.getLong(6);
	}

	//ResultSet RPT_Folio_Info6_info6 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info6_info6(){
		RPT_Folio_Info6_info6_year=0L;
		RPT_Folio_Info6_info6_grade=0L;
		RPT_Folio_Info6_info6_term=0L;
		RPT_Folio_Info6_info6_getCredit=0L;
		RPT_Folio_Info6_info6_markAvg="";
		RPT_Folio_Info6_info6_chgPoint=0L;
	}

	//ResultSet RPT_Folio_Info8_info8 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info8_info8() throws Exception{
		RPT_Folio_Info8_info8_year=RPT_Folio_Info8_info8.getLong(1);
		RPT_Folio_Info8_info8_term=RPT_Folio_Info8_info8.getLong(2);
		RPT_Folio_Info8_info8_encourageName=GetB(RPT_Folio_Info8_info8.getString(3));
		RPT_Folio_Info8_info8_entranceFee=RPT_Folio_Info8_info8.getLong(4);
		RPT_Folio_Info8_info8_tuitionfee=RPT_Folio_Info8_info8.getLong(5);
		RPT_Folio_Info8_info8_supportFee=RPT_Folio_Info8_info8.getLong(6);
		RPT_Folio_Info8_info8_totalFee=RPT_Folio_Info8_info8.getLong(7);
	}

	//ResultSet RPT_Folio_Info8_info8 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info8_info8(){
		RPT_Folio_Info8_info8_year=0L;
		RPT_Folio_Info8_info8_term=0L;
		RPT_Folio_Info8_info8_encourageName="";
		RPT_Folio_Info8_info8_entranceFee=0L;
		RPT_Folio_Info8_info8_tuitionfee=0L;
		RPT_Folio_Info8_info8_supportFee=0L;
		RPT_Folio_Info8_info8_totalFee=0L;
	}

	//ResultSet RPT_Folio_Info9_info9 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info9_info9() throws Exception{
		RPT_Folio_Info9_info9_isPrizeName=GetB(RPT_Folio_Info9_info9.getString(1));
		RPT_Folio_Info9_info9_prizeName=GetB(RPT_Folio_Info9_info9.getString(2));
		RPT_Folio_Info9_info9_prizeDetail=GetB(RPT_Folio_Info9_info9.getString(3));
		RPT_Folio_Info9_info9_getDate=GetB(RPT_Folio_Info9_info9.getString(4));
	}

	//ResultSet RPT_Folio_Info9_info9 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info9_info9(){
		RPT_Folio_Info9_info9_isPrizeName="";
		RPT_Folio_Info9_info9_prizeName="";
		RPT_Folio_Info9_info9_prizeDetail="";
		RPT_Folio_Info9_info9_getDate="";
	}

	//ResultSet RPT_Folio_Info10_info10 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info10_info10() throws Exception{
		RPT_Folio_Info10_info10_typeName=GetB(RPT_Folio_Info10_info10.getString(1));
		RPT_Folio_Info10_info10_licenseName=GetB(RPT_Folio_Info10_info10.getString(2));
		RPT_Folio_Info10_info10_grade=GetB(RPT_Folio_Info10_info10.getString(3));
		RPT_Folio_Info10_info10_organName=GetB(RPT_Folio_Info10_info10.getString(4));
		RPT_Folio_Info10_info10_getDate=GetB(RPT_Folio_Info10_info10.getString(5));
	}

	//ResultSet RPT_Folio_Info10_info10 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info10_info10(){
		RPT_Folio_Info10_info10_typeName="";
		RPT_Folio_Info10_info10_licenseName="";
		RPT_Folio_Info10_info10_grade="";
		RPT_Folio_Info10_info10_organName="";
		RPT_Folio_Info10_info10_getDate="";
	}

	//ResultSet RPT_Folio_Info11_info11 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info11_info11() throws Exception{
		RPT_Folio_Info11_info11_typeName=GetB(RPT_Folio_Info11_info11.getString(1));
		RPT_Folio_Info11_info11_licenseName=GetB(RPT_Folio_Info11_info11.getString(2));
		RPT_Folio_Info11_info11_grade=GetB(RPT_Folio_Info11_info11.getString(3));
		RPT_Folio_Info11_info11_organName=GetB(RPT_Folio_Info11_info11.getString(4));
		RPT_Folio_Info11_info11_getDate=GetB(RPT_Folio_Info11_info11.getString(5));
	}

	//ResultSet RPT_Folio_Info11_info11 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info11_info11(){
		RPT_Folio_Info11_info11_typeName="";
		RPT_Folio_Info11_info11_licenseName="";
		RPT_Folio_Info11_info11_grade="";
		RPT_Folio_Info11_info11_organName="";
		RPT_Folio_Info11_info11_getDate="";
	}

	//ResultSet RPT_Folio_Info12_info12 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info12_info12() throws Exception{
		RPT_Folio_Info12_info12_divName=GetB(RPT_Folio_Info12_info12.getString(1));
		RPT_Folio_Info12_info12_contestName=GetB(RPT_Folio_Info12_info12.getString(2));
		RPT_Folio_Info12_info12_startDate=GetB(RPT_Folio_Info12_info12.getString(3));
		RPT_Folio_Info12_info12_endDate=GetB(RPT_Folio_Info12_info12.getString(4));
		RPT_Folio_Info12_info12_typeName=GetB(RPT_Folio_Info12_info12.getString(5));
		RPT_Folio_Info12_info12_kindName=GetB(RPT_Folio_Info12_info12.getString(6));
		RPT_Folio_Info12_info12_isAwardName=GetB(RPT_Folio_Info12_info12.getString(7));
		RPT_Folio_Info12_info12_prizeName=GetB(RPT_Folio_Info12_info12.getString(8));
	}

	//ResultSet RPT_Folio_Info12_info12 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info12_info12(){
		RPT_Folio_Info12_info12_divName="";
		RPT_Folio_Info12_info12_contestName="";
		RPT_Folio_Info12_info12_startDate="";
		RPT_Folio_Info12_info12_endDate="";
		RPT_Folio_Info12_info12_typeName="";
		RPT_Folio_Info12_info12_kindName="";
		RPT_Folio_Info12_info12_isAwardName="";
		RPT_Folio_Info12_info12_prizeName="";
	}

	//ResultSet RPT_Folio_Info13_info13 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info13_info13() throws Exception{
		RPT_Folio_Info13_info13_divName=GetB(RPT_Folio_Info13_info13.getString(1));
		RPT_Folio_Info13_info13_typeName=GetB(RPT_Folio_Info13_info13.getString(2));
		RPT_Folio_Info13_info13_eduName=GetB(RPT_Folio_Info13_info13.getString(3));
		RPT_Folio_Info13_info13_nationName=GetB(RPT_Folio_Info13_info13.getString(4));
		RPT_Folio_Info13_info13_organName=GetB(RPT_Folio_Info13_info13.getString(5));
		RPT_Folio_Info13_info13_startDate=GetB(RPT_Folio_Info13_info13.getString(6));
		RPT_Folio_Info13_info13_endDate=GetB(RPT_Folio_Info13_info13.getString(7));
	}

	//ResultSet RPT_Folio_Info13_info13 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info13_info13(){
		RPT_Folio_Info13_info13_divName="";
		RPT_Folio_Info13_info13_typeName="";
		RPT_Folio_Info13_info13_eduName="";
		RPT_Folio_Info13_info13_nationName="";
		RPT_Folio_Info13_info13_organName="";
		RPT_Folio_Info13_info13_startDate="";
		RPT_Folio_Info13_info13_endDate="";
	}

	//ResultSet RPT_Folio_Info14_info14 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info14_info14() throws Exception{
		RPT_Folio_Info14_info14_typeName=GetB(RPT_Folio_Info14_info14.getString(1));
		RPT_Folio_Info14_info14_title=GetB(RPT_Folio_Info14_info14.getString(2));
		RPT_Folio_Info14_info14_pubDate=GetB(RPT_Folio_Info14_info14.getString(3));
		RPT_Folio_Info14_info14_organName=GetB(RPT_Folio_Info14_info14.getString(4));
		RPT_Folio_Info14_info14_writerNumber=RPT_Folio_Info14_info14.getLong(5);
	}

	//ResultSet RPT_Folio_Info14_info14 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info14_info14(){
		RPT_Folio_Info14_info14_typeName="";
		RPT_Folio_Info14_info14_title="";
		RPT_Folio_Info14_info14_pubDate="";
		RPT_Folio_Info14_info14_organName="";
		RPT_Folio_Info14_info14_writerNumber=0L;
	}

	//ResultSet RPT_Folio_Info15_info15 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info15_info15() throws Exception{
		RPT_Folio_Info15_info15_typeName=GetB(RPT_Folio_Info15_info15.getString(1));
		RPT_Folio_Info15_info15_title=GetB(RPT_Folio_Info15_info15.getString(2));
		RPT_Folio_Info15_info15_startDate=GetB(RPT_Folio_Info15_info15.getString(3));
		RPT_Folio_Info15_info15_endDate=GetB(RPT_Folio_Info15_info15.getString(4));
		RPT_Folio_Info15_info15_organName=GetB(RPT_Folio_Info15_info15.getString(5));
	}

	//ResultSet RPT_Folio_Info15_info15 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info15_info15(){
		RPT_Folio_Info15_info15_typeName="";
		RPT_Folio_Info15_info15_title="";
		RPT_Folio_Info15_info15_startDate="";
		RPT_Folio_Info15_info15_endDate="";
		RPT_Folio_Info15_info15_organName="";
	}

	//ResultSet RPT_Folio_Info16_info16 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info16_info16() throws Exception{
		RPT_Folio_Info16_info16_typeName=GetB(RPT_Folio_Info16_info16.getString(1));
		RPT_Folio_Info16_info16_title=GetB(RPT_Folio_Info16_info16.getString(2));
		RPT_Folio_Info16_info16_positionName=GetB(RPT_Folio_Info16_info16.getString(3));
		RPT_Folio_Info16_info16_startDate=GetB(RPT_Folio_Info16_info16.getString(4));
		RPT_Folio_Info16_info16_endDate=GetB(RPT_Folio_Info16_info16.getString(5));
	}

	//ResultSet RPT_Folio_Info16_info16 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info16_info16(){
		RPT_Folio_Info16_info16_typeName="";
		RPT_Folio_Info16_info16_title="";
		RPT_Folio_Info16_info16_positionName="";
		RPT_Folio_Info16_info16_startDate="";
		RPT_Folio_Info16_info16_endDate="";
	}

	//ResultSet RPT_Folio_Info17_info17 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info17_info17() throws Exception{
		RPT_Folio_Info17_info17_typeName=GetB(RPT_Folio_Info17_info17.getString(1));
		RPT_Folio_Info17_info17_unitName=GetB(RPT_Folio_Info17_info17.getString(2));
		RPT_Folio_Info17_info17_levelName=GetB(RPT_Folio_Info17_info17.getString(3));
		RPT_Folio_Info17_info17_useYear=RPT_Folio_Info17_info17.getLong(4);
	}

	//ResultSet RPT_Folio_Info17_info17 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info17_info17(){
		RPT_Folio_Info17_info17_typeName="";
		RPT_Folio_Info17_info17_unitName="";
		RPT_Folio_Info17_info17_levelName="";
		RPT_Folio_Info17_info17_useYear=0L;
	}

	//ResultSet RPT_Folio_Info18_info18 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info18_info18() throws Exception{
		RPT_Folio_Info18_info18_companyName=GetB(RPT_Folio_Info18_info18.getString(1));
		RPT_Folio_Info18_info18_workStartEnd=GetB(RPT_Folio_Info18_info18.getString(2));
		RPT_Folio_Info18_info18_career=GetB(RPT_Folio_Info18_info18.getString(3));
		RPT_Folio_Info18_info18_duty=GetB(RPT_Folio_Info18_info18.getString(4));
		RPT_Folio_Info18_info18_positionName=GetB(RPT_Folio_Info18_info18.getString(5));
		RPT_Folio_Info18_info18_inCome=GetB(RPT_Folio_Info18_info18.getString(6));
	}

	//ResultSet RPT_Folio_Info18_info18 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info18_info18(){
		RPT_Folio_Info18_info18_companyName="";
		RPT_Folio_Info18_info18_workStartEnd="";
		RPT_Folio_Info18_info18_career="";
		RPT_Folio_Info18_info18_duty="";
		RPT_Folio_Info18_info18_positionName="";
		RPT_Folio_Info18_info18_inCome="";
	}

	//ResultSet RPT_Folio_Info19_info19 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info19_info19() throws Exception{
		RPT_Folio_Info19_info19_title=GetB(RPT_Folio_Info19_info19.getString(1));
		RPT_Folio_Info19_info19_content=GetB(RPT_Folio_Info19_info19.getString(2));
		RPT_Folio_Info19_info19_workStartEnd=GetB(RPT_Folio_Info19_info19.getString(3));
	}

	//ResultSet RPT_Folio_Info19_info19 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info19_info19(){
		RPT_Folio_Info19_info19_title="";
		RPT_Folio_Info19_info19_content="";
		RPT_Folio_Info19_info19_workStartEnd="";
	}

	//ResultSet RPT_Folio_Info7_info7 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info7_info7() throws Exception{
		RPT_Folio_Info7_info7_year=GetB(RPT_Folio_Info7_info7.getString(1));
		RPT_Folio_Info7_info7_term=GetB(RPT_Folio_Info7_info7.getString(2));
		RPT_Folio_Info7_info7_chgName=GetB(RPT_Folio_Info7_info7.getString(3));
		RPT_Folio_Info7_info7_reason=GetB(RPT_Folio_Info7_info7.getString(4));
		RPT_Folio_Info7_info7_startDate=GetB(RPT_Folio_Info7_info7.getString(5));
		RPT_Folio_Info7_info7_endDate=GetB(RPT_Folio_Info7_info7.getString(6));
		RPT_Folio_Info7_info7_grade=GetB(RPT_Folio_Info7_info7.getString(7));
	}

	//ResultSet RPT_Folio_Info7_info7 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info7_info7(){
		RPT_Folio_Info7_info7_year="";
		RPT_Folio_Info7_info7_term="";
		RPT_Folio_Info7_info7_chgName="";
		RPT_Folio_Info7_info7_reason="";
		RPT_Folio_Info7_info7_startDate="";
		RPT_Folio_Info7_info7_endDate="";
		RPT_Folio_Info7_info7_grade="";
	}

	//ResultSet RPT_Folio_Info20_info20 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info20_info20() throws Exception{
		RPT_Folio_Info20_info20_title=GetB(RPT_Folio_Info20_info20.getString(1));
		RPT_Folio_Info20_info20_content=GetB(RPT_Folio_Info20_info20.getString(2));
	}

	//ResultSet RPT_Folio_Info20_info20 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info20_info20(){
		RPT_Folio_Info20_info20_title="";
		RPT_Folio_Info20_info20_content="";
	}

	//ResultSet RPT_Folio_Info21_info21 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info21_info21() throws Exception{
		RPT_Folio_Info21_info21_title=GetB(RPT_Folio_Info21_info21.getString(1));
		RPT_Folio_Info21_info21_content=GetB(RPT_Folio_Info21_info21.getString(2));
	}

	//ResultSet RPT_Folio_Info21_info21 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info21_info21(){
		RPT_Folio_Info21_info21_title="";
		RPT_Folio_Info21_info21_content="";
	}

	//ResultSet RPT_Folio_Info22_info22 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info22_info22() throws Exception{
		RPT_Folio_Info22_info22_title=GetB(RPT_Folio_Info22_info22.getString(1));
		RPT_Folio_Info22_info22_content=GetB(RPT_Folio_Info22_info22.getString(2));
	}

	//ResultSet RPT_Folio_Info22_info22 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info22_info22(){
		RPT_Folio_Info22_info22_title="";
		RPT_Folio_Info22_info22_content="";
	}

	//ResultSet RPT_Folio_Info23_sp23 객체에서 필드 값 설정 함수
	private void setFieldVariableFromRPT_Folio_Info23_sp23() throws Exception{
		RPT_Folio_Info23_sp23_title=GetB(RPT_Folio_Info23_sp23.getString(1));
		RPT_Folio_Info23_sp23_content=GetB(RPT_Folio_Info23_sp23.getString(2));
		RPT_Folio_Info23_sp23_year=RPT_Folio_Info23_sp23.getLong(3);
	}

	//ResultSet RPT_Folio_Info23_sp23 객체의 필드 값 초기화 함수
	private void setFieldInitFromRPT_Folio_Info23_sp23(){
		RPT_Folio_Info23_sp23_title="";
		RPT_Folio_Info23_sp23_content="";
		RPT_Folio_Info23_sp23_year=0L;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		sheet20_A10="미래사회를 이끌어갈 'Global Leader'를 양성하는 선문 르네상스를 열어갑니다.";
		sheet20_B30="학 교";
		sheet20_C30="선문대학교";
		sheet20_B31="학 과";
		sheet20_B32="학 번";
		sheet20_B33="이 름";
		sheet20_B35="* 모든 기재사항은 사실과 다름없음을 확인합니다.";
		sheet20_B36="* QR코드를 인식하시면 해당 폴리오로 이동됩니다.";
		sheet30_A1="1. 나의소개";
		sheet30_A2="⊙ 기본사항";
		sheet30_B3="성    명";
		sheet30_C3="(한글)";
		sheet30_F3="(漢字)";
		sheet30_B4="생년월일";
		sheet30_F4="성별";
		sheet30_B5="주    소";
		sheet30_B6="개인홈피";
		sheet30_B7="연락처";
		sheet30_C7="전화번호";
		sheet30_F7="휴대폰";
		sheet30_C8="E-mail";
		sheet40_A1="⊙ 병역/보훈사항";
		sheet40_A2="병역정보";
		sheet40_B2="역종구분";
		sheet40_D2="계급";
		sheet40_F2="군별";
		sheet40_B3="복무기간";
		sheet40_F3="군번";
		sheet40_B4="면제사유";
		sheet40_A5="보훈정보";
		sheet40_B5="보훈대상";
		sheet40_F5="보훈구분";
		sheet40_B6="보훈번호";
		sheet40_F6="보훈대상일";
		sheet50_A1="⊙ 학력정보";
		sheet50_A2="학교명";
		sheet50_B2="소재지(지역)";
		sheet50_C2="전공";
		sheet50_D2="성적";
		sheet50_E2="입학일자";
		sheet50_F2="졸업일자";
		sheet50_G2="졸업구분";
		sheet60_A1="⊙ 가족사항";
		sheet60_A2="관계";
		sheet60_B2="성명";
		sheet60_C2="학력";
		sheet60_D2="직업";
		sheet60_E2="생년월일";
		sheet60_F2="연령";
		sheet60_G2="동거여부";
		sheet70_A1="⊙ 교우관계";
		sheet70_A2="성명";
		sheet70_B2="대학/직장명";
		sheet70_C2="연락처";
		sheet80_A1="⊙ 성적정보";
		sheet80_A2="이수년도";
		sheet80_B2="학년";
		sheet80_C2="학기";
		sheet80_D2="이수학점";
		sheet80_E2="평점/만점";
		sheet80_F2="환산점수";
		sheet90_A1="⊙ 학적변동이력";
		sheet90_A2="년도";
		sheet90_B2="학년";
		sheet90_C2="학기";
		sheet90_D2="변동구분";
		sheet90_E2="변동사유";
		sheet90_F2="변동시점";
		sheet90_G2="변동종점";
		sheet100_A1="⊙ 장학수혜정보";
		sheet100_A2="년도";
		sheet100_B2="학기";
		sheet100_C2="장학구분";
		sheet100_D2="장학입학금";
		sheet100_E2="장학수업료";
		sheet100_F2="장학기성회비";
		sheet100_G2="기타장학금";
		sheet100_H2="장학금합계";
		sheet110_A1="⊙ 교내상벌정보";
		sheet110_A2="상벌구분";
		sheet110_B2="세부구분";
		sheet110_C2="세부내용";
		sheet110_D2="일자";
		sheet120_A1="⊙ 취득자격증";
		sheet120_A2="구분";
		sheet120_B2="자격증명";
		sheet120_C2="(등)급";
		sheet120_D2="발행기관(시행처)";
		sheet120_E2="취득일";
		sheet130_A1="⊙ 어학능력자격";
		sheet130_A2="구분";
		sheet130_B2="종류";
		sheet130_C2="점수(등급)";
		sheet130_D2="발급기관(시행처)";
		sheet130_E2="응시(발급)일";
		sheet140_A1="⊙ 대회수상경력";
		sheet140_A2="구분";
		sheet140_B2="대회명";
		sheet140_C2="대회시작일";
		sheet140_D2="대회종료일";
		sheet140_E2="대회성격";
		sheet140_F2="종류";
		sheet140_G2="수상여부";
		sheet140_H2="상명";
		sheet150_A1="⊙ 국내외연수/교육";
		sheet150_A2="구분";
		sheet150_B2="연수성격";
		sheet150_C2="연수명";
		sheet150_D2="국가";
		sheet150_E2="연수기관";
		sheet150_F2="연수시작일";
		sheet150_G2="연수종료일";
		sheet160_A1="⊙ 연구과제/논문";
		sheet160_A2="구분";
		sheet160_B2="제목";
		sheet160_C2="발표일자";
		sheet160_D2="발표기관";
		sheet160_E2="저자수";
		sheet170_A1="⊙ 봉사/참여활동";
		sheet170_A2="구분";
		sheet170_B2="제목";
		sheet170_C2="봉사시작일자";
		sheet170_D2="봉사종료일자";
		sheet170_E2="참여기관";
		sheet180_A1="⊙ 학생조직활동";
		sheet180_A2="구분";
		sheet180_B2="제목";
		sheet180_C2="직위";
		sheet180_D2="활동시작일자";
		sheet180_E2="활동종료일자";
		sheet190_A1="⊙ 정보화능력";
		sheet190_A2="구분";
		sheet190_B2="항목";
		sheet190_C2="수준";
		sheet190_D2="사용년수";
		sheet200_A1="⊙ 취업경력";
		sheet200_A2="회사명";
		sheet200_B2="근무기간";
		sheet200_C2="경력";
		sheet200_D2="직무내용";
		sheet200_E2="직위";
		sheet200_F2="연봉";
		sheet210_A1="⊙ 기타경력";
		sheet210_A2="제목";
		sheet210_B2="경력내용";
		sheet210_C2="기간";
		sheet220_A1="⊙ 자기소개서";
		sheet230_A1="⊙ 대학생활설계";
		sheet240_A1="⊙ 졸업후진로설계";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=toKor(GetB(request.getParameter("reportMode")));
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + toKor(GetB(request.getParameter("reportParams"))));

		char data[] = {0x14};
		String str = new String(data);
		fidx_Param=toKor(GetB(request.getParameter("fidx")));
		fidx_Param=aiReplace(fidx_Param, str, "\n");
		inOutcode_Param=toKor(GetB(request.getParameter("inOutcode")));
		inOutcode_Param=aiReplace(inOutcode_Param, str, "\n");
		typecode_Param=toKor(GetB(request.getParameter("typecode")));
		typecode_Param=aiReplace(typecode_Param, str, "\n");
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
			case 20:		//SHEET=Sheet=2   FRAME=0에서 페이지 스킵시
			break;
			case 250:		//SHEET=Sheet=25   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight){
		//GetPrintHeight_AutoCode
		int ch;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		printWidth = printWidth*100;

		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
				}
			} else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;

				if (ch==13) {
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}
			} else {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}
			}
		}

		if (height>printHeight) {
			height=height-printHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight){
		//GetPrintHeightEx_AutoCode
		int ch;
		int i;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		boolean bSplit=false;
		strSplitData[0]="";
		strSplitData[1]="";
		printWidth = printWidth*100;

		for (i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
				}
			}else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;
				if (ch==13){
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					if(i!=size-1){
						bSplit=true;
						i++;
					}
					break;
				}
			}else{
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					bSplit=true;
					break;
				}
			}
		}

		if(bSplit){
			strSplitData[0]=data.substring(0, i);
			strSplitData[1]=data.substring(i);
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|0|Temporary.style|보고서 (2013/5/1 18:43:25)", false);
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}
}
%>
