<%
/************************************************************************************
Generated by AIDesigner 5.5.1.5
************************************************************************************
보고서 제목 : 보고서 (2014/6/16 13:20:56)
작성일 : 2014년6월16일 13시20분56초

작성자 :
************************************************************************************/
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page contentType="text/html; charset=utf-8" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>
<%@ page import="com.activeintra.util.uds.*" %>

<%@ page import="com.activeintra.util.uds.*" %>

<%
Object[] userObj = null;

String reportMode=request.getParameter("reportMode");
String reportParams=request.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext,request,response,userObj);
handler.service(out);
handler = null;
%>

<%!
//private Logger logger = Logger.getLogger("Temporary.jsp");
private Logger logger = Logger.getLogger("com.activeintra");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장

	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장

	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장

	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장

	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장

	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장

	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수

	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭

	private int nBandOffset;		//반복밴드 가로 반복 offset값

	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅

	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_B28 = "";
	String sheet10_D30 = "";
	String sheet10_D2 = "";
	String sheet10_D3 = "";
	String AI_STRING_OBJ38 = "";
	String AI_STRING_OBJ39 = "";
	String AI_STRING_OBJ40 = "";
	String AI_BOX_OBJ46 = "";
	long sheet10_J4 = 0L;
	long sheet10_K4 = 0L;
	long sheet10_L4 = 0L;
	long sheet10_M4 = 0L;
	String AI_STRING_OBJ44 = "";
	String AI_STRING_OBJ45 = "";
	long AI_STRING_OBJ79 = 0L;
	long AI_STRING_OBJ81 = 0L;
	String AI_STRING_OBJ90 = "";
	long sheet10_F5 = 0L;
	long sheet10_F7 = 0L;
	String AI_STRING_OBJ43 = "";
	long AI_STRING_OBJ80 = 0L;
	long AI_STRING_OBJ82 = 0L;
	String AI_STRING_OBJ88 = "";
	long AI_STRING_OBJ94 = 0L;
	String AI_STRING_OBJ63 = "";
	String AI_STRING_OBJ64 = "";
	String AI_STRING_OBJ65 = "";
	String AI_STRING_OBJ66 = "";
	String AI_STRING_OBJ67 = "";
	String AI_STRING_OBJ68 = "";
	String AI_STRING_OBJ69 = "";
	String AI_STRING_OBJ70 = "";
	String AI_BOX_OBJ85 = "";
	String AI_BOX_OBJ86 = "";
	int[] nAutoHeight_list_1=new int[1];
	String sheet20_A1 = "";
	long sheet20_B1 = 0L;
	String sheet20_D1 = "";
	String sheet20_E1 = "";
	String sheet20_F1 = "";
	String AI_BOX_OBJ47 = "";
	int[] nAutoHeight_list_2=new int[1];
	long sheet21_B1 = 0L;
	String sheet21_D1 = "";
	String sheet21_E1 = "";
	String sheet21_F1 = "";
	String sheet21_H1 = "";
	String AI_BOX_OBJ48 = "";

	//-----Connection, Statement, ResultSet 객체 선언-----
	private AIDataSource user_dk=null;
	private AIDataSource user_dk1=null;

	//-----쿼리 필드 변수 선언-----
	//UDS DataSet user_dk 객체에서 필드 값을 받는 필드 변수

	private String user_dk_이름;
	private String user_dk_학년;
	private String user_dk_사진;
	private String user_dk_기본사진;
	private String user_dk_학습과정;
	private String user_dk_학습일;
	private String user_dk_담당교사;
	private String user_dk_단원명;
	private String user_dk_레슨명;
	private String user_dk_정답률;
	private String user_dk_평균;
	private String user_dk_기본_정답률;
	private String user_dk_기본_드릴다운_정답률;
	private String user_dk_과제_정답률;
	private String user_dk_과제_드릴다운_정답률;
	private String user_dk_학습레벨;
	private String user_dk_기본_성취_문제수1;
	private String user_dk_기본_성취_문제수2;
	private String user_dk_기본_성취_문제수3;
	private String user_dk_별_기본;
	private String user_dk_소요시간_기본;
	private String user_dk_과제_성취_문제수1;
	private String user_dk_과제_성취_문제수2;
	private String user_dk_과제_성취_문제수3;
	private String user_dk_별_과제;
	private String user_dk_소요시간_과제;
	private String user_dk_학습분석;
	private String user_dk_주소;

	//UDS DataSet user_dk1 객체에서 필드 값을 받는 필드 변수

	private String user_dk1_문제구분;
	private String user_dk1_상태;
	private String user_dk1_문제;
	private String user_dk1_성취도;
	private String user_dk1_다시풀기결과;

	//파라미터 변수 선언
	String P01_Param;
	String P02_Param;
	String P03_Param;

	//-----사용자 정의 변수 및 함수-----
	String imgUrl = "";
	boolean subFlag = false;
	int listCnt = 1;


	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext,HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.pageContext=pageContext;
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화

			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화


			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			/* AIUniSet name = new AIUniSet(request,"pdf");
			pdfFilename = name.getFileNm(); */

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "28 28 28 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				imgUrl = "http://screport.daekyo.com/AIViewer55/bgimg/";

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();
				
				StringBuffer report = new StringBuffer();
				report.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
				report.append("<root>\n");
				report.append("	<PG_REPORT.SP_REPLMS001>\n");
				report.append("		<list>\n");
				report.append("			<IS_CERTI><![CDATA[Y]]></IS_CERTI>\n");
				report.append("			<ERR_MSG><![CDATA[]]></ERR_MSG>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<이름><![CDATA[임두섭]]></이름>\n");
				report.append("			<학년><![CDATA[중1]]></학년>\n");
				report.append("			<사진><![CDATA[https://knowre-daekyo-dev.s3.amazonaws.com/pic/11202.jpg]]></사진>\n");
				report.append("			<기본사진><![CDATA[http://scm.daekyo.com/images/dsp/center/icon/icon_boy_01_M1.png]]></기본사진>\n");
				report.append("			<학습과정><![CDATA[중1-1학기과정]]></학습과정>\n");
				report.append("			<학습일><![CDATA[2014.03.22/2014.03.22]]></학습일>\n");
				report.append("			<담당교사><![CDATA[이소영]]></담당교사>\n");
				report.append("			<단원명><![CDATA[1~2단원 단원총정리]]></단원명>\n");
				report.append("			<레슨명><![CDATA[ 1~2단원 단원총정리 - 단원총정리(1)]]></레슨명>\n");
				report.append("			<정답률><![CDATA[64]]></정답률>\n");
				report.append("			<평균><![CDATA[0]]></평균>\n");
				report.append("			<기본_정답률><![CDATA[60]]></기본_정답률>\n");
				report.append("			<기본_드릴다운_정답률><![CDATA[10]]></기본_드릴다운_정답률>\n");
				report.append("			<과제_정답률><![CDATA[67]]></과제_정답률>\n");
				report.append("			<과제_드릴다운_정답률><![CDATA[13]]></과제_드릴다운_정답률>\n");
				report.append("			<학습레벨><![CDATA[중]]></학습레벨>\n");
				report.append("			<기본_성취_문제수1><![CDATA[6]]></기본_성취_문제수1>\n");
				report.append("			<기본_성취_문제수2><![CDATA[1]]></기본_성취_문제수2>\n");
				report.append("			<기본_성취_문제수3><![CDATA[3]]></기본_성취_문제수3>\n");
				report.append("			<별_기본><![CDATA[2]]></별_기본>\n");
				report.append("			<소요시간_기본><![CDATA[16분]]></소요시간_기본>\n");
				report.append("			<과제_성취_문제수1><![CDATA[10]]></과제_성취_문제수1>\n");
				report.append("			<과제_성취_문제수2><![CDATA[2]]></과제_성취_문제수2>\n");
				report.append("			<과제_성취_문제수3><![CDATA[3]]></과제_성취_문제수3>\n");
				report.append("			<별_과제><![CDATA[2]]></별_과제>\n");
				report.append("			<소요시간_과제><![CDATA[24분]]></소요시간_과제>\n");
				report.append("			<학습분석><![CDATA[(최대공약수와 최소공배수가 주어질 때 - 두 수 구하기,최대공약수의 활용 - 일정한 양을 가능한 한 많은 사람에게 나누어 주기,최대공약수의 활용 - 일정한 간격으로 놓을 때)에 대해 다시 확인하고 넘어가세요\n");
				report.append("[문제풀이 동영상 활용도] 모르는 문제는 유사문제풀이 동영상을 보고 이해하며 0문항을 맞혔습니다. 모르는데도 동영상을 보지 않아 틀린 문제가 9문항이 있습니다.]]></학습분석>\n");
				report.append("			<주소><![CDATA[풍산센터 (031-908-9509) 경기 고양시 일산동구 풍동 1285-2 2층 202호]]></주소>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[01]]></문제구분>\n");
				report.append("			<상태><![CDATA[X]]></상태>\n");
				report.append("			<문제><![CDATA[제곱인 수 만들기(2) - 어떤 자연수의 제곱]]></문제>\n");
				report.append("			<성취도><![CDATA[66]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[01]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[제곱인 수 만들기(3) - 특정 조건의 자연수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[01]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[소인수분해한 결과에서 밑과 지수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[01]]></문제구분>\n");
				report.append("			<상태><![CDATA[X]]></상태>\n");
				report.append("			<문제><![CDATA[최대공약수와 최소공배수가 주어질 때 - 두 수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[33]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[01]]></문제구분>\n");
				report.append("			<상태><![CDATA[△]]></상태>\n");
				report.append("			<문제><![CDATA[소인수구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[98]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[01]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[약수의 개수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[01]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[약수의 개수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[01]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[소인수구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[01]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[소인수구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[01]]></문제구분>\n");
				report.append("			<상태><![CDATA[X]]></상태>\n");
				report.append("			<문제><![CDATA[최대공약수와 최소공배수의 성질]]></문제>\n");
				report.append("			<성취도><![CDATA[0]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[X]]></상태>\n");
				report.append("			<문제><![CDATA[최대공약수와 최소공배수가 주어질 때 - 두 수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[66]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[△]]></상태>\n");
				report.append("			<문제><![CDATA[최대공약수와 최소공배수가 주어질 때 - 두 수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[98]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[미지수가 포함된 세 수의 최소공배수]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[최소공배수의 성질]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[최대공약수와 최소공배수가 주어질 때 - 밑과 지수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[X]]></상태>\n");
				report.append("			<문제><![CDATA[최대공약수의 활용 - 일정한 양을 가능한 한 많은 사람에게 나누어 주기]]></문제>\n");
				report.append("			<성취도><![CDATA[75]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[공약수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[△]]></상태>\n");
				report.append("			<문제><![CDATA[최대공약수의 활용 - 일정한 양을 가능한 한 많은 사람에게 나누어 주기]]></문제>\n");
				report.append("			<성취도><![CDATA[98]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[공약수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[최대공약수의 활용 - 직사각형, 직육면체 채우기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[공약수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[소인수분해를 이용하여 약수 구하기]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[최대공약수의 성질]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[X]]></상태>\n");
				report.append("			<문제><![CDATA[최대공약수의 활용 - 일정한 간격으로 놓을 때]]></문제>\n");
				report.append("			<성취도><![CDATA[75]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("		<list>\n");
				report.append("			<문제구분><![CDATA[02]]></문제구분>\n");
				report.append("			<상태><![CDATA[○]]></상태>\n");
				report.append("			<문제><![CDATA[최대공약수의 성질]]></문제>\n");
				report.append("			<성취도><![CDATA[100]]></성취도>\n");
				report.append("			<다시풀기결과><![CDATA[-]]></다시풀기결과>\n");
				report.append("		</list>\n");
				report.append("	</PG_REPORT.SP_REPLMS001>\n");
				report.append("</root>\n");
				
				logger.error(report.toString());
				userObj = new Object[1];
				userObj[0] = report.toString();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();
				//SHEET=Sheet3   FRAME=0 함수 호출

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(e);
			throw e;
		}finally{    //finally 구문
			//DataSet Close
			cleanup(user_dk1, null, null, null);
			cleanup(user_dk, null, null, null);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "0 0 0 0");
		initSheetVariant(10, 10, 588, 701, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//배경 이미지 함수 호출
		getBgImageScript(10);

		//밴드 함수 호출
		getScriptFrombutt(true, true);    //바닥글 밴드 호출
		getScriptFromheader1(true, true);    //Void 밴드 호출
		getScriptFromheader2(true, true);    //Void 밴드 호출
		getScriptFromheader3(true, true);    //Void 밴드 호출
		getScriptFromheader4(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기


		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet2   FRAME=1 함수 호출
		executeSheet21();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(10, 10, 290, 701, true, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromlist_1(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		if(nMaxPage<nPageNum || (nMaxPage==nPageNum && nYLastPos<nYCurPos)){
			nYLastPos=nYCurPos;
		}
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet2   FRAME=Frame1 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet21( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(290, 10, 588, 701, true, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromlist_2(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		if(nMaxPage<nPageNum || (nMaxPage==nPageNum && nYLastPos<nYCurPos)){
			nYLastPos=nYCurPos;
		}
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		nYCurPos=nYLastPos;
		nPageNum=nMaxPage;
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "0 0 0 0");
		initSheetVariant(10, 10, 588, 834, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromnot(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----butt FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : butt
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrombutt(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//UDS DataSet user_dk 객체의 생성 여부
			if(user_dk==null){
				createUDSDataSetuser_dk();
			}else{
				user_dk.beforeFirst();
			}

			//데이터 fetch
			if(user_dk.next()){
				setFieldVariableFromuser_dk();	//ResultSet user_dk에서 필드 값 설정
			}else{
				setFieldInitFromuser_dk();	//ResultSet user_dk의 필드 값 초기화
			}

			//데이터 변수 초기화

			sheet10_B28="";
			sheet10_D30="";

			//데이터 변수 할당
			sheet10_B28=user_dk_학습분석;
			sheet10_D30=user_dk_주소;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptbutt();
		}   //end if(bIsPrint)
	}

	//----header1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : header1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromheader1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=114;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//UDS DataSet user_dk 객체의 생성 여부
			if(user_dk==null){
				createUDSDataSetuser_dk();
			}else{
				user_dk.beforeFirst();
			}

			//데이터 fetch
			if(user_dk.next()){
				setFieldVariableFromuser_dk();	//ResultSet user_dk에서 필드 값 설정
			}else{
				setFieldInitFromuser_dk();	//ResultSet user_dk의 필드 값 초기화
			}

			//데이터 변수 초기화

			sheet10_D2="";
			sheet10_D3="";
			AI_STRING_OBJ38="";
			AI_STRING_OBJ39="";
			AI_STRING_OBJ40="";
			AI_BOX_OBJ46="";

			//데이터 변수 할당
			sheet10_D2=user_dk_이름;
			sheet10_D3=user_dk_학년;
			AI_STRING_OBJ38=user_dk_학습과정;
			AI_STRING_OBJ39=user_dk_학습일;
			AI_STRING_OBJ40=user_dk_담당교사;
			AI_BOX_OBJ46=String.valueOf(user_dk_기본사진);
			AI_BOX_OBJ46=String.valueOf(user_dk_사진);
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사

			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----header2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : header2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromheader2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=63;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//UDS DataSet user_dk 객체의 생성 여부
			if(user_dk==null){
				createUDSDataSetuser_dk();
			}else{
				user_dk.beforeFirst();
			}

			//데이터 fetch
			if(user_dk.next()){
				setFieldVariableFromuser_dk();	//ResultSet user_dk에서 필드 값 설정
			}else{
				setFieldInitFromuser_dk();	//ResultSet user_dk의 필드 값 초기화
			}

			//데이터 변수 초기화

			sheet10_J4=0L;
			sheet10_K4=0L;
			sheet10_L4=0L;
			sheet10_M4=0L;
			AI_STRING_OBJ44="";
			AI_STRING_OBJ45="";
			AI_STRING_OBJ79=0L;
			AI_STRING_OBJ81=0L;

			//데이터 변수 할당
			sheet10_J4=Long.parseLong(Get0(user_dk_기본_정답률));
			sheet10_K4=Long.parseLong(Get0(user_dk_기본_드릴다운_정답률));
			sheet10_L4=Long.parseLong(Get0(user_dk_과제_정답률));
			sheet10_M4=Long.parseLong(Get0(user_dk_과제_드릴다운_정답률));
			AI_STRING_OBJ44=user_dk_단원명;
			AI_STRING_OBJ45=user_dk_레슨명;
			AI_STRING_OBJ79=Long.parseLong(Get0(user_dk_기본_정답률));
			AI_STRING_OBJ81=Long.parseLong(Get0(user_dk_기본_드릴다운_정답률));
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사

			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----header3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : header3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromheader3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=45;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//UDS DataSet user_dk 객체의 생성 여부
			if(user_dk==null){
				createUDSDataSetuser_dk();
			}else{
				user_dk.beforeFirst();
			}

			//데이터 fetch
			if(user_dk.next()){
				setFieldVariableFromuser_dk();	//ResultSet user_dk에서 필드 값 설정
			}else{
				setFieldInitFromuser_dk();	//ResultSet user_dk의 필드 값 초기화
			}

			//데이터 변수 초기화

			sheet10_F5=0L;
			sheet10_F7=0L;
			AI_STRING_OBJ43="";
			AI_STRING_OBJ80=0L;
			AI_STRING_OBJ82=0L;
			AI_STRING_OBJ88="";

			//데이터 변수 할당
			sheet10_F5=sheet10_J4+sheet10_K4;
			sheet10_F7=sheet10_L4+sheet10_M4;
			AI_STRING_OBJ43=user_dk_학습레벨;
			AI_STRING_OBJ80=Long.parseLong(Get0(user_dk_과제_정답률));
			AI_STRING_OBJ82=Long.parseLong(Get0(user_dk_과제_드릴다운_정답률));
			AI_STRING_OBJ88=user_dk_정답률;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사

			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----header4 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : header4
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromheader4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=97;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//UDS DataSet user_dk 객체의 생성 여부
			if(user_dk==null){
				createUDSDataSetuser_dk();
			}else{
				user_dk.beforeFirst();
			}

			//데이터 fetch
			if(user_dk.next()){
				setFieldVariableFromuser_dk();	//ResultSet user_dk에서 필드 값 설정
			}else{
				setFieldInitFromuser_dk();	//ResultSet user_dk의 필드 값 초기화
			}

			//데이터 변수 초기화

			AI_STRING_OBJ63="";
			AI_STRING_OBJ64="";
			AI_STRING_OBJ65="";
			AI_STRING_OBJ66="";
			AI_STRING_OBJ67="";
			AI_STRING_OBJ68="";
			AI_STRING_OBJ69="";
			AI_STRING_OBJ70="";
			AI_BOX_OBJ85="";
			AI_BOX_OBJ86="";

			//데이터 변수 할당
			AI_STRING_OBJ63=user_dk_기본_성취_문제수1;
			AI_STRING_OBJ64=user_dk_기본_성취_문제수2;
			AI_STRING_OBJ65=user_dk_기본_성취_문제수3;
			AI_STRING_OBJ66=user_dk_소요시간_기본;
			AI_STRING_OBJ67=user_dk_과제_성취_문제수1;
			AI_STRING_OBJ68=user_dk_과제_성취_문제수2;
			AI_STRING_OBJ69=user_dk_과제_성취_문제수3;
			AI_STRING_OBJ70=user_dk_소요시간_과제;
			AI_BOX_OBJ85=String.valueOf(user_dk_별_기본);
			AI_BOX_OBJ85 = imgUrl + "star_" + AI_BOX_OBJ85 + ".jpg";
			AI_BOX_OBJ86=String.valueOf(user_dk_별_과제);
			AI_BOX_OBJ86 = imgUrl + "star_" + AI_BOX_OBJ86 + ".jpg";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사

			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptheader4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----blank VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : blank
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromblank(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=371;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//-----list_1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : list_1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromlist_1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=21;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 돋움
		//폰트 사이즈 : 8
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {267,267,334,500,400,734,567,233,300,300,466,466,300,472,300,334,466,466,466,466,466,466,466,466,466,466,272,272,500,467,500,466,800,534,544,577,580,503,480,600,578,206,388,525,433,647,558,600,514,600,534,511,466,580,481,714,483,481,483,400,766,400,500,400,266,466,480,447,483,447,275,478,448,183,183,408,184,734,455,480,481,483,256,413,250,444,380,580,383,384,386,400,400,400,633,800};

		//데이터 변수 초기화

		sheet20_A1="";
		sheet20_B1=0L;
		sheet20_D1="";
		sheet20_E1="";
		sheet20_F1="";
		AI_BOX_OBJ47="";

		//DataSet 객체 생성
		//UDS DataSet user_dk1 객체의 생성 여부
		if(user_dk1==null){
			createUDSDataSetuser_dk1();
		}else{
			user_dk1.beforeFirst();
		}

		while(user_dk1.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromuser_dk1();	//RecordSet user_dk1에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_A1=user_dk1_문제구분;
			sheet20_B1=COUNT(sheet20_B1);
			sheet20_D1=user_dk1_문제;
			sheet20_E1=user_dk1_성취도;
			sheet20_F1=user_dk1_다시풀기결과;
			AI_BOX_OBJ47=String.valueOf(user_dk1_상태);
			if(AI_BOX_OBJ47.equals("○")) {
			AI_BOX_OBJ47 = imgUrl + "right.jpg";
			} else if (AI_BOX_OBJ47.equals("X")) {
			AI_BOX_OBJ47 = imgUrl + "false.jpg";
			} else if (AI_BOX_OBJ47.equals("△")) {
				AI_BOX_OBJ47 = imgUrl + "drilldown.jpg";
			}

			if(sheet20_A1.equals("01")) {
				sheet20_A1 = "";

				//Auto Size Code
				nAutoHeight_list_1[0]=0;
				nAutoHeight_list_1[0]=getPrintHeight(sheet20_D1, charWidth, 8, 144, 21, nAutoHeight_list_1[0]);
				nAutoHeight_list_1[0]=nAutoHeight_list_1[0]+21;
				nBandHeight=nAutoHeight_list_1[0];   //밴드 출력 높이 설정

				//AI 스크립트 출력
				if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
					if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
						//페이지 스킵 함수 호출
						pageSkip(10);
					}   //end if(page skip test)

					//스크립트 출력 함수 호출
					writeScriptlist_1();

					//다음 출력 좌표 설정
					nYCurPos=nYCurPos+nBandHeight;
				}   //end if(bIsPrint)

				//bIsFirst 및 출력 라인 설정
				bIsFirst=false;
			}
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//-----list_2 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame1
	//-----밴드 이름 : list_2
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromlist_2(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=21;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 돋움
		//폰트 사이즈 : 8
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {267,267,334,500,400,734,567,233,300,300,466,466,300,472,300,334,466,466,466,466,466,466,466,466,466,466,272,272,500,467,500,466,800,534,544,577,580,503,480,600,578,206,388,525,433,647,558,600,514,600,534,511,466,580,481,714,483,481,483,400,766,400,500,400,266,466,480,447,483,447,275,478,448,183,183,408,184,734,455,480,481,483,256,413,250,444,380,580,383,384,386,400,400,400,633,800};

		//데이터 변수 초기화

		sheet21_B1=0L;
		sheet21_D1="";
		sheet21_E1="";
		sheet21_F1="";
		sheet21_H1="";
		AI_BOX_OBJ48="";

		//DataSet 객체 생성
		//UDS DataSet user_dk1 객체의 생성 여부
		if(user_dk1==null){
			createUDSDataSetuser_dk1();
		}else{
			user_dk1.beforeFirst();
		}

		while(user_dk1.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromuser_dk1();	//RecordSet user_dk1에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet21_B1=COUNT(sheet21_B1);
			sheet21_D1=user_dk1_문제;
			sheet21_E1=user_dk1_성취도;
			sheet21_F1=user_dk1_다시풀기결과;
			sheet21_H1=user_dk1_문제구분;
			AI_BOX_OBJ48=String.valueOf(user_dk1_상태);
			if(AI_BOX_OBJ48.equals("○")) {
			AI_BOX_OBJ48 = imgUrl + "right.jpg";
			} else if (AI_BOX_OBJ48.equals("X")) {
			AI_BOX_OBJ48 = imgUrl + "false.jpg";
			} else if (AI_BOX_OBJ48.equals("△")) {
				AI_BOX_OBJ48 = imgUrl + "drilldown.jpg";
			}

			if(sheet21_H1.equals("02")) {
				//Auto Size Code
				nAutoHeight_list_2[0]=0;
				nAutoHeight_list_2[0]=getPrintHeight(sheet21_D1, charWidth, 8, 147, 21, nAutoHeight_list_2[0]);
				nAutoHeight_list_2[0]=nAutoHeight_list_2[0]+21;
				nBandHeight=nAutoHeight_list_2[0];   //밴드 출력 높이 설정

				//AI 스크립트 출력
				if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
					if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
						//페이지 스킵 함수 호출
						pageSkip(10);
					}   //end if(page skip test)

					//스크립트 출력 함수 호출
					writeScriptlist_2();

					//다음 출력 좌표 설정
					nYCurPos=nYCurPos+nBandHeight;
				}   //end if(bIsPrint)

				//bIsFirst 및 출력 라인 설정
				bIsFirst=false;
			} else {
				sheet21_B1 = 0;
			}
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----not VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : not
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromnot(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=823;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사

			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(30);
			}

			//스크립트 출력 함수 호출
			writeScriptnot();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----butt 스크립트 문 출력 함수----
	private void writeScriptbutt( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 38, 701, 518, 77, sheet10_B28, "sheet10_B28", "cell_style_20");
		objectWrite(CELL_OBJECT, 71, 808, 485, 26, sheet10_D30, "sheet10_D30", "cell_style_21");
	}

	//----header1 스크립트 문 출력 함수----
	private void writeScriptheader1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 28, 68, "", "sheet10_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+61, nYCurPos, 122, 68, "", "sheet10_D1", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+183, nYCurPos, 202, 68, "", "sheet10_E1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+385, nYCurPos, 93, 68, "", "sheet10_F1", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+478, nYCurPos, 68, 68, "", "sheet10_G1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+546, nYCurPos, 28, 68, "", "sheet10_H1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+68, 28, 27, "", "sheet10_A2", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+61, nYCurPos+68, 122, 27, sheet10_D2, "sheet10_D2", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+183, nYCurPos+68, 202, 27, "", "sheet10_E2", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+385, nYCurPos+68, 93, 27, "", "sheet10_F2", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+478, nYCurPos+68, 68, 27, "", "sheet10_G2", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+546, nYCurPos+68, 28, 27, "", "sheet10_H2", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+95, 28, 19, "", "sheet10_A3", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+61, nYCurPos+95, 122, 19, sheet10_D3, "sheet10_D3", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+183, nYCurPos+95, 202, 19, "", "sheet10_E3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+385, nYCurPos+95, 93, 19, "", "sheet10_F3", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+478, nYCurPos+95, 68, 19, "", "sheet10_G3", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+546, nYCurPos+95, 28, 19, "", "sheet10_H3", "cell_style_0");
		objectWrite(DRAW_OBJECT, nXCurPos+203, nYCurPos+88, 66, 15, AI_STRING_OBJ38, "AI_STRING_OBJ38", "draw_style_1");
		objectWrite(DRAW_OBJECT, nXCurPos+306, nYCurPos+88, 137, 15, AI_STRING_OBJ39, "AI_STRING_OBJ39", "draw_style_1");
		objectWrite(DRAW_OBJECT, nXCurPos+482, nYCurPos+88, 73, 15, AI_STRING_OBJ40, "AI_STRING_OBJ40", "draw_style_1");
		objectWrite(DRAW_OBJECT, nXCurPos+27, nYCurPos+79, 30, 30, AI_BOX_OBJ46, "AI_BOX_OBJ46", "draw_style_2");
		if(true)
		{
			propertyWrite(DRAW_OBJECT, "AI_BOX_OBJ46", "absoluteURL", "y");
		}
	}

	//----header2 스크립트 문 출력 함수----
	private void writeScriptheader2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 28, 63, "", "sheet10_A4", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+61, nYCurPos, 417, 63, "", "sheet10_D4", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+478, nYCurPos, 68, 63, "", "sheet10_G4", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+546, nYCurPos, 28, 63, "", "sheet10_H4", "cell_style_8");
		objectWrite(DRAW_OBJECT, nXCurPos+58, nYCurPos+18, 198, 21, AI_STRING_OBJ44, "AI_STRING_OBJ44", "draw_style_3");
		objectWrite(DRAW_OBJECT, nXCurPos+270, nYCurPos+18, 285, 21, AI_STRING_OBJ45, "AI_STRING_OBJ45", "draw_style_4");
		objectWrite(DRAW_OBJECT, nXCurPos+185, nYCurPos+62, 12, 12, String.valueOf(AI_STRING_OBJ79), "AI_STRING_OBJ79", "draw_style_5");
		if(true)
		{
			if(sheet10_J4 > 3) {
				propertyWrite(DRAW_OBJECT, "AI_STRING_OBJ79", "moveOffset", "(" + ((sheet10_J4 * 2) - 12) + ",0)");
			} else {
				propertyWrite(DRAW_OBJECT, "AI_STRING_OBJ79", "show", "n");
			}
		}


		objectWrite(DRAW_OBJECT, nXCurPos+185, nYCurPos+62, 12, 12, String.valueOf(AI_STRING_OBJ81), "AI_STRING_OBJ81", "draw_style_5");
		if(true)
		{
			if(sheet10_K4 > 3) {
				propertyWrite(DRAW_OBJECT, "AI_STRING_OBJ81", "moveOffset", "(" + (((sheet10_J4 + sheet10_K4) * 2) - 12) + ",0)");
			} else {
				propertyWrite(DRAW_OBJECT, "AI_STRING_OBJ81", "show", "n");
			}
		}


		objectWrite(DRAW_OBJECT, nXCurPos+257, nYCurPos+13, 15, 30, AI_STRING_OBJ90, "AI_STRING_OBJ90", "draw_style_6");
	}

	//----header3 스크립트 문 출력 함수----
	private void writeScriptheader3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 28, 11, "", "sheet10_A5", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+183, nYCurPos, 202, 11, "", "sheet10_E5", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+385, nYCurPos, 93, 11, String.valueOf(sheet10_F5), "sheet10_F5", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos+478, nYCurPos, 68, 11, "", "sheet10_G5", "cell_style_18");
		objectWrite(CELL_OBJECT, nXCurPos+546, nYCurPos, 28, 11, "", "sheet10_H5", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos+385, nYCurPos+20, 93, 11, String.valueOf(sheet10_F7), "sheet10_F7", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos+61, nYCurPos+31, 122, 14, "", "sheet10_D8", "cell_style_19");
		objectWrite(DRAW_OBJECT, nXCurPos+507, nYCurPos+10, 35, 25, AI_STRING_OBJ43, "AI_STRING_OBJ43", "draw_style_7");
		objectWrite(DRAW_OBJECT, nXCurPos+186, nYCurPos, 200, 11, "http://screport.daekyo.com/AIViewer55/bgimg/bar2.jpg", "AI_IMAGE_OBJ73", "draw_style_2");
		if(true)
		{
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ73", "imageZIndex", "-5");
		}

		objectWrite(DRAW_OBJECT, nXCurPos+186, nYCurPos+21, 200, 11, "http://screport.daekyo.com/AIViewer55/bgimg/bar2.jpg", "AI_IMAGE_OBJ74", "draw_style_2");
		if(true)
		{
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ74", "imageZIndex", "-5");
		}

		objectWrite(DRAW_OBJECT, nXCurPos+186, nYCurPos, 200, 11, "http://screport.daekyo.com/AIViewer55/bgimg/bar1.jpg", "AI_IMAGE_OBJ75", "draw_style_2");
		if(sheet10_K4 != 0)
		{
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ75", "width|imageZIndex", ""+(int)((sheet10_J4 + sheet10_K4) * 2)+"" + "|" + "-3");
		}
		else {
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ75", "show", "n");
		}


		objectWrite(DRAW_OBJECT, nXCurPos+186, nYCurPos+21, 200, 11, "http://screport.daekyo.com/AIViewer55/bgimg/bar1.jpg", "AI_IMAGE_OBJ76", "draw_style_2");
		if(true)
		{
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ76", "width|imageZIndex", ""+(int)((sheet10_L4 + sheet10_M4) * 2)+"" + "|" + "-3");
		} else {
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ76", "show", "n");
		}


		objectWrite(DRAW_OBJECT, nXCurPos+186, nYCurPos, 200, 11, "http://screport.daekyo.com/AIViewer55/bgimg/bar0.jpg", "AI_IMAGE_OBJ77", "draw_style_2");
		if(sheet10_J4 != 0)
		{
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ77", "width|imageZIndex", ""+(int)(sheet10_J4 * 2)+"" + "|" + "-2");
		} else {
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ77", "show", "n");
		}


		objectWrite(DRAW_OBJECT, nXCurPos+186, nYCurPos+21, 200, 11, "http://screport.daekyo.com/AIViewer55/bgimg/bar0.jpg", "AI_IMAGE_OBJ78", "draw_style_2");
		if(true)
		{
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ78", "width|imageZIndex", ""+(int)(sheet10_L4 * 2)+"" + "|" + "-2");
		} else {
			propertyWrite(DRAW_OBJECT, "AI_IMAGE_OBJ78", "show", "n");
		}


		objectWrite(DRAW_OBJECT, nXCurPos+185, nYCurPos+20, 12, 12, String.valueOf(AI_STRING_OBJ80), "AI_STRING_OBJ80", "draw_style_5");
		if(true)
		{
			if(sheet10_L4 > 3) {
				propertyWrite(DRAW_OBJECT, "AI_STRING_OBJ80", "moveOffset", "(" + ((sheet10_L4 * 2) - 12) + ",0)");
			} else {
				propertyWrite(DRAW_OBJECT, "AI_STRING_OBJ80", "show", "n");
			}
		}


		objectWrite(DRAW_OBJECT, nXCurPos+183, nYCurPos+20, 12, 12, String.valueOf(AI_STRING_OBJ82), "AI_STRING_OBJ82", "draw_style_5");
		if(true)
		{
			if(sheet10_M4 > 3) {
				propertyWrite(DRAW_OBJECT, "AI_STRING_OBJ82", "moveOffset", "(" + (((sheet10_L4 + sheet10_M4) * 2) - 12) + ",0)");
			} else {
				propertyWrite(DRAW_OBJECT, "AI_STRING_OBJ82", "show", "n");
			}
		}


		objectWrite(DRAW_OBJECT, nXCurPos+62, nYCurPos+1, 49, 33, AI_STRING_OBJ88, "AI_STRING_OBJ88", "draw_style_8");
		objectWrite(DRAW_OBJECT, nXCurPos+223, nYCurPos, 20, 20, String.valueOf(AI_STRING_OBJ94), "AI_STRING_OBJ94", "draw_style_9");
		if(true)
		{
			propertyWrite(DRAW_OBJECT, "AI_STRING_OBJ94", "imageZIndex", "40");
		}
	}

	//----header4 스크립트 문 출력 함수----
	private void writeScriptheader4( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos+49, nYCurPos+47, 32, 18, AI_STRING_OBJ63, "AI_STRING_OBJ63", "draw_style_10");
		objectWrite(DRAW_OBJECT, nXCurPos+96, nYCurPos+47, 32, 18, AI_STRING_OBJ64, "AI_STRING_OBJ64", "draw_style_10");
		objectWrite(DRAW_OBJECT, nXCurPos+142, nYCurPos+47, 32, 18, AI_STRING_OBJ65, "AI_STRING_OBJ65", "draw_style_10");
		objectWrite(DRAW_OBJECT, nXCurPos+245, nYCurPos+48, 32, 18, AI_STRING_OBJ66, "AI_STRING_OBJ66", "draw_style_11");
		objectWrite(DRAW_OBJECT, nXCurPos+321, nYCurPos+47, 32, 18, AI_STRING_OBJ67, "AI_STRING_OBJ67", "draw_style_10");
		objectWrite(DRAW_OBJECT, nXCurPos+369, nYCurPos+47, 32, 18, AI_STRING_OBJ68, "AI_STRING_OBJ68", "draw_style_10");
		objectWrite(DRAW_OBJECT, nXCurPos+416, nYCurPos+47, 32, 18, AI_STRING_OBJ69, "AI_STRING_OBJ69", "draw_style_10");
		objectWrite(DRAW_OBJECT, nXCurPos+522, nYCurPos+48, 32, 18, AI_STRING_OBJ70, "AI_STRING_OBJ70", "draw_style_11");
		objectWrite(DRAW_OBJECT, nXCurPos+186, nYCurPos+49, 44, 14, AI_BOX_OBJ85, "AI_BOX_OBJ85", "draw_style_2");
		objectWrite(DRAW_OBJECT, nXCurPos+460, nYCurPos+49, 44, 14, AI_BOX_OBJ86, "AI_BOX_OBJ86", "draw_style_2");
	}

	//----list_1 스크립트 문 출력 함수----
	private void writeScriptlist_1(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 27, nAutoHeight_list_1[0], sheet20_A1, "sheet20_A1", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos+27, nYCurPos, 24, nAutoHeight_list_1[0], String.valueOf(sheet20_B1), "sheet20_B1", "cell_style_23");
		objectWrite(CELL_OBJECT, nXCurPos+51, nYCurPos, 24, nAutoHeight_list_1[0], "", "sheet20_C1", "cell_style_24");
		objectWrite(CELL_OBJECT, nXCurPos+75, nYCurPos, 148, nAutoHeight_list_1[0], sheet20_D1, "sheet20_D1", "cell_style_25");
		objectWrite(CELL_OBJECT, nXCurPos+223, nYCurPos, 25, nAutoHeight_list_1[0], sheet20_E1, "sheet20_E1", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+248, nYCurPos, 32, nAutoHeight_list_1[0], sheet20_F1, "sheet20_F1", "cell_style_26");
		objectWrite(DRAW_OBJECT, nXCurPos+57, nYCurPos+5, 12, 12, AI_BOX_OBJ47, "AI_BOX_OBJ47", "draw_style_2");
	}

	//----list_2 스크립트 문 출력 함수----
	private void writeScriptlist_2(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+20, nYCurPos, 24, nAutoHeight_list_2[0], String.valueOf(sheet21_B1), "sheet21_B1", "cell_style_23");
		objectWrite(CELL_OBJECT, nXCurPos+44, nYCurPos, 24, nAutoHeight_list_2[0], "", "sheet21_C1", "cell_style_24");
		objectWrite(CELL_OBJECT, nXCurPos+68, nYCurPos, 151, nAutoHeight_list_2[0], sheet21_D1, "sheet21_D1", "cell_style_25");
		objectWrite(CELL_OBJECT, nXCurPos+219, nYCurPos, 24, nAutoHeight_list_2[0], sheet21_E1, "sheet21_E1", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+243, nYCurPos, 32, nAutoHeight_list_2[0], sheet21_F1, "sheet21_F1", "cell_style_26");
		objectWrite(DRAW_OBJECT, nXCurPos+50, nYCurPos+4, 12, 12, AI_BOX_OBJ48, "AI_BOX_OBJ48", "draw_style_2");
	}

	//----not 스크립트 문 출력 함수----
	private void writeScriptnot( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos, 577, 823, "http://screport.daekyo.com/AIViewer55/bgimg/nodata_portrait.jpg", "AI_IMAGE_OBJ87", "draw_style_2");
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
		switch(nIndex){
			case 10:		//SHEET=Sheet1   FRAME=0 배경 이미지 스크립트
			objectWrite(DRAW_OBJECT, 10, 10, 578, 824, "", "AI_IMAGE_OBJ93", "draw_style_0");
			break;
		}
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
	}

	//UDS ResultSet 객체 생성 함수
	//UDS DataSet user_dk 객체 생성 함수
	private void createUDSDataSetuser_dk(){
		int dataSetType;
		String[] args;
		String[] params;
		int fieldCnt;

		dataSetType=4;
		args=null;

		params=new String[3];
		params[0]="PG_REPORT.SP_REPLMS001";
		params[1]="list";
		params[2]="<!이름><!학년><!사진><!기본사진><!학습과정><!학습일><!담당교사><!단원명><!레슨명><!정답률><!평균><!기본_정답률><!기본_드릴다운_정답률><!과제_정답률><!과제_드릴다운_정답률><!학습레벨><!기본_성취_문제수1><!기본_성취_문제수2><!기본_성취_문제수3><!별_기본><!소요시간_기본><!과제_성취_문제수1><!과제_성취_문제수2><!과제_성취_문제수3><!별_과제><!소요시간_과제><!학습분석><!주소>";
		fieldCnt=28;

		user_dk=(AIDataSource) new test.AIUserSet(dataSetType, params, fieldCnt, userObj);
		user_dk.init(args);
		user_dk.fetchData();
		user_dk.makeDataSet();
	}

	//UDS DataSet user_dk1 객체 생성 함수
	private void createUDSDataSetuser_dk1(){
		int dataSetType;
		String[] args;
		String[] params;
		int fieldCnt;

		dataSetType=4;
		args=null;

		params=new String[3];
		params[0]="list";
		params[1]="list";
		params[2]="<!문제구분><!상태><!문제><!성취도><!다시풀기결과>";
		fieldCnt=5;

		user_dk1=(AIDataSource) new test.AIUserSet(dataSetType, params, fieldCnt, userObj);
		user_dk1.init(args);
		user_dk1.fetchData();
		user_dk1.makeDataSet();
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//UDS DataSet user_dk 객체에서 필드 값 설정 함수
	private void setFieldVariableFromuser_dk() throws Exception{
		user_dk_이름=GetB(user_dk.getField(1));
		user_dk_학년=GetB(user_dk.getField(2));
		user_dk_사진=GetB(user_dk.getField(3));
		user_dk_기본사진=GetB(user_dk.getField(4));
		user_dk_학습과정=GetB(user_dk.getField(5));
		user_dk_학습일=GetB(user_dk.getField(6));
		user_dk_담당교사=GetB(user_dk.getField(7));
		user_dk_단원명=GetB(user_dk.getField(8));
		user_dk_레슨명=GetB(user_dk.getField(9));
		user_dk_정답률=GetB(user_dk.getField(10));
		user_dk_평균=GetB(user_dk.getField(11));
		user_dk_기본_정답률=GetB(user_dk.getField(12));
		user_dk_기본_드릴다운_정답률=GetB(user_dk.getField(13));
		user_dk_과제_정답률=GetB(user_dk.getField(14));
		user_dk_과제_드릴다운_정답률=GetB(user_dk.getField(15));
		user_dk_학습레벨=GetB(user_dk.getField(16));
		user_dk_기본_성취_문제수1=GetB(user_dk.getField(17));
		user_dk_기본_성취_문제수2=GetB(user_dk.getField(18));
		user_dk_기본_성취_문제수3=GetB(user_dk.getField(19));
		user_dk_별_기본=GetB(user_dk.getField(20));
		user_dk_소요시간_기본=GetB(user_dk.getField(21));
		user_dk_과제_성취_문제수1=GetB(user_dk.getField(22));
		user_dk_과제_성취_문제수2=GetB(user_dk.getField(23));
		user_dk_과제_성취_문제수3=GetB(user_dk.getField(24));
		user_dk_별_과제=GetB(user_dk.getField(25));
		user_dk_소요시간_과제=GetB(user_dk.getField(26));
		user_dk_학습분석=GetB(user_dk.getField(27));
		user_dk_주소=GetB(user_dk.getField(28));
	}

	//UDS DataSet user_dk 객체의 필드 값 초기화 함수
	private void setFieldInitFromuser_dk(){
		user_dk_이름="";
		user_dk_학년="";
		user_dk_사진="";
		user_dk_기본사진="";
		user_dk_학습과정="";
		user_dk_학습일="";
		user_dk_담당교사="";
		user_dk_단원명="";
		user_dk_레슨명="";
		user_dk_정답률="";
		user_dk_평균="";
		user_dk_기본_정답률="";
		user_dk_기본_드릴다운_정답률="";
		user_dk_과제_정답률="";
		user_dk_과제_드릴다운_정답률="";
		user_dk_학습레벨="";
		user_dk_기본_성취_문제수1="";
		user_dk_기본_성취_문제수2="";
		user_dk_기본_성취_문제수3="";
		user_dk_별_기본="";
		user_dk_소요시간_기본="";
		user_dk_과제_성취_문제수1="";
		user_dk_과제_성취_문제수2="";
		user_dk_과제_성취_문제수3="";
		user_dk_별_과제="";
		user_dk_소요시간_과제="";
		user_dk_학습분석="";
		user_dk_주소="";
	}

	//UDS DataSet user_dk1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromuser_dk1() throws Exception{
		user_dk1_문제구분=GetB(user_dk1.getField(1));
		user_dk1_상태=GetB(user_dk1.getField(2));
		user_dk1_문제=GetB(user_dk1.getField(3));
		user_dk1_성취도=GetB(user_dk1.getField(4));
		user_dk1_다시풀기결과=GetB(user_dk1.getField(5));
	}

	//UDS DataSet user_dk1 객체의 필드 값 초기화 함수
	private void setFieldInitFromuser_dk1(){
		user_dk1_문제구분="";
		user_dk1_상태="";
		user_dk1_문제="";
		user_dk1_성취도="";
		user_dk1_다시풀기결과="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		AI_STRING_OBJ90="〉";
		AI_STRING_OBJ94=1111;
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=toKor(GetB(request.getParameter("reportMode")));
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + toKor(GetB(request.getParameter("reportParams"))));

		char data[] = {0x14};
		String str = new String(data);
		mapParam = new HashMap<String, String>();

		P01_Param=toKor(GetB(request.getParameter("P01")));
		P01_Param=aiReplace(P01_Param, str, "\n");
		mapParam.put("P01", P01_Param);

		P02_Param=toKor(GetB(request.getParameter("P02")));
		P02_Param=aiReplace(P02_Param, str, "\n");
		mapParam.put("P02", P02_Param);

		P03_Param=toKor(GetB(request.getParameter("P03")));
		P03_Param=aiReplace(P03_Param, str, "\n");
		mapParam.put("P03", P03_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화

	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시

			getBgImageScript(10);		//배경 이미지 함수 호출
			getScriptFrombutt(false, true);		//바닥글 밴드 호출
			break;
			case 30:		//SHEET=Sheet=3   FRAME=0에서 페이지 스킵시

			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight){
		//GetPrintHeight_AutoCode
		int ch;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		printWidth = printWidth*100;

		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
				}
			} else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;

				if (ch==13) {
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}
			} else {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}
			}
		}

		if (height>printHeight) {
			height=height-printHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight){
		//GetPrintHeightEx_AutoCode
		int ch;
		int i;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		boolean bSplit=false;
		strSplitData[0]="";
		strSplitData[1]="";
		printWidth = printWidth*100;

		for (i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
				}
			}else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;
				if (ch==13){
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					if(i!=size-1){
						bSplit=true;
						i++;
					}
					break;
				}
			}else{
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					bSplit=true;
					break;
				}
			}
		}

		if(bSplit){
			strSplitData[0]=data.substring(0, i);
			strSplitData[1]=data.substring(i);
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|0|Temporary.style|보고서 (2014/6/16 13:20:56)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스

	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}
}
%>
