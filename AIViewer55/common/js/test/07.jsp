<%
/************************************************************************************
Generated by AIDesigner 5.5.1.5
************************************************************************************
보고서 제목 : 보고서 (2014/7/2 15:58:24)
작성일 : 2014년7월2일 15시58분24초

작성자 :
************************************************************************************/
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page contentType="text/html; charset=utf-8" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>
<%@ page import="com.activeintra.util.uds.*" %>

<%@ page import="com.activeintra.util.uds.*" %>

<%
Object[] userObj = null;

String reportMode=request.getParameter("reportMode");
String reportParams=request.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext,request,response,userObj);
handler.service(out);
handler = null;
%>

<%!
private Logger logger = Logger.getLogger("07.jsp");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장

	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장

	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장

	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장

	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장

	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장

	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수

	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭

	private int nBandOffset;		//반복밴드 가로 반복 offset값

	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅

	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_A1 = "";
	String sheet10_A2 = "";
	String sheet10_A3 = "";
	String sheet10_B3 = "";
	String sheet10_D3 = "";
	String sheet10_F3 = "";
	String sheet10_A4 = "";
	String sheet10_B4 = "";
	String sheet10_D4 = "";
	String sheet10_F4 = "";
	String sheet10_A5 = "";
	String sheet10_B5 = "";
	String sheet10_E5 = "";
	String sheet10_G5 = "";
	String sheet10_H5 = "";
	String sheet10_A6 = "";
	String sheet10_B6 = "";
	String sheet10_E6 = "";
	String sheet10_G6 = "";
	String sheet10_H6 = "";
	String sheet20_A1 = "";
	String sheet20_A2 = "";
	String sheet20_A3 = "";
	String sheet20_B3 = "";
	String sheet20_C3 = "";
	String sheet20_D3 = "";
	String sheet20_E3 = "";
	String sheet20_A4 = "";
	String sheet20_B4 = "";
	String sheet20_C4 = "";
	String sheet20_D4 = "";
	String sheet20_E4 = "";
	String sheet20_A5 = "";
	String sheet20_B5 = "";
	String sheet20_C5 = "";
	String sheet20_D5 = "";
	String sheet20_E5 = "";
	int[] nAutoHeight_sh3_void1=new int[5];
	String sheet30_A1 = "";
	String sheet30_A2 = "";
	String sheet30_A3 = "";
	String sheet30_B3 = "";
	String sheet30_C3 = "";
	String sheet30_D3 = "";
	String sheet30_E3 = "";
	String sheet30_A4 = "";
	String sheet30_B4 = "";
	String sheet30_C4 = "";
	String sheet30_D4 = "";
	String sheet30_E4 = "";
	String sheet30_A5 = "";
	String sheet30_B5 = "";
	String sheet30_C5 = "";
	String sheet30_D5 = "";
	String sheet30_E5 = "";
	int[] nAutoHeight_sh4_void1=new int[7];
	String sheet40_A1 = "";
	String sheet40_A2 = "";
	String sheet40_A3 = "";
	String sheet40_B3 = "";
	String sheet40_C3 = "";
	String sheet40_D3 = "";
	String sheet40_E3 = "";
	String sheet40_A4 = "";
	String sheet40_B4 = "";
	String sheet40_C4 = "";
	String sheet40_D4 = "";
	String sheet40_E4 = "";
	String sheet40_A5 = "";
	String sheet40_B5 = "";
	String sheet40_C5 = "";
	String sheet40_D5 = "";
	String sheet40_E5 = "";
	String sheet40_A6 = "";
	String sheet40_B6 = "";
	String sheet40_C6 = "";
	String sheet40_D6 = "";
	String sheet40_E6 = "";
	String sheet40_A7 = "";
	String sheet40_B7 = "";
	String sheet40_C7 = "";
	String sheet40_D7 = "";
	String sheet40_E7 = "";
	int[] nAutoHeight_sh5_void1=new int[15];
	String sheet50_A1 = "";
	String sheet50_A2 = "";
	String sheet50_A3 = "";
	String sheet50_C3 = "";
	String sheet50_D3 = "";
	String sheet50_E3 = "";
	String sheet50_F3 = "";
	String sheet50_A4 = "";
	String sheet50_C4 = "";
	String sheet50_D4 = "";
	String sheet50_E4 = "";
	String sheet50_F4 = "";
	String sheet50_A5 = "";
	String sheet50_C5 = "";
	String sheet50_D5 = "";
	String sheet50_E5 = "";
	String sheet50_F5 = "";
	String sheet50_A6 = "";
	String sheet50_C6 = "";
	String sheet50_D6 = "";
	String sheet50_E6 = "";
	String sheet50_F6 = "";
	String sheet50_A7 = "";
	String sheet50_A8 = "";
	String sheet50_B8 = "";
	String sheet50_B9 = "";
	String sheet50_A10 = "";
	String sheet50_B10 = "";
	String sheet50_A11 = "";
	String sheet50_B11 = "";
	String sheet50_A12 = "";
	String sheet50_B12 = "";
	String sheet50_B13 = "";
	String sheet50_A14 = "";
	String sheet50_B14 = "";
	String sheet50_A15 = "";
	String sheet50_B15 = "";

	//-----Connection, Statement, ResultSet 객체 선언-----
	private XMLSetHandler xml_07=null;

	//-----쿼리 필드 변수 선언-----
	//UDS DataSet xml_07 객체에서 필드 값을 받는 필드 변수

	private String xml_07_p0304;
	private String xml_07_p0303;
	private String xml_07_p0302;
	private String xml_07_p0301;
	private String xml_07_p0205;
	private String xml_07_p0204;
	private String xml_07_p0203;
	private String xml_07_p0305;
	private String xml_07_p0202;
	private String xml_07_p0201;
	private String xml_07_t4;
	private String xml_07_t5;
	private String xml_07_t6;
	private String xml_07_t7;
	private String xml_07_t8;
	private String xml_07_t9;
	private String xml_07_t3;
	private String xml_07_t2;
	private String xml_07_t1;
	private String xml_07_p0901;
	private String xml_07_p0902;
	private String xml_07_p0905;
	private String xml_07_p0903;
	private String xml_07_p0904;
	private String xml_07_p0804;
	private String xml_07_p0805;
	private String xml_07_p0802;
	private String xml_07_p0803;
	private String xml_07_p0801;
	private String xml_07_p0103;
	private String xml_07_p0401;
	private String xml_07_p0504;
	private String xml_07_p0104;
	private String xml_07_p0503;
	private String xml_07_p0105;
	private String xml_07_p0403;
	private String xml_07_t10;
	private String xml_07_p0402;
	private String xml_07_p0505;
	private String xml_07_p0604;
	private String xml_07_p0605;
	private String xml_07_p0101;
	private String xml_07_p0602;
	private String xml_07_p0102;
	private String xml_07_p0603;
	private String xml_07_p0703;
	private String xml_07_p0601;
	private String xml_07_p0704;
	private String xml_07_p0701;
	private String xml_07_p0702;
	private String xml_07_p0405;
	private String xml_07_p0404;
	private String xml_07_p0502;
	private String xml_07_p0705;
	private String xml_07_p0501;
	private String xml_07_p1001;
	private String xml_07_p1002;
	private String xml_07_p1003;
	private String xml_07_p1004;
	private String xml_07_p1005;
	private String xml_07_p1101;
	private String xml_07_p1102;
	private String xml_07_p1103;
	private String xml_07_p1104;
	private String xml_07_p1105;

	//파라미터 변수 선언
	String xmlData_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext,HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.pageContext=pageContext;
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화

			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화


			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
                manager.setPassword("2345");
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "14 56 14 56");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(e);
			throw e;
		}finally{    //finally 구문
			//DataSet Close
			cleanup(xml_07, null, null, null);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "28 28 28 28");
		initSheetVariant(40, 40, 556, 803, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh1_loop1(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기


		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
		//SHEET=Sheet4   FRAME=0 함수 호출
		executeSheet40();
		//SHEET=Sheet5   FRAME=0 함수 호출
		executeSheet50();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(40, 40, 556, 803, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(40, 40, 556, 803, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet4   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet40( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(40, 40, 556, 803, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet5   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet50( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(40, 40, 556, 803, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----sh2_void1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : sh2_void1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh2_void1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=100;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//UDS DataSet xml_07 객체의 생성 여부
			if(xml_07==null){
				createUDSDataSetxml_07();
			}else{
				xml_07.beforeFirst();
			}

			//데이터 fetch
			if(xml_07.next()){
				setFieldVariableFromxml_07();	//ResultSet xml_07에서 필드 값 설정
			}else{
				setFieldInitFromxml_07();	//ResultSet xml_07의 필드 값 초기화
			}

			//데이터 변수 초기화

			sheet20_A4="";
			sheet20_B4="";
			sheet20_C4="";
			sheet20_D4="";
			sheet20_E4="";
			sheet20_A5="";
			sheet20_B5="";
			sheet20_C5="";
			sheet20_D5="";
			sheet20_E5="";

			//데이터 변수 할당
			sheet20_A1="2. 퇴직연금 공제";
			sheet20_A2=" * 퇴직연금 공제에 대한 명세를 작성합니다.";
			sheet20_A3="퇴직연금구분";
			sheet20_B3="금융회사 등";
			sheet20_C3="계좌번호";
			sheet20_D3="불입금액";
			sheet20_E3="공제금액";
			sheet20_A4=xml_07_p0101;
			sheet20_B4=xml_07_p0102;
			sheet20_C4=xml_07_p0103;
			sheet20_D4=xml_07_p0104;
			sheet20_E4=xml_07_p0105;
			sheet20_A5=xml_07_p0201;
			sheet20_B5=xml_07_p0202;
			sheet20_C5=xml_07_p0203;
			sheet20_D5=xml_07_p0204;
			sheet20_E5=xml_07_p0205;
		}    //end if(bIsFirst)

		//데이터 변수 할당
		sheet20_A1="2. 퇴직연금 공제";
		sheet20_A2=" * 퇴직연금 공제에 대한 명세를 작성합니다.";
		sheet20_A3="퇴직연금구분";
		sheet20_B3="금융회사 등";
		sheet20_C3="계좌번호";
		sheet20_D3="불입금액";
		sheet20_E3="공제금액";
		sheet20_A4=xml_07_p0101;
		sheet20_B4=xml_07_p0102;
		sheet20_C4=xml_07_p0103;
		sheet20_D4=xml_07_p0104;
		sheet20_E4=xml_07_p0105;
		sheet20_A5=xml_07_p0201;
		sheet20_B5=xml_07_p0202;
		sheet20_C5=xml_07_p0203;
		sheet20_D5=xml_07_p0204;
		sheet20_E5=xml_07_p0205;

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사

			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh2_void1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh3_void1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : sh3_void1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh3_void1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=100;    //밴드 출력 높이
		//폰트명 : 굴림
		//폰트 사이즈 : 10
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {333,333,375,750,598,875,688,283,375,375,500,625,334,625,334,417,574,574,574,574,574,574,574,574,574,574,334,334,625,625,625,542,1000,646,677,718,722,625,596,770,730,270,500,635,543,813,699,770,637,773,666,633,582,711,600,895,625,625,625,500,917,500,542,500,333,563,605,572,605,567,342,605,571,241,241,500,231,861,580,605,605,605,333,525,313,570,500,750,500,500,500,500,500,500,792,1000};

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//UDS DataSet xml_07 객체의 생성 여부
			if(xml_07==null){
				createUDSDataSetxml_07();
			}else{
				xml_07.beforeFirst();
			}

			//데이터 fetch
			if(xml_07.next()){
				setFieldVariableFromxml_07();	//ResultSet xml_07에서 필드 값 설정
			}else{
				setFieldInitFromxml_07();	//ResultSet xml_07의 필드 값 초기화
			}

			//데이터 변수 초기화

			sheet30_A4="";
			sheet30_B4="";
			sheet30_C4="";
			sheet30_D4="";
			sheet30_E4="";
			sheet30_A5="";
			sheet30_B5="";
			sheet30_C5="";
			sheet30_D5="";
			sheet30_E5="";

			//데이터 변수 할당
			sheet30_A1="3.연금저축 공제";
			sheet30_A2=" * 연금저축 공제에 대한 명세를 작성합니다.";
			sheet30_A3="연금저축구분";
			sheet30_B3="금융회사 등";
			sheet30_C3="계좌번호";
			sheet30_D3="불입금액";
			sheet30_E3="공제금액";
			sheet30_A4=xml_07_p0301;
			sheet30_B4=xml_07_p0302;
			sheet30_C4=xml_07_p0303;
			sheet30_D4=xml_07_p0304;
			sheet30_E4=xml_07_p0305;
			sheet30_A5=xml_07_p0401;
			sheet30_B5=xml_07_p0402;
			sheet30_C5=xml_07_p0403;
			sheet30_D5=xml_07_p0404;
			sheet30_E5=xml_07_p0405;

			//Auto Size Code
			nAutoHeight_sh3_void1[0]=0;
			nAutoHeight_sh3_void1[1]=0;
			nAutoHeight_sh3_void1[2]=0;
			nAutoHeight_sh3_void1[3]=0;
			nAutoHeight_sh3_void1[4]=0;
			nAutoHeight_sh3_void1[4]=getPrintHeight(sheet30_A5, charWidth, 10, 93, 20, nAutoHeight_sh3_void1[4]);
			nAutoHeight_sh3_void1[0]=nAutoHeight_sh3_void1[0]+20;
			nAutoHeight_sh3_void1[1]=nAutoHeight_sh3_void1[0]+nAutoHeight_sh3_void1[1]+20;
			nAutoHeight_sh3_void1[2]=nAutoHeight_sh3_void1[1]+nAutoHeight_sh3_void1[2]+20;
			nAutoHeight_sh3_void1[3]=nAutoHeight_sh3_void1[2]+nAutoHeight_sh3_void1[3]+20;
			nAutoHeight_sh3_void1[4]=nAutoHeight_sh3_void1[3]+nAutoHeight_sh3_void1[4]+20;
		}    //end if(bIsFirst)

		//데이터 변수 할당
		sheet30_A1="3.연금저축 공제";
		sheet30_A2=" * 연금저축 공제에 대한 명세를 작성합니다.";
		sheet30_A3="연금저축구분";
		sheet30_B3="금융회사 등";
		sheet30_C3="계좌번호";
		sheet30_D3="불입금액";
		sheet30_E3="공제금액";
		sheet30_A4=xml_07_p0301;
		sheet30_B4=xml_07_p0302;
		sheet30_C4=xml_07_p0303;
		sheet30_D4=xml_07_p0304;
		sheet30_E4=xml_07_p0305;
		sheet30_A5=xml_07_p0401;
		sheet30_B5=xml_07_p0402;
		sheet30_C5=xml_07_p0403;
		sheet30_D5=xml_07_p0404;
		sheet30_E5=xml_07_p0405;

		//Auto Size Code
		nAutoHeight_sh3_void1[0]=0;
		nAutoHeight_sh3_void1[1]=0;
		nAutoHeight_sh3_void1[2]=0;
		nAutoHeight_sh3_void1[3]=0;
		nAutoHeight_sh3_void1[4]=0;
		nAutoHeight_sh3_void1[4]=getPrintHeight(sheet30_A5, charWidth, 10, 93, 20, nAutoHeight_sh3_void1[4]);
		nAutoHeight_sh3_void1[0]=nAutoHeight_sh3_void1[0]+20;
		nAutoHeight_sh3_void1[1]=nAutoHeight_sh3_void1[0]+nAutoHeight_sh3_void1[1]+20;
		nAutoHeight_sh3_void1[2]=nAutoHeight_sh3_void1[1]+nAutoHeight_sh3_void1[2]+20;
		nAutoHeight_sh3_void1[3]=nAutoHeight_sh3_void1[2]+nAutoHeight_sh3_void1[3]+20;
		nAutoHeight_sh3_void1[4]=nAutoHeight_sh3_void1[3]+nAutoHeight_sh3_void1[4]+20;

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사

			nBandHeight=nAutoHeight_sh3_void1[4];
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh3_void1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh4_void1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : sh4_void1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh4_void1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=140;    //밴드 출력 높이
		//폰트명 : 굴림
		//폰트 사이즈 : 10
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {333,333,375,750,598,875,688,283,375,375,500,625,334,625,334,417,574,574,574,574,574,574,574,574,574,574,334,334,625,625,625,542,1000,646,677,718,722,625,596,770,730,270,500,635,543,813,699,770,637,773,666,633,582,711,600,895,625,625,625,500,917,500,542,500,333,563,605,572,605,567,342,605,571,241,241,500,231,861,580,605,605,605,333,525,313,570,500,750,500,500,500,500,500,500,792,1000};

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//UDS DataSet xml_07 객체의 생성 여부
			if(xml_07==null){
				createUDSDataSetxml_07();
			}else{
				xml_07.beforeFirst();
			}

			//데이터 fetch
			if(xml_07.next()){
				setFieldVariableFromxml_07();	//ResultSet xml_07에서 필드 값 설정
			}else{
				setFieldInitFromxml_07();	//ResultSet xml_07의 필드 값 초기화
			}

			//데이터 변수 초기화

			sheet40_A4="";
			sheet40_B4="";
			sheet40_C4="";
			sheet40_D4="";
			sheet40_E4="";
			sheet40_A5="";
			sheet40_B5="";
			sheet40_C5="";
			sheet40_D5="";
			sheet40_E5="";
			sheet40_A6="";
			sheet40_B6="";
			sheet40_C6="";
			sheet40_D6="";
			sheet40_E6="";
			sheet40_A7="";
			sheet40_B7="";
			sheet40_C7="";
			sheet40_D7="";
			sheet40_E7="";

			//데이터 변수 할당
			sheet40_A1="4. 주택마련저축 공제";
			sheet40_A2=" * 주택마련저축 공제에 대한 명세를 작성합니다.";
			sheet40_A3="저축구분";
			sheet40_B3="금융회사 등";
			sheet40_C3="계좌번호";
			sheet40_D3="불입금액";
			sheet40_E3="공제금액";
			sheet40_A4=xml_07_p0501;
			sheet40_B4=xml_07_p0502;
			sheet40_C4=xml_07_p0503;
			sheet40_D4=xml_07_p0504;
			sheet40_E4=xml_07_p0505;
			sheet40_A5=xml_07_p0601;
			sheet40_B5=xml_07_p0602;
			sheet40_C5=xml_07_p0603;
			sheet40_D5=xml_07_p0604;
			sheet40_E5=xml_07_p0605;
			sheet40_A6=xml_07_p0701;
			sheet40_B6=xml_07_p0702;
			sheet40_C6=xml_07_p0703;
			sheet40_D6=xml_07_p0704;
			sheet40_E6=xml_07_p0705;
			sheet40_A7=xml_07_p0801;
			sheet40_B7=xml_07_p0802;
			sheet40_C7=xml_07_p0803;
			sheet40_D7=xml_07_p0804;
			sheet40_E7=xml_07_p0805;

			//Auto Size Code
			nAutoHeight_sh4_void1[0]=0;
			nAutoHeight_sh4_void1[1]=0;
			nAutoHeight_sh4_void1[2]=0;
			nAutoHeight_sh4_void1[3]=0;
			nAutoHeight_sh4_void1[4]=0;
			nAutoHeight_sh4_void1[5]=0;
			nAutoHeight_sh4_void1[6]=0;
			nAutoHeight_sh4_void1[5]=getPrintHeight(sheet40_A6, charWidth, 10, 93, 20, nAutoHeight_sh4_void1[5]);
			nAutoHeight_sh4_void1[0]=nAutoHeight_sh4_void1[0]+20;
			nAutoHeight_sh4_void1[1]=nAutoHeight_sh4_void1[0]+nAutoHeight_sh4_void1[1]+20;
			nAutoHeight_sh4_void1[2]=nAutoHeight_sh4_void1[1]+nAutoHeight_sh4_void1[2]+20;
			nAutoHeight_sh4_void1[3]=nAutoHeight_sh4_void1[2]+nAutoHeight_sh4_void1[3]+20;
			nAutoHeight_sh4_void1[4]=nAutoHeight_sh4_void1[3]+nAutoHeight_sh4_void1[4]+20;
			nAutoHeight_sh4_void1[5]=nAutoHeight_sh4_void1[4]+nAutoHeight_sh4_void1[5]+20;
			nAutoHeight_sh4_void1[6]=nAutoHeight_sh4_void1[5]+nAutoHeight_sh4_void1[6]+20;
		}    //end if(bIsFirst)

		//데이터 변수 할당
		sheet40_A1="4. 주택마련저축 공제";
		sheet40_A2=" * 주택마련저축 공제에 대한 명세를 작성합니다.";
		sheet40_A3="저축구분";
		sheet40_B3="금융회사 등";
		sheet40_C3="계좌번호";
		sheet40_D3="불입금액";
		sheet40_E3="공제금액";
		sheet40_A4=xml_07_p0501;
		sheet40_B4=xml_07_p0502;
		sheet40_C4=xml_07_p0503;
		sheet40_D4=xml_07_p0504;
		sheet40_E4=xml_07_p0505;
		sheet40_A5=xml_07_p0601;
		sheet40_B5=xml_07_p0602;
		sheet40_C5=xml_07_p0603;
		sheet40_D5=xml_07_p0604;
		sheet40_E5=xml_07_p0605;
		sheet40_A6=xml_07_p0701;
		sheet40_B6=xml_07_p0702;
		sheet40_C6=xml_07_p0703;
		sheet40_D6=xml_07_p0704;
		sheet40_E6=xml_07_p0705;
		sheet40_A7=xml_07_p0801;
		sheet40_B7=xml_07_p0802;
		sheet40_C7=xml_07_p0803;
		sheet40_D7=xml_07_p0804;
		sheet40_E7=xml_07_p0805;

		//Auto Size Code
		nAutoHeight_sh4_void1[0]=0;
		nAutoHeight_sh4_void1[1]=0;
		nAutoHeight_sh4_void1[2]=0;
		nAutoHeight_sh4_void1[3]=0;
		nAutoHeight_sh4_void1[4]=0;
		nAutoHeight_sh4_void1[5]=0;
		nAutoHeight_sh4_void1[6]=0;
		nAutoHeight_sh4_void1[5]=getPrintHeight(sheet40_A6, charWidth, 10, 93, 20, nAutoHeight_sh4_void1[5]);
		nAutoHeight_sh4_void1[0]=nAutoHeight_sh4_void1[0]+20;
		nAutoHeight_sh4_void1[1]=nAutoHeight_sh4_void1[0]+nAutoHeight_sh4_void1[1]+20;
		nAutoHeight_sh4_void1[2]=nAutoHeight_sh4_void1[1]+nAutoHeight_sh4_void1[2]+20;
		nAutoHeight_sh4_void1[3]=nAutoHeight_sh4_void1[2]+nAutoHeight_sh4_void1[3]+20;
		nAutoHeight_sh4_void1[4]=nAutoHeight_sh4_void1[3]+nAutoHeight_sh4_void1[4]+20;
		nAutoHeight_sh4_void1[5]=nAutoHeight_sh4_void1[4]+nAutoHeight_sh4_void1[5]+20;
		nAutoHeight_sh4_void1[6]=nAutoHeight_sh4_void1[5]+nAutoHeight_sh4_void1[6]+20;

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사

			nBandHeight=nAutoHeight_sh4_void1[6];
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh4_void1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh5_void1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet5    FRAME=Frame0
	//----밴드 이름 : sh5_void1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh5_void1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=260;    //밴드 출력 높이
		//폰트명 : 굴림
		//폰트 사이즈 : 10
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {333,333,375,750,598,875,688,283,375,375,500,625,334,625,334,417,574,574,574,574,574,574,574,574,574,574,334,334,625,625,625,542,1000,646,677,718,722,625,596,770,730,270,500,635,543,813,699,770,637,773,666,633,582,711,600,895,625,625,625,500,917,500,542,500,333,563,605,572,605,567,342,605,571,241,241,500,231,861,580,605,605,605,333,525,313,570,500,750,500,500,500,500,500,500,792,1000};

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//UDS DataSet xml_07 객체의 생성 여부
			if(xml_07==null){
				createUDSDataSetxml_07();
			}else{
				xml_07.beforeFirst();
			}

			//데이터 fetch
			if(xml_07.next()){
				setFieldVariableFromxml_07();	//ResultSet xml_07에서 필드 값 설정
			}else{
				setFieldInitFromxml_07();	//ResultSet xml_07의 필드 값 초기화
			}

			//데이터 변수 초기화

			sheet50_A4="";
			sheet50_C4="";
			sheet50_D4="";
			sheet50_E4="";
			sheet50_F4="";
			sheet50_A5="";
			sheet50_C5="";
			sheet50_D5="";
			sheet50_E5="";
			sheet50_F5="";
			sheet50_A6="";
			sheet50_C6="";
			sheet50_D6="";
			sheet50_E6="";
			sheet50_F6="";

			//데이터 변수 할당
			sheet50_A1="5. 장기주식형저축 공제";
			sheet50_A2=" * 장기주식형저축 공제에 대한 명세를 작성합니다.";
			sheet50_A3="금융회사 등";
			sheet50_C3="계좌번호";
			sheet50_D3="납입연차";
			sheet50_E3="불입금액";
			sheet50_F3="공제금액";
			sheet50_A4=xml_07_p0901;
			sheet50_C4=xml_07_p0902;
			sheet50_D4=xml_07_p0903;
			sheet50_E4=xml_07_p0904;
			sheet50_F4=xml_07_p0905;
			sheet50_A5=xml_07_p1001;
			sheet50_C5=xml_07_p1002;
			sheet50_D5=xml_07_p1003;
			sheet50_E5=xml_07_p1004;
			sheet50_F5=xml_07_p1005;
			sheet50_A6=xml_07_p1101;
			sheet50_C6=xml_07_p1102;
			sheet50_D6=xml_07_p1103;
			sheet50_E6=xml_07_p1104;
			sheet50_F6=xml_07_p1105;
			sheet50_A7="※ 작성방법";
			sheet50_A8="1.";
			sheet50_B8="퇴직연금ㆍ연금저축ㆍ주택마련저축ㆍ장기주식형저축 공제를 받는 소득자에 대해서는 해당 소득공제에 대한 명세를 작성";
			sheet50_B9="하여야 합니다.";
			sheet50_A10="2.";
			sheet50_B10="퇴직연금 공제에서 퇴직연금구분란은 퇴직연금ㆍ과학기술인공제회로 구분하여 적습니다.";
			sheet50_A11="3.";
			sheet50_B11="연금저축 공제의 연금저축구분란은 개인연금저축과 연금저축으로 구분하여 적습니다.";
			sheet50_A12="4.";
			sheet50_B12="주택마련저축 공제의 저축구분란은 청약저축, 주택청약종합저축, 장기주택마련저축 및 근로자주택마련저축으로 구분하여";
			sheet50_B13="적습니다.";
			sheet50_A14="5.";
			sheet50_B14="장기주식형저축 공제의 경우 동일 계좌라 하더라도 해당 과세기간에 납입연차가 달라지는 경우 구분하여 적습니다.";
			sheet50_A15="6.";
			sheet50_B15="공제금액란은 근로소득자가 적지 아니할 수 있습니다.";

			//Auto Size Code
			nAutoHeight_sh5_void1[0]=0;
			nAutoHeight_sh5_void1[1]=0;
			nAutoHeight_sh5_void1[2]=0;
			nAutoHeight_sh5_void1[3]=0;
			nAutoHeight_sh5_void1[4]=0;
			nAutoHeight_sh5_void1[5]=0;
			nAutoHeight_sh5_void1[6]=0;
			nAutoHeight_sh5_void1[7]=0;
			nAutoHeight_sh5_void1[8]=0;
			nAutoHeight_sh5_void1[9]=0;
			nAutoHeight_sh5_void1[10]=0;
			nAutoHeight_sh5_void1[11]=0;
			nAutoHeight_sh5_void1[12]=0;
			nAutoHeight_sh5_void1[13]=0;
			nAutoHeight_sh5_void1[14]=0;
			nAutoHeight_sh5_void1[4]=getPrintHeight(sheet50_A5, charWidth, 10, 141, 20, nAutoHeight_sh5_void1[4]);
			nAutoHeight_sh5_void1[0]=nAutoHeight_sh5_void1[0]+20;
			nAutoHeight_sh5_void1[1]=nAutoHeight_sh5_void1[0]+nAutoHeight_sh5_void1[1]+20;
			nAutoHeight_sh5_void1[2]=nAutoHeight_sh5_void1[1]+nAutoHeight_sh5_void1[2]+20;
			nAutoHeight_sh5_void1[3]=nAutoHeight_sh5_void1[2]+nAutoHeight_sh5_void1[3]+20;
			nAutoHeight_sh5_void1[4]=nAutoHeight_sh5_void1[3]+nAutoHeight_sh5_void1[4]+20;
			nAutoHeight_sh5_void1[5]=nAutoHeight_sh5_void1[4]+nAutoHeight_sh5_void1[5]+20;
			nAutoHeight_sh5_void1[6]=nAutoHeight_sh5_void1[5]+nAutoHeight_sh5_void1[6]+20;
			nAutoHeight_sh5_void1[7]=nAutoHeight_sh5_void1[6]+nAutoHeight_sh5_void1[7]+15;
			nAutoHeight_sh5_void1[8]=nAutoHeight_sh5_void1[7]+nAutoHeight_sh5_void1[8]+15;
			nAutoHeight_sh5_void1[9]=nAutoHeight_sh5_void1[8]+nAutoHeight_sh5_void1[9]+15;
			nAutoHeight_sh5_void1[10]=nAutoHeight_sh5_void1[9]+nAutoHeight_sh5_void1[10]+15;
			nAutoHeight_sh5_void1[11]=nAutoHeight_sh5_void1[10]+nAutoHeight_sh5_void1[11]+15;
			nAutoHeight_sh5_void1[12]=nAutoHeight_sh5_void1[11]+nAutoHeight_sh5_void1[12]+15;
			nAutoHeight_sh5_void1[13]=nAutoHeight_sh5_void1[12]+nAutoHeight_sh5_void1[13]+15;
			nAutoHeight_sh5_void1[14]=nAutoHeight_sh5_void1[13]+nAutoHeight_sh5_void1[14]+15;
		}    //end if(bIsFirst)

		//데이터 변수 할당
		sheet50_A1="5. 장기주식형저축 공제";
		sheet50_A2=" * 장기주식형저축 공제에 대한 명세를 작성합니다.";
		sheet50_A3="금융회사 등";
		sheet50_C3="계좌번호";
		sheet50_D3="납입연차";
		sheet50_E3="불입금액";
		sheet50_F3="공제금액";
		sheet50_A4=xml_07_p0901;
		sheet50_C4=xml_07_p0902;
		sheet50_D4=xml_07_p0903;
		sheet50_E4=xml_07_p0904;
		sheet50_F4=xml_07_p0905;
		sheet50_A5=xml_07_p1001;
		sheet50_C5=xml_07_p1002;
		sheet50_D5=xml_07_p1003;
		sheet50_E5=xml_07_p1004;
		sheet50_F5=xml_07_p1005;
		sheet50_A6=xml_07_p1101;
		sheet50_C6=xml_07_p1102;
		sheet50_D6=xml_07_p1103;
		sheet50_E6=xml_07_p1104;
		sheet50_F6=xml_07_p1105;
		sheet50_A7="※ 작성방법";
		sheet50_A8="1.";
		sheet50_B8="퇴직연금ㆍ연금저축ㆍ주택마련저축ㆍ장기주식형저축 공제를 받는 소득자에 대해서는 해당 소득공제에 대한 명세를 작성";
		sheet50_B9="하여야 합니다.";
		sheet50_A10="2.";
		sheet50_B10="퇴직연금 공제에서 퇴직연금구분란은 퇴직연금ㆍ과학기술인공제회로 구분하여 적습니다.";
		sheet50_A11="3.";
		sheet50_B11="연금저축 공제의 연금저축구분란은 개인연금저축과 연금저축으로 구분하여 적습니다.";
		sheet50_A12="4.";
		sheet50_B12="주택마련저축 공제의 저축구분란은 청약저축, 주택청약종합저축, 장기주택마련저축 및 근로자주택마련저축으로 구분하여";
		sheet50_B13="적습니다.";
		sheet50_A14="5.";
		sheet50_B14="장기주식형저축 공제의 경우 동일 계좌라 하더라도 해당 과세기간에 납입연차가 달라지는 경우 구분하여 적습니다.";
		sheet50_A15="6.";
		sheet50_B15="공제금액란은 근로소득자가 적지 아니할 수 있습니다.";

		//Auto Size Code
		nAutoHeight_sh5_void1[0]=0;
		nAutoHeight_sh5_void1[1]=0;
		nAutoHeight_sh5_void1[2]=0;
		nAutoHeight_sh5_void1[3]=0;
		nAutoHeight_sh5_void1[4]=0;
		nAutoHeight_sh5_void1[5]=0;
		nAutoHeight_sh5_void1[6]=0;
		nAutoHeight_sh5_void1[7]=0;
		nAutoHeight_sh5_void1[8]=0;
		nAutoHeight_sh5_void1[9]=0;
		nAutoHeight_sh5_void1[10]=0;
		nAutoHeight_sh5_void1[11]=0;
		nAutoHeight_sh5_void1[12]=0;
		nAutoHeight_sh5_void1[13]=0;
		nAutoHeight_sh5_void1[14]=0;
		nAutoHeight_sh5_void1[4]=getPrintHeight(sheet50_A5, charWidth, 10, 141, 20, nAutoHeight_sh5_void1[4]);
		nAutoHeight_sh5_void1[0]=nAutoHeight_sh5_void1[0]+20;
		nAutoHeight_sh5_void1[1]=nAutoHeight_sh5_void1[0]+nAutoHeight_sh5_void1[1]+20;
		nAutoHeight_sh5_void1[2]=nAutoHeight_sh5_void1[1]+nAutoHeight_sh5_void1[2]+20;
		nAutoHeight_sh5_void1[3]=nAutoHeight_sh5_void1[2]+nAutoHeight_sh5_void1[3]+20;
		nAutoHeight_sh5_void1[4]=nAutoHeight_sh5_void1[3]+nAutoHeight_sh5_void1[4]+20;
		nAutoHeight_sh5_void1[5]=nAutoHeight_sh5_void1[4]+nAutoHeight_sh5_void1[5]+20;
		nAutoHeight_sh5_void1[6]=nAutoHeight_sh5_void1[5]+nAutoHeight_sh5_void1[6]+20;
		nAutoHeight_sh5_void1[7]=nAutoHeight_sh5_void1[6]+nAutoHeight_sh5_void1[7]+15;
		nAutoHeight_sh5_void1[8]=nAutoHeight_sh5_void1[7]+nAutoHeight_sh5_void1[8]+15;
		nAutoHeight_sh5_void1[9]=nAutoHeight_sh5_void1[8]+nAutoHeight_sh5_void1[9]+15;
		nAutoHeight_sh5_void1[10]=nAutoHeight_sh5_void1[9]+nAutoHeight_sh5_void1[10]+15;
		nAutoHeight_sh5_void1[11]=nAutoHeight_sh5_void1[10]+nAutoHeight_sh5_void1[11]+15;
		nAutoHeight_sh5_void1[12]=nAutoHeight_sh5_void1[11]+nAutoHeight_sh5_void1[12]+15;
		nAutoHeight_sh5_void1[13]=nAutoHeight_sh5_void1[12]+nAutoHeight_sh5_void1[13]+15;
		nAutoHeight_sh5_void1[14]=nAutoHeight_sh5_void1[13]+nAutoHeight_sh5_void1[14]+15;

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사

			nBandHeight=nAutoHeight_sh5_void1[14];
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh5_void1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----sh1_loop1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet1   FRAME=Frame0
	//-----밴드 이름 : sh1_loop1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromsh1_loop1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화

		int nBandHeight=140;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화

		sheet10_B3="";
		sheet10_F3="";
		sheet10_B4="";
		sheet10_F4="";
		sheet10_B5="";
		sheet10_G5="";
		sheet10_B6="";
		sheet10_G6="";

		//DataSet 객체 생성
		//UDS DataSet xml_07 객체의 생성 여부
		if(xml_07==null){
			createUDSDataSetxml_07();
		}else{
			xml_07.beforeFirst();
		}

		while(xml_07.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromxml_07();	//RecordSet xml_07에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet10_A1="연금·저축 등 소득공제 명세서";
			sheet10_A2="1.인적사항";
			sheet10_A3="①상            호";
			sheet10_B3=xml_07_t2;
			sheet10_D3="②사 업 자 등 록 번 호";
			sheet10_F3=xml_07_t3;
			sheet10_A4="③성            명";
			sheet10_B4=xml_07_t4;
			sheet10_D4="④주  민  등  록  번  호";
			sheet10_F4=xml_07_t6;
			sheet10_A5="⑤주            소";
			sheet10_B5=xml_07_t7;
			sheet10_E5="( 전화번호 :";
			sheet10_G5=xml_07_t8;
			sheet10_H5=")";
			sheet10_A6="⑥사업장소재지";
			sheet10_B6=xml_07_t9;
			sheet10_E6="( 전화번호 :";
			sheet10_G6=xml_07_t10;
			sheet10_H6=")";

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptsh1_loop1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			/*

			//루프 내부 자식 밴드 호출
			getScriptFromsh2_void1(bIsFirst, true);
			getScriptFromsh3_void1(bIsFirst, true);
			getScriptFromsh4_void1(bIsFirst, true);
			getScriptFromsh5_void1(bIsFirst, true);

			*/

			getScriptFromsh2_void1(false, true);
			getScriptFromsh3_void1(false, true);
			getScriptFromsh4_void1(false, true);
			getScriptFromsh5_void1(false, true);

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//-----스크립트 출력 함수-----
	//----sh2_void1 스크립트 문 출력 함수----
	private void writeScriptsh2_void1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 516, 20, sheet20_A1, "sheet20_A1", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+20, 516, 20, sheet20_A2, "sheet20_A2", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+40, 101, 20, sheet20_A3, "sheet20_A3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+101, nYCurPos+40, 132, 20, sheet20_B3, "sheet20_B3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+233, nYCurPos+40, 109, 20, sheet20_C3, "sheet20_C3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+342, nYCurPos+40, 87, 20, sheet20_D3, "sheet20_D3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+40, 87, 20, sheet20_E3, "sheet20_E3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+60, 101, 20, sheet20_A4, "sheet20_A4", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+101, nYCurPos+60, 132, 20, sheet20_B4, "sheet20_B4", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+233, nYCurPos+60, 109, 20, sheet20_C4, "sheet20_C4", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+342, nYCurPos+60, 87, 20, sheet20_D4, "sheet20_D4", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+60, 87, 20, sheet20_E4, "sheet20_E4", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+80, 101, 20, sheet20_A5, "sheet20_A5", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+101, nYCurPos+80, 132, 20, sheet20_B5, "sheet20_B5", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+233, nYCurPos+80, 109, 20, sheet20_C5, "sheet20_C5", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+342, nYCurPos+80, 87, 20, sheet20_D5, "sheet20_D5", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+80, 87, 20, sheet20_E5, "sheet20_E5", "cell_style_17");
	}

	//----sh3_void1 스크립트 문 출력 함수----
	private void writeScriptsh3_void1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 516, nAutoHeight_sh3_void1[0], sheet30_A1, "sheet30_A1", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh3_void1[0], 516, nAutoHeight_sh3_void1[1]-nAutoHeight_sh3_void1[0], sheet30_A2, "sheet30_A2", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh3_void1[1], 101, nAutoHeight_sh3_void1[2]-nAutoHeight_sh3_void1[1], sheet30_A3, "sheet30_A3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+101, nYCurPos+nAutoHeight_sh3_void1[1], 132, nAutoHeight_sh3_void1[2]-nAutoHeight_sh3_void1[1], sheet30_B3, "sheet30_B3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+233, nYCurPos+nAutoHeight_sh3_void1[1], 109, nAutoHeight_sh3_void1[2]-nAutoHeight_sh3_void1[1], sheet30_C3, "sheet30_C3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+342, nYCurPos+nAutoHeight_sh3_void1[1], 87, nAutoHeight_sh3_void1[2]-nAutoHeight_sh3_void1[1], sheet30_D3, "sheet30_D3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+nAutoHeight_sh3_void1[1], 87, nAutoHeight_sh3_void1[2]-nAutoHeight_sh3_void1[1], sheet30_E3, "sheet30_E3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh3_void1[2], 101, nAutoHeight_sh3_void1[3]-nAutoHeight_sh3_void1[2], sheet30_A4, "sheet30_A4", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+101, nYCurPos+nAutoHeight_sh3_void1[2], 132, nAutoHeight_sh3_void1[3]-nAutoHeight_sh3_void1[2], sheet30_B4, "sheet30_B4", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+233, nYCurPos+nAutoHeight_sh3_void1[2], 109, nAutoHeight_sh3_void1[3]-nAutoHeight_sh3_void1[2], sheet30_C4, "sheet30_C4", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+342, nYCurPos+nAutoHeight_sh3_void1[2], 87, nAutoHeight_sh3_void1[3]-nAutoHeight_sh3_void1[2], sheet30_D4, "sheet30_D4", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+nAutoHeight_sh3_void1[2], 87, nAutoHeight_sh3_void1[3]-nAutoHeight_sh3_void1[2], sheet30_E4, "sheet30_E4", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh3_void1[3], 101, nAutoHeight_sh3_void1[4]-nAutoHeight_sh3_void1[3], sheet30_A5, "sheet30_A5", "cell_style_18");
		objectWrite(CELL_OBJECT, nXCurPos+101, nYCurPos+nAutoHeight_sh3_void1[3], 132, nAutoHeight_sh3_void1[4]-nAutoHeight_sh3_void1[3], sheet30_B5, "sheet30_B5", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+233, nYCurPos+nAutoHeight_sh3_void1[3], 109, nAutoHeight_sh3_void1[4]-nAutoHeight_sh3_void1[3], sheet30_C5, "sheet30_C5", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+342, nYCurPos+nAutoHeight_sh3_void1[3], 87, nAutoHeight_sh3_void1[4]-nAutoHeight_sh3_void1[3], sheet30_D5, "sheet30_D5", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+nAutoHeight_sh3_void1[3], 87, nAutoHeight_sh3_void1[4]-nAutoHeight_sh3_void1[3], sheet30_E5, "sheet30_E5", "cell_style_17");
	}

	//----sh4_void1 스크립트 문 출력 함수----
	private void writeScriptsh4_void1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 516, nAutoHeight_sh4_void1[0], sheet40_A1, "sheet40_A1", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh4_void1[0], 516, nAutoHeight_sh4_void1[1]-nAutoHeight_sh4_void1[0], sheet40_A2, "sheet40_A2", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh4_void1[1], 101, nAutoHeight_sh4_void1[2]-nAutoHeight_sh4_void1[1], sheet40_A3, "sheet40_A3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+101, nYCurPos+nAutoHeight_sh4_void1[1], 132, nAutoHeight_sh4_void1[2]-nAutoHeight_sh4_void1[1], sheet40_B3, "sheet40_B3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+233, nYCurPos+nAutoHeight_sh4_void1[1], 109, nAutoHeight_sh4_void1[2]-nAutoHeight_sh4_void1[1], sheet40_C3, "sheet40_C3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+342, nYCurPos+nAutoHeight_sh4_void1[1], 87, nAutoHeight_sh4_void1[2]-nAutoHeight_sh4_void1[1], sheet40_D3, "sheet40_D3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+nAutoHeight_sh4_void1[1], 87, nAutoHeight_sh4_void1[2]-nAutoHeight_sh4_void1[1], sheet40_E3, "sheet40_E3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh4_void1[2], 101, nAutoHeight_sh4_void1[3]-nAutoHeight_sh4_void1[2], sheet40_A4, "sheet40_A4", "cell_style_19");
		objectWrite(CELL_OBJECT, nXCurPos+101, nYCurPos+nAutoHeight_sh4_void1[2], 132, nAutoHeight_sh4_void1[3]-nAutoHeight_sh4_void1[2], sheet40_B4, "sheet40_B4", "cell_style_19");
		objectWrite(CELL_OBJECT, nXCurPos+233, nYCurPos+nAutoHeight_sh4_void1[2], 109, nAutoHeight_sh4_void1[3]-nAutoHeight_sh4_void1[2], sheet40_C4, "sheet40_C4", "cell_style_19");
		objectWrite(CELL_OBJECT, nXCurPos+342, nYCurPos+nAutoHeight_sh4_void1[2], 87, nAutoHeight_sh4_void1[3]-nAutoHeight_sh4_void1[2], sheet40_D4, "sheet40_D4", "cell_style_20");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+nAutoHeight_sh4_void1[2], 87, nAutoHeight_sh4_void1[3]-nAutoHeight_sh4_void1[2], sheet40_E4, "sheet40_E4", "cell_style_21");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh4_void1[3], 101, nAutoHeight_sh4_void1[4]-nAutoHeight_sh4_void1[3], sheet40_A5, "sheet40_A5", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+101, nYCurPos+nAutoHeight_sh4_void1[3], 132, nAutoHeight_sh4_void1[4]-nAutoHeight_sh4_void1[3], sheet40_B5, "sheet40_B5", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+233, nYCurPos+nAutoHeight_sh4_void1[3], 109, nAutoHeight_sh4_void1[4]-nAutoHeight_sh4_void1[3], sheet40_C5, "sheet40_C5", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+342, nYCurPos+nAutoHeight_sh4_void1[3], 87, nAutoHeight_sh4_void1[4]-nAutoHeight_sh4_void1[3], sheet40_D5, "sheet40_D5", "cell_style_20");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+nAutoHeight_sh4_void1[3], 87, nAutoHeight_sh4_void1[4]-nAutoHeight_sh4_void1[3], sheet40_E5, "sheet40_E5", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh4_void1[4], 101, nAutoHeight_sh4_void1[5]-nAutoHeight_sh4_void1[4], sheet40_A6, "sheet40_A6", "cell_style_18");
		objectWrite(CELL_OBJECT, nXCurPos+101, nYCurPos+nAutoHeight_sh4_void1[4], 132, nAutoHeight_sh4_void1[5]-nAutoHeight_sh4_void1[4], sheet40_B6, "sheet40_B6", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+233, nYCurPos+nAutoHeight_sh4_void1[4], 109, nAutoHeight_sh4_void1[5]-nAutoHeight_sh4_void1[4], sheet40_C6, "sheet40_C6", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+342, nYCurPos+nAutoHeight_sh4_void1[4], 87, nAutoHeight_sh4_void1[5]-nAutoHeight_sh4_void1[4], sheet40_D6, "sheet40_D6", "cell_style_20");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+nAutoHeight_sh4_void1[4], 87, nAutoHeight_sh4_void1[5]-nAutoHeight_sh4_void1[4], sheet40_E6, "sheet40_E6", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh4_void1[5], 101, nAutoHeight_sh4_void1[6]-nAutoHeight_sh4_void1[5], sheet40_A7, "sheet40_A7", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+101, nYCurPos+nAutoHeight_sh4_void1[5], 132, nAutoHeight_sh4_void1[6]-nAutoHeight_sh4_void1[5], sheet40_B7, "sheet40_B7", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+233, nYCurPos+nAutoHeight_sh4_void1[5], 109, nAutoHeight_sh4_void1[6]-nAutoHeight_sh4_void1[5], sheet40_C7, "sheet40_C7", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+342, nYCurPos+nAutoHeight_sh4_void1[5], 87, nAutoHeight_sh4_void1[6]-nAutoHeight_sh4_void1[5], sheet40_D7, "sheet40_D7", "cell_style_20");
		objectWrite(CELL_OBJECT, nXCurPos+429, nYCurPos+nAutoHeight_sh4_void1[5], 87, nAutoHeight_sh4_void1[6]-nAutoHeight_sh4_void1[5], sheet40_E7, "sheet40_E7", "cell_style_17");
	}

	//----sh5_void1 스크립트 문 출력 함수----
	private void writeScriptsh5_void1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 516, nAutoHeight_sh5_void1[0], sheet50_A1, "sheet50_A1", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[0], 516, nAutoHeight_sh5_void1[1]-nAutoHeight_sh5_void1[0], sheet50_A2, "sheet50_A2", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[1], 149, nAutoHeight_sh5_void1[2]-nAutoHeight_sh5_void1[1], sheet50_A3, "sheet50_A3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+149, nYCurPos+nAutoHeight_sh5_void1[1], 106, nAutoHeight_sh5_void1[2]-nAutoHeight_sh5_void1[1], sheet50_C3, "sheet50_C3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+nAutoHeight_sh5_void1[1], 86, nAutoHeight_sh5_void1[2]-nAutoHeight_sh5_void1[1], sheet50_D3, "sheet50_D3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+341, nYCurPos+nAutoHeight_sh5_void1[1], 86, nAutoHeight_sh5_void1[2]-nAutoHeight_sh5_void1[1], sheet50_E3, "sheet50_E3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+427, nYCurPos+nAutoHeight_sh5_void1[1], 89, nAutoHeight_sh5_void1[2]-nAutoHeight_sh5_void1[1], sheet50_F3, "sheet50_F3", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[2], 149, nAutoHeight_sh5_void1[3]-nAutoHeight_sh5_void1[2], sheet50_A4, "sheet50_A4", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+149, nYCurPos+nAutoHeight_sh5_void1[2], 106, nAutoHeight_sh5_void1[3]-nAutoHeight_sh5_void1[2], sheet50_C4, "sheet50_C4", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+nAutoHeight_sh5_void1[2], 86, nAutoHeight_sh5_void1[3]-nAutoHeight_sh5_void1[2], sheet50_D4, "sheet50_D4", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+341, nYCurPos+nAutoHeight_sh5_void1[2], 86, nAutoHeight_sh5_void1[3]-nAutoHeight_sh5_void1[2], sheet50_E4, "sheet50_E4", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos+427, nYCurPos+nAutoHeight_sh5_void1[2], 89, nAutoHeight_sh5_void1[3]-nAutoHeight_sh5_void1[2], sheet50_F4, "sheet50_F4", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[3], 149, nAutoHeight_sh5_void1[4]-nAutoHeight_sh5_void1[3], sheet50_A5, "sheet50_A5", "cell_style_18");
		objectWrite(CELL_OBJECT, nXCurPos+149, nYCurPos+nAutoHeight_sh5_void1[3], 106, nAutoHeight_sh5_void1[4]-nAutoHeight_sh5_void1[3], sheet50_C5, "sheet50_C5", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+nAutoHeight_sh5_void1[3], 86, nAutoHeight_sh5_void1[4]-nAutoHeight_sh5_void1[3], sheet50_D5, "sheet50_D5", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+341, nYCurPos+nAutoHeight_sh5_void1[3], 86, nAutoHeight_sh5_void1[4]-nAutoHeight_sh5_void1[3], sheet50_E5, "sheet50_E5", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos+427, nYCurPos+nAutoHeight_sh5_void1[3], 89, nAutoHeight_sh5_void1[4]-nAutoHeight_sh5_void1[3], sheet50_F5, "sheet50_F5", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[4], 149, nAutoHeight_sh5_void1[5]-nAutoHeight_sh5_void1[4], sheet50_A6, "sheet50_A6", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+149, nYCurPos+nAutoHeight_sh5_void1[4], 106, nAutoHeight_sh5_void1[5]-nAutoHeight_sh5_void1[4], sheet50_C6, "sheet50_C6", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+nAutoHeight_sh5_void1[4], 86, nAutoHeight_sh5_void1[5]-nAutoHeight_sh5_void1[4], sheet50_D6, "sheet50_D6", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+341, nYCurPos+nAutoHeight_sh5_void1[4], 86, nAutoHeight_sh5_void1[5]-nAutoHeight_sh5_void1[4], sheet50_E6, "sheet50_E6", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos+427, nYCurPos+nAutoHeight_sh5_void1[4], 89, nAutoHeight_sh5_void1[5]-nAutoHeight_sh5_void1[4], sheet50_F6, "sheet50_F6", "cell_style_22");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[5], 516, nAutoHeight_sh5_void1[6]-nAutoHeight_sh5_void1[5], sheet50_A7, "sheet50_A7", "cell_style_23");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[6], 15, nAutoHeight_sh5_void1[7]-nAutoHeight_sh5_void1[6], sheet50_A8, "sheet50_A8", "cell_style_24");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+nAutoHeight_sh5_void1[6], 501, nAutoHeight_sh5_void1[7]-nAutoHeight_sh5_void1[6], sheet50_B8, "sheet50_B8", "cell_style_25");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[7], 15, nAutoHeight_sh5_void1[8]-nAutoHeight_sh5_void1[7], "", "sheet50_A9", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+nAutoHeight_sh5_void1[7], 501, nAutoHeight_sh5_void1[8]-nAutoHeight_sh5_void1[7], sheet50_B9, "sheet50_B9", "cell_style_27");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[8], 15, nAutoHeight_sh5_void1[9]-nAutoHeight_sh5_void1[8], sheet50_A10, "sheet50_A10", "cell_style_24");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+nAutoHeight_sh5_void1[8], 501, nAutoHeight_sh5_void1[9]-nAutoHeight_sh5_void1[8], sheet50_B10, "sheet50_B10", "cell_style_27");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[9], 15, nAutoHeight_sh5_void1[10]-nAutoHeight_sh5_void1[9], sheet50_A11, "sheet50_A11", "cell_style_24");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+nAutoHeight_sh5_void1[9], 501, nAutoHeight_sh5_void1[10]-nAutoHeight_sh5_void1[9], sheet50_B11, "sheet50_B11", "cell_style_27");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[10], 15, nAutoHeight_sh5_void1[11]-nAutoHeight_sh5_void1[10], sheet50_A12, "sheet50_A12", "cell_style_24");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+nAutoHeight_sh5_void1[10], 501, nAutoHeight_sh5_void1[11]-nAutoHeight_sh5_void1[10], sheet50_B12, "sheet50_B12", "cell_style_25");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[11], 15, nAutoHeight_sh5_void1[12]-nAutoHeight_sh5_void1[11], "", "sheet50_A13", "cell_style_26");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+nAutoHeight_sh5_void1[11], 501, nAutoHeight_sh5_void1[12]-nAutoHeight_sh5_void1[11], sheet50_B13, "sheet50_B13", "cell_style_27");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[12], 15, nAutoHeight_sh5_void1[13]-nAutoHeight_sh5_void1[12], sheet50_A14, "sheet50_A14", "cell_style_24");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+nAutoHeight_sh5_void1[12], 501, nAutoHeight_sh5_void1[13]-nAutoHeight_sh5_void1[12], sheet50_B14, "sheet50_B14", "cell_style_25");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+nAutoHeight_sh5_void1[13], 15, nAutoHeight_sh5_void1[14]-nAutoHeight_sh5_void1[13], sheet50_A15, "sheet50_A15", "cell_style_28");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+nAutoHeight_sh5_void1[13], 501, nAutoHeight_sh5_void1[14]-nAutoHeight_sh5_void1[13], sheet50_B15, "sheet50_B15", "cell_style_29");
	}

	//----sh1_loop1 스크립트 문 출력 함수----
	private void writeScriptsh1_loop1(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 516, 40, sheet10_A1, "sheet10_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+40, 516, 20, sheet10_A2, "sheet10_A2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+60, 80, 20, sheet10_A3, "sheet10_A3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+80, nYCurPos+60, 183, 20, sheet10_B3, "sheet10_B3", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+263, nYCurPos+60, 97, 20, sheet10_D3, "sheet10_D3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+360, nYCurPos+60, 156, 20, sheet10_F3, "sheet10_F3", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+80, 80, 20, sheet10_A4, "sheet10_A4", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+80, nYCurPos+80, 183, 20, sheet10_B4, "sheet10_B4", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+263, nYCurPos+80, 97, 20, sheet10_D4, "sheet10_D4", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+360, nYCurPos+80, 156, 20, sheet10_F4, "sheet10_F4", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+100, 80, 20, sheet10_A5, "sheet10_A5", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+80, nYCurPos+100, 259, 20, sheet10_B5, "sheet10_B5", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+339, nYCurPos+100, 72, 20, sheet10_E5, "sheet10_E5", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+411, nYCurPos+100, 81, 20, sheet10_G5, "sheet10_G5", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+492, nYCurPos+100, 24, 20, sheet10_H5, "sheet10_H5", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+120, 80, 20, sheet10_A6, "sheet10_A6", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+80, nYCurPos+120, 259, 20, sheet10_B6, "sheet10_B6", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+339, nYCurPos+120, 72, 20, sheet10_E6, "sheet10_E6", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+411, nYCurPos+120, 81, 20, sheet10_G6, "sheet10_G6", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+492, nYCurPos+120, 24, 20, sheet10_H6, "sheet10_H6", "cell_style_12");
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----ResultSet, Statement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, Statement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
	}

	//UDS ResultSet 객체 생성 함수
	//UDS DataSet xml_07 객체 생성 함수
	private void createUDSDataSetxml_07(){
		int xmlSource;
		String xmlUrl;
		String xmlParams;
		String xmlReqMethod;
		String xmlDataSetNode;
		String xmlRecordNode;
		String xmlMetaInfo;
		String xmlEncoding;

		xmlSource = 1;
		xmlUrl = "C:\\07.xml";
		xmlParams = null;
		xmlReqMethod = null;
		xmlDataSetNode = "pensionSavingStatementReport";
		xmlRecordNode = "list";
		xmlMetaInfo = "<!p0304><!p0303><!p0302><!p0301><!p0205><!p0204><!p0203><!p0305><!p0202><!p0201><!t4><!t5><!t6><!t7><!t8><!t9><!t3><!t2><!t1><!p0901><!p0902><!p0905><!p0903><!p0904><!p0804><!p0805><!p0802><!p0803><!p0801><!p0103><!p0401><!p0504><!p0104><!p0503><!p0105><!p0403><!t10><!p0402><!p0505><!p0604><!p0605><!p0101><!p0602><!p0102><!p0603><!p0703><!p0601><!p0704><!p0701><!p0702><!p0405><!p0404><!p0502><!p0705><!p0501><!p1001><!p1002><!p1003><!p1004><!p1005><!p1101><!p1102><!p1103><!p1104><!p1105>";
		xmlEncoding = null;
		xml_07 = new XMLSetHandler(xmlSource, xmlUrl, xmlParams, xmlReqMethod, xmlEncoding);
		xml_07.init(xmlDataSetNode, xmlRecordNode, xmlMetaInfo);
		xml_07.makeDataSet();
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//UDS DataSet xml_07 객체에서 필드 값 설정 함수
	private void setFieldVariableFromxml_07() throws Exception{
		xml_07_p0304=GetB(xml_07.getField(1));
		xml_07_p0303=GetB(xml_07.getField(2));
		xml_07_p0302=GetB(xml_07.getField(3));
		xml_07_p0301=GetB(xml_07.getField(4));
		xml_07_p0205=GetB(xml_07.getField(5));
		xml_07_p0204=GetB(xml_07.getField(6));
		xml_07_p0203=GetB(xml_07.getField(7));
		xml_07_p0305=GetB(xml_07.getField(8));
		xml_07_p0202=GetB(xml_07.getField(9));
		xml_07_p0201=GetB(xml_07.getField(10));
		xml_07_t4=GetB(xml_07.getField(11));
		xml_07_t5=GetB(xml_07.getField(12));
		xml_07_t6=GetB(xml_07.getField(13));
		xml_07_t7=GetB(xml_07.getField(14));
		xml_07_t8=GetB(xml_07.getField(15));
		xml_07_t9=GetB(xml_07.getField(16));
		xml_07_t3=GetB(xml_07.getField(17));
		xml_07_t2=GetB(xml_07.getField(18));
		xml_07_t1=GetB(xml_07.getField(19));
		xml_07_p0901=GetB(xml_07.getField(20));
		xml_07_p0902=GetB(xml_07.getField(21));
		xml_07_p0905=GetB(xml_07.getField(22));
		xml_07_p0903=GetB(xml_07.getField(23));
		xml_07_p0904=GetB(xml_07.getField(24));
		xml_07_p0804=GetB(xml_07.getField(25));
		xml_07_p0805=GetB(xml_07.getField(26));
		xml_07_p0802=GetB(xml_07.getField(27));
		xml_07_p0803=GetB(xml_07.getField(28));
		xml_07_p0801=GetB(xml_07.getField(29));
		xml_07_p0103=GetB(xml_07.getField(30));
		xml_07_p0401=GetB(xml_07.getField(31));
		xml_07_p0504=GetB(xml_07.getField(32));
		xml_07_p0104=GetB(xml_07.getField(33));
		xml_07_p0503=GetB(xml_07.getField(34));
		xml_07_p0105=GetB(xml_07.getField(35));
		xml_07_p0403=GetB(xml_07.getField(36));
		xml_07_t10=GetB(xml_07.getField(37));
		xml_07_p0402=GetB(xml_07.getField(38));
		xml_07_p0505=GetB(xml_07.getField(39));
		xml_07_p0604=GetB(xml_07.getField(40));
		xml_07_p0605=GetB(xml_07.getField(41));
		xml_07_p0101=GetB(xml_07.getField(42));
		xml_07_p0602=GetB(xml_07.getField(43));
		xml_07_p0102=GetB(xml_07.getField(44));
		xml_07_p0603=GetB(xml_07.getField(45));
		xml_07_p0703=GetB(xml_07.getField(46));
		xml_07_p0601=GetB(xml_07.getField(47));
		xml_07_p0704=GetB(xml_07.getField(48));
		xml_07_p0701=GetB(xml_07.getField(49));
		xml_07_p0702=GetB(xml_07.getField(50));
		xml_07_p0405=GetB(xml_07.getField(51));
		xml_07_p0404=GetB(xml_07.getField(52));
		xml_07_p0502=GetB(xml_07.getField(53));
		xml_07_p0705=GetB(xml_07.getField(54));
		xml_07_p0501=GetB(xml_07.getField(55));
		xml_07_p1001=GetB(xml_07.getField(56));
		xml_07_p1002=GetB(xml_07.getField(57));
		xml_07_p1003=GetB(xml_07.getField(58));
		xml_07_p1004=GetB(xml_07.getField(59));
		xml_07_p1005=GetB(xml_07.getField(60));
		xml_07_p1101=GetB(xml_07.getField(61));
		xml_07_p1102=GetB(xml_07.getField(62));
		xml_07_p1103=GetB(xml_07.getField(63));
		xml_07_p1104=GetB(xml_07.getField(64));
		xml_07_p1105=GetB(xml_07.getField(65));
	}

	//UDS DataSet xml_07 객체의 필드 값 초기화 함수
	private void setFieldInitFromxml_07(){
		xml_07_p0304="";
		xml_07_p0303="";
		xml_07_p0302="";
		xml_07_p0301="";
		xml_07_p0205="";
		xml_07_p0204="";
		xml_07_p0203="";
		xml_07_p0305="";
		xml_07_p0202="";
		xml_07_p0201="";
		xml_07_t4="";
		xml_07_t5="";
		xml_07_t6="";
		xml_07_t7="";
		xml_07_t8="";
		xml_07_t9="";
		xml_07_t3="";
		xml_07_t2="";
		xml_07_t1="";
		xml_07_p0901="";
		xml_07_p0902="";
		xml_07_p0905="";
		xml_07_p0903="";
		xml_07_p0904="";
		xml_07_p0804="";
		xml_07_p0805="";
		xml_07_p0802="";
		xml_07_p0803="";
		xml_07_p0801="";
		xml_07_p0103="";
		xml_07_p0401="";
		xml_07_p0504="";
		xml_07_p0104="";
		xml_07_p0503="";
		xml_07_p0105="";
		xml_07_p0403="";
		xml_07_t10="";
		xml_07_p0402="";
		xml_07_p0505="";
		xml_07_p0604="";
		xml_07_p0605="";
		xml_07_p0101="";
		xml_07_p0602="";
		xml_07_p0102="";
		xml_07_p0603="";
		xml_07_p0703="";
		xml_07_p0601="";
		xml_07_p0704="";
		xml_07_p0701="";
		xml_07_p0702="";
		xml_07_p0405="";
		xml_07_p0404="";
		xml_07_p0502="";
		xml_07_p0705="";
		xml_07_p0501="";
		xml_07_p1001="";
		xml_07_p1002="";
		xml_07_p1003="";
		xml_07_p1004="";
		xml_07_p1005="";
		xml_07_p1101="";
		xml_07_p1102="";
		xml_07_p1103="";
		xml_07_p1104="";
		xml_07_p1105="";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=toKor(GetB(request.getParameter("reportMode")));
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + toKor(GetB(request.getParameter("reportParams"))));

		char data[] = {0x14};
		String str = new String(data);
		mapParam = new HashMap<String, String>();

		xmlData_Param=toKor(GetB(request.getParameter("xmlData")));
		xmlData_Param=aiReplace(xmlData_Param, str, "\n");
		mapParam.put("xmlData", xmlData_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화

	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시

			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight){
		//GetPrintHeight_AutoCode
		int ch;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		printWidth = printWidth*100;

		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
				}
			} else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;

				if (ch==13) {
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}
			} else {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}
			}
		}

		if (height>printHeight) {
			height=height-printHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight){
		//GetPrintHeightEx_AutoCode
		int ch;
		int i;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		boolean bSplit=false;
		strSplitData[0]="";
		strSplitData[1]="";
		printWidth = printWidth*100;

		for (i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
				}
			}else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;
				if (ch==13){
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					if(i!=size-1){
						bSplit=true;
						i++;
					}
					break;
				}
			}else{
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					bSplit=true;
					break;
				}
			}
		}

		if(bSplit){
			strSplitData[0]=data.substring(0, i);
			strSplitData[1]=data.substring(i);
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|4|07.style|보고서 (2014/7/2 15:58:24)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스

	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}
}
%>
