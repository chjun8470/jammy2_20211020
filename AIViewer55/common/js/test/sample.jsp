<%
/************************************************************************************
Generated by AIDesigner 5.5.0.6
************************************************************************************
보고서 제목 : 보고서 (2013/2/6 11:6:25)
작성일 : 2013년2월6일 11시6분25초
작성자 :
************************************************************************************/
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page contentType="text/html; charset=utf-8" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>
<%@ page import="com.activeintra.util.uds.*" %>


<%
Object[] userObj = null;

String reportMode=request.getParameter("reportMode");
String reportParams=request.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfmode:print") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL") || reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext,request,response,userObj);
handler.service(out);
handler = null;
%>

<%!
private Logger logger = Logger.getLogger("sample.jsp");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";

	//-----데이터 변수 선언-----
	String sheet10_A1;
	String sheet10_A2;
	String sheet10_B2;
	String sheet10_C2;
	String sheet10_D2;
	String sheet10_E2;
	String sheet10_F2;
	String sheet10_G2;
	String sheet10_A3;
	String sheet10_B3;
	String sheet10_C3;
	String sheet10_D3;
	String sheet10_E3;
	String sheet10_G3;
	String sheet20_A1;
	String sheet20_A2;
	String sheet20_B2;
	String sheet20_C2;
	String sheet20_D2;
	String sheet20_E2;
	String sheet20_F2;
	String sheet20_G2;
	String sheet20_H2;
	String sheet20_I2;
	String sheet20_J2;
	String sheet20_A3;
	String sheet20_B3;
	String sheet20_C3;
	String sheet20_D3;
	String sheet20_E3;
	String sheet20_F3;
	String sheet20_G3;
	String sheet20_H3;
	String sheet20_I3;
	String sheet20_J3;
	String sheet30_A1;
	String sheet30_A2;
	String sheet30_B2;
	String sheet30_A3;
	String sheet30_B3;
	String sheet40_A1;
	String sheet40_A2;
	String sheet40_C2;
	String sheet40_A3;
	String sheet40_B3;
	String sheet50_A1;
	String sheet50_A2;
	String sheet50_C2;
	String sheet50_A3;
	String sheet50_B3;
	String sheet50_C3;
	String sheet50_D3;
	String sheet50_A4;
	String sheet50_B4;
	long sheet50_C4;
	long sheet50_D4;
	String sheet50_A5;
	String sheet50_B5;
	long sheet50_C5;
	long sheet50_D5;
	String sheet60_A1;
	String sheet60_A2;
	String sheet60_B2;
	String sheet60_C2;
	String sheet60_D2;
	String sheet60_E2;
	String sheet60_A3;
	String sheet60_B3;
	String sheet60_C3;
	String sheet60_D3;
	String sheet60_E3;
	String sheet60_A4;
	String sheet70_A1;
	String sheet70_A2;
	String sheet70_B2;
	String sheet70_C2;
	String sheet70_A4;
	String sheet80_A1;
	String sheet80_A2;
	String sheet80_B2;
	String sheet80_C2;
	String sheet80_D2;
	String sheet80_E2;
	String sheet80_F2;
	String sheet80_A4;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext,HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.pageContext=pageContext;
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = request.getRequestURI().replace(context.getContextPath(), "");

			String path = temp.replace(".jsp", ".style");

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "HORIZONTAL", "14 14 14 14");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("\r");
			StackTraceElement[] trace = e.getStackTrace();
			for(int i = 0; i < trace.length; i++) {
				out.println(trace[i]);
			}
			out.print("\r");
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "14 14 14 14");
		initSheetVariant(29, 27, 814, 571, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsavoid1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
		//SHEET=Sheet4   FRAME=0 함수 호출
		executeSheet40();
		//SHEET=Sheet5   FRAME=0 함수 호출
		executeSheet50();
		//SHEET=Sheet6   FRAME=0 함수 호출
		executeSheet60();
		//SHEET=Sheet7   FRAME=0 함수 호출
		executeSheet70();
		//SHEET=Sheet8   FRAME=0 함수 호출
		executeSheet80();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(29, 27, 814, 571, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsavoid2(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(29, 27, 814, 571, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsavoid3(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet4   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet40( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(29, 27, 814, 571, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromvoid4(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet5   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet50( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(29, 27, 814, 571, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsavoid4(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet6   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet60( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(29, 27, 814, 571, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsavoid5(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet7   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet70( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(29, 27, 814, 571, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromvoid7(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet8   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet80( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(29, 27, 814, 571, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromvoid8(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----savoid1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : savoid1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsavoid1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=56;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsavoid1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----savoid2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : savoid2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsavoid2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=56;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsavoid2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----savoid3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : savoid3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsavoid3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=56;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsavoid3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----void4 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : void4
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvoid4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=74;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvoid4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----savoid4 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet5    FRAME=Frame0
	//----밴드 이름 : savoid4
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsavoid4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=92;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsavoid4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----savoid5 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet6    FRAME=Frame0
	//----밴드 이름 : savoid5
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsavoid5(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=74;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsavoid5();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----void7 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet7    FRAME=Frame0
	//----밴드 이름 : void7
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvoid7(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=92;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvoid7();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----void8 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet8    FRAME=Frame0
	//----밴드 이름 : void8
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvoid8(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=92;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvoid8();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----savoid1 스크립트 문 출력 함수----
	private void writeScriptsavoid1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 785, 20, sheet10_A1, "sheet10_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+20, 80, 18, sheet10_A2, "sheet10_A2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+80, nYCurPos+20, 200, 18, sheet10_B2, "sheet10_B2", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+280, nYCurPos+20, 80, 18, sheet10_C2, "sheet10_C2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+360, nYCurPos+20, 80, 18, sheet10_D2, "sheet10_D2", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+20, 145, 18, sheet10_E2, "sheet10_E2", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos+585, nYCurPos+20, 80, 18, sheet10_F2, "sheet10_F2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+665, nYCurPos+20, 120, 18, sheet10_G2, "sheet10_G2", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+38, 80, 18, sheet10_A3, "sheet10_A3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+80, nYCurPos+38, 200, 18, sheet10_B3, "sheet10_B3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+280, nYCurPos+38, 80, 18, sheet10_C3, "sheet10_C3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+360, nYCurPos+38, 80, 18, sheet10_D3, "sheet10_D3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+440, nYCurPos+38, 225, 18, sheet10_E3, "sheet10_E3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+665, nYCurPos+38, 120, 18, sheet10_G3, "sheet10_G3", "cell_style_2");
	}

	//----savoid2 스크립트 문 출력 함수----
	private void writeScriptsavoid2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 785, 20, sheet20_A1, "sheet20_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+20, 52, 18, sheet20_A2, "sheet20_A2", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+52, nYCurPos+20, 53, 18, sheet20_B2, "sheet20_B2", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+105, nYCurPos+20, 80, 18, sheet20_C2, "sheet20_C2", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+20, 90, 18, sheet20_D2, "sheet20_D2", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos+20, 80, 18, sheet20_E2, "sheet20_E2", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+355, nYCurPos+20, 90, 18, sheet20_F2, "sheet20_F2", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+445, nYCurPos+20, 80, 18, sheet20_G2, "sheet20_G2", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+525, nYCurPos+20, 90, 18, sheet20_H2, "sheet20_H2", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+615, nYCurPos+20, 80, 18, sheet20_I2, "sheet20_I2", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+695, nYCurPos+20, 90, 18, sheet20_J2, "sheet20_J2", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+38, 52, 18, sheet20_A3, "sheet20_A3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+52, nYCurPos+38, 53, 18, sheet20_B3, "sheet20_B3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+105, nYCurPos+38, 80, 18, sheet20_C3, "sheet20_C3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+185, nYCurPos+38, 90, 18, sheet20_D3, "sheet20_D3", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+275, nYCurPos+38, 80, 18, sheet20_E3, "sheet20_E3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+355, nYCurPos+38, 90, 18, sheet20_F3, "sheet20_F3", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+445, nYCurPos+38, 80, 18, sheet20_G3, "sheet20_G3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+525, nYCurPos+38, 90, 18, sheet20_H3, "sheet20_H3", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+615, nYCurPos+38, 80, 18, sheet20_I3, "sheet20_I3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+695, nYCurPos+38, 90, 18, sheet20_J3, "sheet20_J3", "cell_style_6");
	}

	//----savoid3 스크립트 문 출력 함수----
	private void writeScriptsavoid3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 785, 20, sheet30_A1, "sheet30_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+20, 160, 18, sheet30_A2, "sheet30_A2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+160, nYCurPos+20, 625, 18, sheet30_B2, "sheet30_B2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+38, 160, 18, sheet30_A3, "sheet30_A3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+160, nYCurPos+38, 625, 18, sheet30_B3, "sheet30_B3", "cell_style_2");
	}

	//----void4 스크립트 문 출력 함수----
	private void writeScriptvoid4( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 370, 20, sheet40_A1, "sheet40_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+20, 220, 18, sheet40_A2, "sheet40_A2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+220, nYCurPos+20, 565, 36, sheet40_C2, "sheet40_C2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+38, 110, 18, sheet40_A3, "sheet40_A3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+110, nYCurPos+38, 110, 18, sheet40_B3, "sheet40_B3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+56, 110, 18, "", "sheet40_A4", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+110, nYCurPos+56, 110, 18, "", "sheet40_B4", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+220, nYCurPos+56, 565, 18, "", "sheet40_C4", "cell_style_8");
	}

	//----savoid4 스크립트 문 출력 함수----
	private void writeScriptsavoid4( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 510, 20, sheet50_A1, "sheet50_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+20, 270, 18, sheet50_A2, "sheet50_A2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+270, nYCurPos+20, 240, 18, sheet50_C2, "sheet50_C2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+38, 90, 18, sheet50_A3, "sheet50_A3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+90, nYCurPos+38, 180, 18, sheet50_B3, "sheet50_B3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+270, nYCurPos+38, 120, 18, sheet50_C3, "sheet50_C3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+390, nYCurPos+38, 120, 18, sheet50_D3, "sheet50_D3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+56, 90, 18, sheet50_A4, "sheet50_A4", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+90, nYCurPos+56, 180, 18, sheet50_B4, "sheet50_B4", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+270, nYCurPos+56, 120, 18, String.valueOf(sheet50_C4), "sheet50_C4", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+390, nYCurPos+56, 120, 18, String.valueOf(sheet50_D4), "sheet50_D4", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+74, 90, 18, sheet50_A5, "sheet50_A5", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+90, nYCurPos+74, 180, 18, sheet50_B5, "sheet50_B5", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+270, nYCurPos+74, 120, 18, String.valueOf(sheet50_C5), "sheet50_C5", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+390, nYCurPos+74, 120, 18, String.valueOf(sheet50_D5), "sheet50_D5", "cell_style_10");
	}

	//----savoid5 스크립트 문 출력 함수----
	private void writeScriptsavoid5( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 510, 20, sheet60_A1, "sheet60_A1", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+20, 100, 18, sheet60_A2, "sheet60_A2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+20, 100, 18, sheet60_B2, "sheet60_B2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+200, nYCurPos+20, 100, 18, sheet60_C2, "sheet60_C2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+20, 130, 18, sheet60_D2, "sheet60_D2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+20, 80, 18, sheet60_E2, "sheet60_E2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+38, 100, 18, sheet60_A3, "sheet60_A3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+100, nYCurPos+38, 100, 18, sheet60_B3, "sheet60_B3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+200, nYCurPos+38, 100, 18, sheet60_C3, "sheet60_C3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+38, 130, 18, sheet60_D3, "sheet60_D3", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+38, 80, 18, sheet60_E3, "sheet60_E3", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+56, 300, 18, sheet60_A4, "sheet60_A4", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+300, nYCurPos+56, 130, 18, "", "sheet60_D4", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+56, 80, 18, "", "sheet60_E4", "cell_style_5");
	}

	//----void7 스크립트 문 출력 함수----
	private void writeScriptvoid7( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 785, 20, sheet70_A1, "sheet70_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+20, 394, 18, sheet70_A2, "sheet70_A2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+394, nYCurPos+20, 131, 18, sheet70_B2, "sheet70_B2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+525, nYCurPos+20, 260, 18, sheet70_C2, "sheet70_C2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+38, 394, 18, "", "sheet70_A3", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+394, nYCurPos+38, 131, 18, "", "sheet70_B3", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+525, nYCurPos+38, 260, 18, "", "sheet70_C3", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+56, 394, 36, sheet70_A4, "sheet70_A4", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+394, nYCurPos+56, 131, 18, "", "sheet70_B4", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+525, nYCurPos+56, 260, 18, "", "sheet70_C4", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+394, nYCurPos+74, 131, 18, "", "sheet70_B5", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+525, nYCurPos+74, 260, 18, "", "sheet70_C5", "cell_style_13");
	}

	//----void8 스크립트 문 출력 함수----
	private void writeScriptvoid8( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 785, 20, sheet80_A1, "sheet80_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+20, 149, 18, sheet80_A2, "sheet80_A2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+149, nYCurPos+20, 206, 18, sheet80_B2, "sheet80_B2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+355, nYCurPos+20, 100, 18, sheet80_C2, "sheet80_C2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+20, 71, 18, sheet80_D2, "sheet80_D2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+526, nYCurPos+20, 150, 18, sheet80_E2, "sheet80_E2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+676, nYCurPos+20, 109, 18, sheet80_F2, "sheet80_F2", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+38, 149, 18, "", "sheet80_A3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+149, nYCurPos+38, 206, 18, "", "sheet80_B3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+355, nYCurPos+38, 100, 18, "", "sheet80_C3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+38, 71, 18, "", "sheet80_D3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+526, nYCurPos+38, 150, 18, "", "sheet80_E3", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+676, nYCurPos+38, 109, 18, "", "sheet80_F3", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+56, 455, 36, sheet80_A4, "sheet80_A4", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+56, 71, 18, "", "sheet80_D4", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+526, nYCurPos+56, 150, 18, "", "sheet80_E4", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+676, nYCurPos+56, 109, 36, "", "sheet80_F4", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+455, nYCurPos+74, 71, 18, "", "sheet80_D5", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+526, nYCurPos+74, 150, 18, "", "sheet80_E5", "cell_style_14");
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----ResultSet, Statement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, Statement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		sheet10_A1="▶ 프로젝트 정보";
		sheet10_A2="Business Area";
		sheet10_B2="KR01 Cheil Worldwide";
		sheet10_C2="프로젝트";
		sheet10_D2="KRP00001001";
		sheet10_E2="1001삼성석유화학뉴스";
		sheet10_F2="광고주";
		sheet10_G2="삼성석유화학";
		sheet10_A3="광고팀/담당자";
		sheet10_B3="캠패인1팀";
		sheet10_C3="배현철";
		sheet10_D3="제작팀/담당자";
		sheet10_E3="캠패인1팀";
		sheet10_G3="김순희";
		sheet20_A1="▶ 계획서내역";
		sheet20_A2="통화1";
		sheet20_B2="KRW";
		sheet20_C2="청구예상액1";
		sheet20_D2="11660.00";
		sheet20_E2="지급계획금액1";
		sheet20_F2="11660.00";
		sheet20_G2="예상내수액1";
		sheet20_H2="0.00";
		sheet20_I2="예상내수율1()";
		sheet20_J2="0.00";
		sheet20_A3="통화2";
		sheet20_B3="USD";
		sheet20_C3="청구예상액2";
		sheet20_D3="11660.00";
		sheet20_E3="지급계힉금액2";
		sheet20_F3="11660.00";
		sheet20_G3="예상내수액2";
		sheet20_H3="0.00";
		sheet20_I3="예상내수율2()";
		sheet20_J3="0.00";
		sheet30_A1="▶ 프로젝트 개요 정보";
		sheet30_A2="제목";
		sheet30_B2="상신내용";
		sheet30_A3="제작목적";
		sheet30_B3="미국 3대 통신사 Sprint사의 Retail 시자 공략을 위한 PT출장";
		sheet40_A1="▶ 프로젝트 일정계획 정보";
		sheet40_A2="기간";
		sheet40_C2="내용";
		sheet40_A3="시작일자";
		sheet40_B3="종료일자";
		sheet50_A1="▶ 광고주 계약내역";
		sheet50_A2="계약금액";
		sheet50_C2="계약체결";
		sheet50_A3="통화";
		sheet50_B3="사용금액";
		sheet50_C3="체결일";
		sheet50_D3="완료일";
		sheet50_A4="KRW";
		sheet50_B4="999999999999.99";
		sheet50_C4=2012-06-11;
		sheet50_D4=2012-06-29;
		sheet50_A5="USD";
		sheet50_B5="999999999999.99";
		sheet50_C5=2012-06-11;
		sheet50_D5=2012-06-29;
		sheet60_A1="▶ 청구계획";
		sheet60_A2="지급구분";
		sheet60_B2="청구예정일";
		sheet60_C2="통화";
		sheet60_D2="사용금액";
		sheet60_E2="청구비율";
		sheet60_A3="잔금";
		sheet60_B3="2012-09-10";
		sheet60_C3="KRW";
		sheet60_D3="999999999.99";
		sheet60_E3="100.0";
		sheet60_A4="합계";
		sheet70_A1="▶ 지급계획";
		sheet70_A2="협력업체";
		sheet70_B2="통화";
		sheet70_C2="예산(Doc.Amt)";
		sheet70_A4="예산합계";
		sheet80_A1="▶ 실집행 내역";
		sheet80_A2="협력업체";
		sheet80_B2="적요";
		sheet80_C2="지급요청일자";
		sheet80_D2="통화";
		sheet80_E2="사용금액";
		sheet80_F2="기표일자";
		sheet80_A4="실집행내역 합계";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=toKor(GetB(request.getParameter("reportMode")));
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + toKor(GetB(request.getParameter("reportParams"))));
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight){
		//GetPrintHeight_AutoCode
		int ch;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		printWidth = (printWidth-4)*100;

		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
				}
			} else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;

				if (ch==13) {
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}
			} else {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}
			}
		}

		if (height>printHeight) {
			height=height-printHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight){
		//GetPrintHeightEx_AutoCode
		int ch;
		int i;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		boolean bSplit=false;
		strSplitData[0]="";
		strSplitData[1]="";
		printWidth = (printWidth-4)*100;

		for (i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
				}
			}else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;
				if (ch==13){
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					if(i!=size-1){
						bSplit=true;
						i++;
					}
					break;
				}
			}else{
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					bSplit=true;
					break;
				}
			}
		}

		if(bSplit){
			strSplitData[0]=data.substring(0, i);
			strSplitData[1]=data.substring(i);
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|1|sample.style|보고서 (2013/2/6 11:6:25)", false);
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}
}
%>
