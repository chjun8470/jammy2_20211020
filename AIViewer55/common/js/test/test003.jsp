<%
/************************************************************************************
Generated by AIDesigner 5.1.0.2
************************************************************************************
보고서 제목 : 보고서 (2012/11/8 11:6:13)
작성일 : 2012년11월8일 11시6분13초
작성자 :
************************************************************************************/
%>

<%@ page language="java" import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.net.URL" %>
<%@ page contentType="text/html; charset=utf-8" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>
<%@ page import="com.activeintra.util.uds.*" %>


<%
Object[] userObj = null;

ReportHandler handler = new ReportHandler(pageContext,request,response,userObj);
handler.service(out);
%>

<%!
private Logger logger = Logger.getLogger("test002.jsp");       //추가

class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용

	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;

	private AIScriptManager manager;
	private String reportMode="AIScript";

	//-----데이터 변수 선언-----
	String sheet10_A2;
	String sheet10_H3;
	String sheet10_P3;
	String sheet10_T3;
	String sheet10_AF3;
	String sheet10_AL3;
	String sheet10_AT3;
	String sheet10_AZ3;
	String sheet10_H4;
	String sheet10_L4;
	String sheet10_P4;
	String sheet10_T4;
	String sheet10_X4;
	String sheet10_AB4;
	String sheet10_AD4;
	String sheet10_AF4;
	String sheet10_AL4;
	String sheet10_AT4;
	String sheet10_AZ4;
	String sheet10_B5;
	String sheet10_D5;
	String sheet10_F5;
	String sheet10_H5;
	String sheet10_J5;
	String sheet10_L5;
	String sheet10_N5;
	String sheet10_P5;
	String sheet10_R5;
	String sheet10_T5;
	String sheet10_V5;
	String sheet10_X5;
	String sheet10_Z5;
	String sheet10_AB5;
	String sheet10_AD5;
	String sheet10_AF5;
	String sheet10_AH5;
	String sheet10_AJ5;
	String sheet10_AL5;
	String sheet10_AN5;
	String sheet10_AP5;
	String sheet10_AR5;
	String sheet10_AT5;
	String sheet10_AV5;
	String sheet10_AX5;
	String sheet10_AZ5;
	String sheet10_BB5;
	String sheet10_BD5;
	String sheet10_BF5;
	String sheet10_A6;
	String sheet10_B6;
	String sheet10_C6;
	String sheet10_D6;
	String sheet10_E6;
	String sheet10_F6;
	String sheet10_G6;
	String sheet10_H6;
	String sheet10_I6;
	String sheet10_J6;
	String sheet10_K6;
	String sheet10_L6;
	String sheet10_M6;
	String sheet10_N6;
	String sheet10_O6;
	String sheet10_P6;
	String sheet10_Q6;
	String sheet10_R6;
	String sheet10_S6;
	String sheet10_T6;
	String sheet10_U6;
	String sheet10_V6;
	String sheet10_W6;
	String sheet10_X6;
	String sheet10_Y6;
	String sheet10_Z6;
	String sheet10_AA6;
	String sheet10_AB6;
	String sheet10_AC6;
	String sheet10_AD6;
	String sheet10_AE6;
	String sheet10_AF6;
	String sheet10_AG6;
	String sheet10_AH6;
	String sheet10_AI6;
	String sheet10_AJ6;
	String sheet10_AK6;
	String sheet10_AL6;
	String sheet10_AM6;
	String sheet10_AN6;
	String sheet10_AO6;
	String sheet10_AP6;
	String sheet10_AQ6;
	String sheet10_AR6;
	String sheet10_AS6;
	String sheet10_AT6;
	String sheet10_AU6;
	String sheet10_AV6;
	String sheet10_AW6;
	String sheet10_AX6;
	String sheet10_AY6;
	String sheet10_AZ6;
	String sheet10_BA6;
	String sheet10_BB6;
	String sheet10_BC6;
	String sheet10_BD6;
	String sheet10_BE6;
	String sheet10_BF6;
	String sheet10_BG6;

	//ReportHandler 생성자 함수
	//ReportHandler(HttpServletRequest request,HttpServletResponse response,Object[] userObj){
	ReportHandler(PageContext pageContext,HttpServletRequest request,HttpServletResponse response,Object[] userObj){
		this.pageContext=pageContext;
		this.request=request;
		this.response=response;
		this.userObj=userObj;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화


            System.out.println(request.getParameter("aaa"));
            System.out.println(request.getParameter("filename"));

			//logger = Logger.getLogger("test003.jsp");
			//System.out.println("aaaaaaaaaaaaaaaaa1");

            manager = new AIScriptManager(request, response, pageContext, out, logger, null);

            ServletContext context = pageContext.getServletContext();
            String temp = null;
            if(!context.getContextPath().equals("/"))
                temp = request.getRequestURI().replace(context.getContextPath(), "");
            else
                temp = request.getRequestURI();

            String path = temp.replace(".jsp", ".style");

            //파라미터 설정 함수 호출
            setParam();
            if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "HORIZONTAL", "14 0 14 0");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			out.print(e);
			out.print("\r");
			out.print("AI!REPORT JSP ERROR!!!!\r");
		}finally{    //finally 구문
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "14 0 14 0");
		initSheetVariant(27, 109, 815, 585, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromb(true, true);    //머리글 밴드 호출
		getScriptFroma(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----b HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : b
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromb(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptb();
		}   //end if(bIsPrint)
	}

	//----a VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : a
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFroma(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=15;    //밴드 출력 높이
		int nRepeatNum=100;    //수행 횟수 지정
		int i;    //for문 카운트 변수

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//반복 횟수 루프문 시작
			for(i=0; i<nRepeatNum; i++){
				//스크립트 출력 영역 검사
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}

				//스크립트 출력 함수 호출
				writeScripta();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}    //반복 횟수 루프문 종료
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----b 스크립트 문 출력 함수----
	private void writeScriptb( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 27, 25, 788, 20, sheet10_A2, "sheet10_A2", "cell_style_0");
		objectWrite(CELL_OBJECT, 27, 45, 112, 24, "", "sheet10_A3", "cell_style_1");
		objectWrite(CELL_OBJECT, 139, 45, 104, 12, sheet10_H3, "sheet10_H3", "cell_style_2");
		objectWrite(CELL_OBJECT, 243, 45, 52, 12, sheet10_P3, "sheet10_P3", "cell_style_2");
		objectWrite(CELL_OBJECT, 295, 45, 156, 12, sheet10_T3, "sheet10_T3", "cell_style_2");
		objectWrite(CELL_OBJECT, 451, 45, 78, 12, sheet10_AF3, "sheet10_AF3", "cell_style_2");
		objectWrite(CELL_OBJECT, 529, 45, 104, 12, sheet10_AL3, "sheet10_AL3", "cell_style_2");
		objectWrite(CELL_OBJECT, 633, 45, 78, 12, sheet10_AT3, "sheet10_AT3", "cell_style_2");
		objectWrite(CELL_OBJECT, 711, 45, 104, 12, sheet10_AZ3, "sheet10_AZ3", "cell_style_2");
		objectWrite(CELL_OBJECT, 139, 57, 52, 12, sheet10_H4, "sheet10_H4", "cell_style_2");
		objectWrite(CELL_OBJECT, 191, 57, 52, 12, sheet10_L4, "sheet10_L4", "cell_style_2");
		objectWrite(CELL_OBJECT, 243, 57, 52, 12, sheet10_P4, "sheet10_P4", "cell_style_2");
		objectWrite(CELL_OBJECT, 295, 57, 52, 12, sheet10_T4, "sheet10_T4", "cell_style_2");
		objectWrite(CELL_OBJECT, 347, 57, 52, 12, sheet10_X4, "sheet10_X4", "cell_style_2");
		objectWrite(CELL_OBJECT, 399, 57, 26, 12, sheet10_AB4, "sheet10_AB4", "cell_style_2");
		objectWrite(CELL_OBJECT, 425, 57, 26, 12, sheet10_AD4, "sheet10_AD4", "cell_style_2");
		objectWrite(CELL_OBJECT, 451, 57, 78, 12, sheet10_AF4, "sheet10_AF4", "cell_style_2");
		objectWrite(CELL_OBJECT, 529, 57, 104, 12, sheet10_AL4, "sheet10_AL4", "cell_style_2");
		objectWrite(CELL_OBJECT, 633, 57, 78, 12, sheet10_AT4, "sheet10_AT4", "cell_style_2");
		objectWrite(CELL_OBJECT, 711, 57, 104, 12, sheet10_AZ4, "sheet10_AZ4", "cell_style_2");
		objectWrite(CELL_OBJECT, 27, 69, 30, 25, "", "sheet10_A5", "cell_style_3");
		objectWrite(CELL_OBJECT, 57, 69, 30, 25, sheet10_B5, "sheet10_B5", "cell_style_4");
		objectWrite(CELL_OBJECT, 87, 69, 26, 25, sheet10_D5, "sheet10_D5", "cell_style_5");
		objectWrite(CELL_OBJECT, 113, 69, 26, 25, sheet10_F5, "sheet10_F5", "cell_style_5");
		objectWrite(CELL_OBJECT, 139, 69, 26, 25, sheet10_H5, "sheet10_H5", "cell_style_5");
		objectWrite(CELL_OBJECT, 165, 69, 26, 25, sheet10_J5, "sheet10_J5", "cell_style_5");
		objectWrite(CELL_OBJECT, 191, 69, 26, 25, sheet10_L5, "sheet10_L5", "cell_style_5");
		objectWrite(CELL_OBJECT, 217, 69, 26, 25, sheet10_N5, "sheet10_N5", "cell_style_5");
		objectWrite(CELL_OBJECT, 243, 69, 26, 25, sheet10_P5, "sheet10_P5", "cell_style_5");
		objectWrite(CELL_OBJECT, 269, 69, 26, 25, sheet10_R5, "sheet10_R5", "cell_style_5");
		objectWrite(CELL_OBJECT, 295, 69, 26, 25, sheet10_T5, "sheet10_T5", "cell_style_5");
		objectWrite(CELL_OBJECT, 321, 69, 26, 25, sheet10_V5, "sheet10_V5", "cell_style_5");
		objectWrite(CELL_OBJECT, 347, 69, 26, 25, sheet10_X5, "sheet10_X5", "cell_style_5");
		objectWrite(CELL_OBJECT, 373, 69, 26, 25, sheet10_Z5, "sheet10_Z5", "cell_style_5");
		objectWrite(CELL_OBJECT, 399, 69, 26, 25, sheet10_AB5, "sheet10_AB5", "cell_style_5");
		objectWrite(CELL_OBJECT, 425, 69, 26, 25, sheet10_AD5, "sheet10_AD5", "cell_style_5");
		objectWrite(CELL_OBJECT, 451, 69, 26, 25, sheet10_AF5, "sheet10_AF5", "cell_style_5");
		objectWrite(CELL_OBJECT, 477, 69, 26, 25, sheet10_AH5, "sheet10_AH5", "cell_style_5");
		objectWrite(CELL_OBJECT, 503, 69, 26, 25, sheet10_AJ5, "sheet10_AJ5", "cell_style_5");
		objectWrite(CELL_OBJECT, 529, 69, 26, 25, sheet10_AL5, "sheet10_AL5", "cell_style_5");
		objectWrite(CELL_OBJECT, 555, 69, 26, 25, sheet10_AN5, "sheet10_AN5", "cell_style_5");
		objectWrite(CELL_OBJECT, 581, 69, 26, 25, sheet10_AP5, "sheet10_AP5", "cell_style_5");
		objectWrite(CELL_OBJECT, 607, 69, 26, 25, sheet10_AR5, "sheet10_AR5", "cell_style_5");
		objectWrite(CELL_OBJECT, 633, 69, 26, 25, sheet10_AT5, "sheet10_AT5", "cell_style_5");
		objectWrite(CELL_OBJECT, 659, 69, 26, 25, sheet10_AV5, "sheet10_AV5", "cell_style_5");
		objectWrite(CELL_OBJECT, 685, 69, 26, 25, sheet10_AX5, "sheet10_AX5", "cell_style_5");
		objectWrite(CELL_OBJECT, 711, 69, 26, 25, sheet10_AZ5, "sheet10_AZ5", "cell_style_5");
		objectWrite(CELL_OBJECT, 737, 69, 26, 25, sheet10_BB5, "sheet10_BB5", "cell_style_5");
		objectWrite(CELL_OBJECT, 763, 69, 26, 25, sheet10_BD5, "sheet10_BD5", "cell_style_5");
		objectWrite(CELL_OBJECT, 789, 69, 26, 25, sheet10_BF5, "sheet10_BF5", "cell_style_5");
		objectWrite(CELL_OBJECT, 27, 94, 30, 15, sheet10_A6, "sheet10_A6", "cell_style_6");
		objectWrite(CELL_OBJECT, 57, 94, 15, 15, sheet10_B6, "sheet10_B6", "cell_style_6");
		objectWrite(CELL_OBJECT, 72, 94, 15, 15, sheet10_C6, "sheet10_C6", "cell_style_6");
		objectWrite(CELL_OBJECT, 87, 94, 13, 15, sheet10_D6, "sheet10_D6", "cell_style_6");
		objectWrite(CELL_OBJECT, 100, 94, 13, 15, sheet10_E6, "sheet10_E6", "cell_style_6");
		objectWrite(CELL_OBJECT, 113, 94, 13, 15, sheet10_F6, "sheet10_F6", "cell_style_6");
		objectWrite(CELL_OBJECT, 126, 94, 13, 15, sheet10_G6, "sheet10_G6", "cell_style_6");
		objectWrite(CELL_OBJECT, 139, 94, 13, 15, sheet10_H6, "sheet10_H6", "cell_style_6");
		objectWrite(CELL_OBJECT, 152, 94, 13, 15, sheet10_I6, "sheet10_I6", "cell_style_6");
		objectWrite(CELL_OBJECT, 165, 94, 13, 15, sheet10_J6, "sheet10_J6", "cell_style_6");
		objectWrite(CELL_OBJECT, 178, 94, 13, 15, sheet10_K6, "sheet10_K6", "cell_style_6");
		objectWrite(CELL_OBJECT, 191, 94, 13, 15, sheet10_L6, "sheet10_L6", "cell_style_6");
		objectWrite(CELL_OBJECT, 204, 94, 13, 15, sheet10_M6, "sheet10_M6", "cell_style_6");
		objectWrite(CELL_OBJECT, 217, 94, 13, 15, sheet10_N6, "sheet10_N6", "cell_style_6");
		objectWrite(CELL_OBJECT, 230, 94, 13, 15, sheet10_O6, "sheet10_O6", "cell_style_6");
		objectWrite(CELL_OBJECT, 243, 94, 13, 15, sheet10_P6, "sheet10_P6", "cell_style_6");
		objectWrite(CELL_OBJECT, 256, 94, 13, 15, sheet10_Q6, "sheet10_Q6", "cell_style_6");
		objectWrite(CELL_OBJECT, 269, 94, 13, 15, sheet10_R6, "sheet10_R6", "cell_style_6");
		objectWrite(CELL_OBJECT, 282, 94, 13, 15, sheet10_S6, "sheet10_S6", "cell_style_6");
		objectWrite(CELL_OBJECT, 295, 94, 13, 15, sheet10_T6, "sheet10_T6", "cell_style_6");
		objectWrite(CELL_OBJECT, 308, 94, 13, 15, sheet10_U6, "sheet10_U6", "cell_style_6");
		objectWrite(CELL_OBJECT, 321, 94, 13, 15, sheet10_V6, "sheet10_V6", "cell_style_6");
		objectWrite(CELL_OBJECT, 334, 94, 13, 15, sheet10_W6, "sheet10_W6", "cell_style_6");
		objectWrite(CELL_OBJECT, 347, 94, 13, 15, sheet10_X6, "sheet10_X6", "cell_style_6");
		objectWrite(CELL_OBJECT, 360, 94, 13, 15, sheet10_Y6, "sheet10_Y6", "cell_style_6");
		objectWrite(CELL_OBJECT, 373, 94, 13, 15, sheet10_Z6, "sheet10_Z6", "cell_style_6");
		objectWrite(CELL_OBJECT, 386, 94, 13, 15, sheet10_AA6, "sheet10_AA6", "cell_style_6");
		objectWrite(CELL_OBJECT, 399, 94, 13, 15, sheet10_AB6, "sheet10_AB6", "cell_style_6");
		objectWrite(CELL_OBJECT, 412, 94, 13, 15, sheet10_AC6, "sheet10_AC6", "cell_style_6");
		objectWrite(CELL_OBJECT, 425, 94, 13, 15, sheet10_AD6, "sheet10_AD6", "cell_style_6");
		objectWrite(CELL_OBJECT, 438, 94, 13, 15, sheet10_AE6, "sheet10_AE6", "cell_style_6");
		objectWrite(CELL_OBJECT, 451, 94, 13, 15, sheet10_AF6, "sheet10_AF6", "cell_style_6");
		objectWrite(CELL_OBJECT, 464, 94, 13, 15, sheet10_AG6, "sheet10_AG6", "cell_style_6");
		objectWrite(CELL_OBJECT, 477, 94, 13, 15, sheet10_AH6, "sheet10_AH6", "cell_style_6");
		objectWrite(CELL_OBJECT, 490, 94, 13, 15, sheet10_AI6, "sheet10_AI6", "cell_style_6");
		objectWrite(CELL_OBJECT, 503, 94, 13, 15, sheet10_AJ6, "sheet10_AJ6", "cell_style_6");
		objectWrite(CELL_OBJECT, 516, 94, 13, 15, sheet10_AK6, "sheet10_AK6", "cell_style_6");
		objectWrite(CELL_OBJECT, 529, 94, 13, 15, sheet10_AL6, "sheet10_AL6", "cell_style_6");
		objectWrite(CELL_OBJECT, 542, 94, 13, 15, sheet10_AM6, "sheet10_AM6", "cell_style_6");
		objectWrite(CELL_OBJECT, 555, 94, 13, 15, sheet10_AN6, "sheet10_AN6", "cell_style_6");
		objectWrite(CELL_OBJECT, 568, 94, 13, 15, sheet10_AO6, "sheet10_AO6", "cell_style_6");
		objectWrite(CELL_OBJECT, 581, 94, 13, 15, sheet10_AP6, "sheet10_AP6", "cell_style_6");
		objectWrite(CELL_OBJECT, 594, 94, 13, 15, sheet10_AQ6, "sheet10_AQ6", "cell_style_6");
		objectWrite(CELL_OBJECT, 607, 94, 13, 15, sheet10_AR6, "sheet10_AR6", "cell_style_6");
		objectWrite(CELL_OBJECT, 620, 94, 13, 15, sheet10_AS6, "sheet10_AS6", "cell_style_6");
		objectWrite(CELL_OBJECT, 633, 94, 13, 15, sheet10_AT6, "sheet10_AT6", "cell_style_6");
		objectWrite(CELL_OBJECT, 646, 94, 13, 15, sheet10_AU6, "sheet10_AU6", "cell_style_6");
		objectWrite(CELL_OBJECT, 659, 94, 13, 15, sheet10_AV6, "sheet10_AV6", "cell_style_6");
		objectWrite(CELL_OBJECT, 672, 94, 13, 15, sheet10_AW6, "sheet10_AW6", "cell_style_6");
		objectWrite(CELL_OBJECT, 685, 94, 13, 15, sheet10_AX6, "sheet10_AX6", "cell_style_6");
		objectWrite(CELL_OBJECT, 698, 94, 13, 15, sheet10_AY6, "sheet10_AY6", "cell_style_6");
		objectWrite(CELL_OBJECT, 711, 94, 13, 15, sheet10_AZ6, "sheet10_AZ6", "cell_style_6");
		objectWrite(CELL_OBJECT, 724, 94, 13, 15, sheet10_BA6, "sheet10_BA6", "cell_style_6");
		objectWrite(CELL_OBJECT, 737, 94, 13, 15, sheet10_BB6, "sheet10_BB6", "cell_style_6");
		objectWrite(CELL_OBJECT, 750, 94, 13, 15, sheet10_BC6, "sheet10_BC6", "cell_style_6");
		objectWrite(CELL_OBJECT, 763, 94, 13, 15, sheet10_BD6, "sheet10_BD6", "cell_style_6");
		objectWrite(CELL_OBJECT, 776, 94, 13, 15, sheet10_BE6, "sheet10_BE6", "cell_style_6");
		objectWrite(CELL_OBJECT, 789, 94, 13, 15, sheet10_BF6, "sheet10_BF6", "cell_style_6");
		objectWrite(CELL_OBJECT, 802, 94, 13, 15, sheet10_BG6, "sheet10_BG6", "cell_style_6");
	}

	//----a 스크립트 문 출력 함수----
	private void writeScripta( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 30, 15, "", "sheet10_A7", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+30, nYCurPos, 15, 15, "", "sheet10_B7", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+45, nYCurPos, 15, 15, "", "sheet10_C7", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos, 13, 15, "", "sheet10_D7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+73, nYCurPos, 13, 15, "", "sheet10_E7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+86, nYCurPos, 13, 15, "", "sheet10_F7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+99, nYCurPos, 13, 15, "", "sheet10_G7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+112, nYCurPos, 13, 15, "", "sheet10_H7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos, 13, 15, "", "sheet10_I7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+138, nYCurPos, 13, 15, "", "sheet10_J7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+151, nYCurPos, 13, 15, "", "sheet10_K7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+164, nYCurPos, 13, 15, "", "sheet10_L7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+177, nYCurPos, 13, 15, "", "sheet10_M7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos, 13, 15, "", "sheet10_N7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+203, nYCurPos, 13, 15, "", "sheet10_O7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+216, nYCurPos, 13, 15, "", "sheet10_P7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+229, nYCurPos, 13, 15, "", "sheet10_Q7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+242, nYCurPos, 13, 15, "", "sheet10_R7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos, 13, 15, "", "sheet10_S7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+268, nYCurPos, 13, 15, "", "sheet10_T7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+281, nYCurPos, 13, 15, "", "sheet10_U7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+294, nYCurPos, 13, 15, "", "sheet10_V7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+307, nYCurPos, 13, 15, "", "sheet10_W7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos, 13, 15, "", "sheet10_X7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+333, nYCurPos, 13, 15, "", "sheet10_Y7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+346, nYCurPos, 13, 15, "", "sheet10_Z7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+359, nYCurPos, 13, 15, "", "sheet10_AA7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+372, nYCurPos, 13, 15, "", "sheet10_AB7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+385, nYCurPos, 13, 15, "", "sheet10_AC7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+398, nYCurPos, 13, 15, "", "sheet10_AD7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+411, nYCurPos, 13, 15, "", "sheet10_AE7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+424, nYCurPos, 13, 15, "", "sheet10_AF7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+437, nYCurPos, 13, 15, "", "sheet10_AG7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+450, nYCurPos, 13, 15, "", "sheet10_AH7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+463, nYCurPos, 13, 15, "", "sheet10_AI7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+476, nYCurPos, 13, 15, "", "sheet10_AJ7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+489, nYCurPos, 13, 15, "", "sheet10_AK7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+502, nYCurPos, 13, 15, "", "sheet10_AL7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+515, nYCurPos, 13, 15, "", "sheet10_AM7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+528, nYCurPos, 13, 15, "", "sheet10_AN7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+541, nYCurPos, 13, 15, "", "sheet10_AO7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+554, nYCurPos, 13, 15, "", "sheet10_AP7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+567, nYCurPos, 13, 15, "", "sheet10_AQ7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+580, nYCurPos, 13, 15, "", "sheet10_AR7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+593, nYCurPos, 13, 15, "", "sheet10_AS7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+606, nYCurPos, 13, 15, "", "sheet10_AT7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+619, nYCurPos, 13, 15, "", "sheet10_AU7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+632, nYCurPos, 13, 15, "", "sheet10_AV7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+645, nYCurPos, 13, 15, "", "sheet10_AW7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+658, nYCurPos, 13, 15, "", "sheet10_AX7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+671, nYCurPos, 13, 15, "", "sheet10_AY7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+684, nYCurPos, 13, 15, "", "sheet10_AZ7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+697, nYCurPos, 13, 15, "", "sheet10_BA7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+710, nYCurPos, 13, 15, "", "sheet10_BB7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+723, nYCurPos, 13, 15, "", "sheet10_BC7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+736, nYCurPos, 13, 15, "", "sheet10_BD7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+749, nYCurPos, 13, 15, "", "sheet10_BE7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+762, nYCurPos, 13, 15, "", "sheet10_BF7", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos+775, nYCurPos, 13, 15, "", "sheet10_BG7", "cell_style_9");
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----ResultSet, Statement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, Statement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst(){
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		sheet10_A2="변호사별 소송사건 현황 분석";
		sheet10_H3="형사그룹";
		sheet10_P3="행정조세그룹";
		sheet10_T3="기업소송중재그룹";
		sheet10_AF3="I 그룹";
		sheet10_AL3="II 그룹";
		sheet10_AT3="III 그룹";
		sheet10_AZ3="IV 그룹";
		sheet10_H4="1팀";
		sheet10_L4="2팀";
		sheet10_P4="　";
		sheet10_T4="1팀";
		sheet10_X4="2팀";
		sheet10_AB4="3팀";
		sheet10_AD4="4팀";
		sheet10_AF4="　";
		sheet10_AL4="　";
		sheet10_AT4="　";
		sheet10_AZ4="　";
		sheet10_B5="계";
		sheet10_D5="기업회생부";
		sheet10_F5="지재권부";
		sheet10_H5="일반형사";
		sheet10_J5="형사소송";
		sheet10_L5="일반형사";
		sheet10_N5="형사소송";
		sheet10_P5="조세";
		sheet10_R5="법제행정";
		sheet10_T5="기업소송중재1만사";
		sheet10_V5="기업소송중재1형사";
		sheet10_X5="기업소송중재2민사";
		sheet10_Z5="기업소송중재2형사";
		sheet10_AB5="기업소송중재3";
		sheet10_AD5="기업소송중재4";
		sheet10_AF5="기업법무";
		sheet10_AH5="노동";
		sheet10_AJ5="중국";
		sheet10_AL5="기업법무2";
		sheet10_AN5="방송통신";
		sheet10_AP5="공정거래";
		sheet10_AR5="헬스케어";
		sheet10_AT5="증권금융1";
		sheet10_AV5="증권금융2";
		sheet10_AX5="보험해상";
		sheet10_AZ5="부동산";
		sheet10_BB5="건설1";
		sheet10_BD5="건설2";
		sheet10_BF5="금융부동산부";
		sheet10_A6="수행";
		sheet10_B6="책";
		sheet10_C6="지";
		sheet10_D6="책";
		sheet10_E6="지";
		sheet10_F6="책";
		sheet10_G6="지";
		sheet10_H6="책";
		sheet10_I6="지";
		sheet10_J6="책";
		sheet10_K6="지";
		sheet10_L6="책";
		sheet10_M6="지";
		sheet10_N6="책";
		sheet10_O6="지";
		sheet10_P6="책";
		sheet10_Q6="지";
		sheet10_R6="책";
		sheet10_S6="지";
		sheet10_T6="책";
		sheet10_U6="지";
		sheet10_V6="책";
		sheet10_W6="지";
		sheet10_X6="책";
		sheet10_Y6="지";
		sheet10_Z6="책";
		sheet10_AA6="지";
		sheet10_AB6="책";
		sheet10_AC6="지";
		sheet10_AD6="책";
		sheet10_AE6="지";
		sheet10_AF6="책";
		sheet10_AG6="지";
		sheet10_AH6="책";
		sheet10_AI6="지";
		sheet10_AJ6="책";
		sheet10_AK6="지";
		sheet10_AL6="책";
		sheet10_AM6="지";
		sheet10_AN6="책";
		sheet10_AO6="지";
		sheet10_AP6="책";
		sheet10_AQ6="지";
		sheet10_AR6="책";
		sheet10_AS6="지";
		sheet10_AT6="책";
		sheet10_AU6="지";
		sheet10_AV6="책";
		sheet10_AW6="지";
		sheet10_AX6="책";
		sheet10_AY6="지";
		sheet10_AZ6="책";
		sheet10_BA6="지";
		sheet10_BB6="책";
		sheet10_BC6="지";
		sheet10_BD6="책";
		sheet10_BE6="지";
		sheet10_BF6="책";
		sheet10_BG6="지";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=toKor(GetB(request.getParameter("reportMode")));
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam(toKor(GetB(request.getParameter("reportParams"))));
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromb(false, true);		//머리글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight){
		//GetPrintHeight_AutoCode
		int ch;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		printWidth = (printWidth-4)*100;

		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
				}
			} else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;

				if (ch==13) {
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}
			} else {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}
			}
		}

		if (height>printHeight) {
			height=height-printHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight){
		//GetPrintHeightEx_AutoCode
		int ch;
		int i;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		boolean bSplit=false;
		strSplitData[0]="";
		strSplitData[1]="";
		printWidth = (printWidth-4)*100;

		for (i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
				}
			}else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;
				if (ch==13){
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					if(i!=size-1){
						bSplit=true;
						i++;
					}
					break;
				}
			}else{
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					bSplit=true;
					break;
				}
			}
		}

		if(bSplit){
			strSplitData[0]=data.substring(0, i);
			strSplitData[1]=data.substring(i);
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|2|test003.style|보고서 (2012/11/8 11:6:13)", false);
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("8859_1"), "KSC5601");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}
}
%>
