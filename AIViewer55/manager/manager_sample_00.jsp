<%
/************************************************************************************
Generated by AIDesigner 5.6.0.2
************************************************************************************
보고서 제목 : 보고서 (2015/5/14 9:0:21)
작성일 : 2015년5월14일 9시0분21초
수정일 : 2015년5월14일 23시49분4초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
}

private Logger logger = Logger.getLogger("com.activeintra");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_A1 = "";
	String sheet10_H3 = "";
	String sheet10_A14 = "";
	String sheet10_C14 = "";
	String sheet10_D14 = "";
	String sheet10_E14 = "";
	String sheet10_F14 = "";
	String sheet10_G14 = "";
	String sheet10_H14 = "";
	String sheet10_A15 = "";
	String sheet10_C15 = "";
	String sheet10_D15 = "";
	String sheet10_E15 = "";
	String sheet10_F15 = "";
	String sheet10_G15 = "";
	String sheet10_H15 = "";
	String sheet10_A16 = "";
	String sheet10_D16 = "";
	String sheet10_E16 = "";
	String sheet10_F16 = "";
	String sheet10_G16 = "";
	String sheet10_H16 = "";
	String sheet10_A17 = "";
	String sheet10_D17 = "";
	String sheet10_E17 = "";
	String sheet10_F17 = "";
	String sheet10_G17 = "";
	String sheet10_H17 = "";
	String sheet10_A18 = "";
	String sheet10_D18 = "";
	String sheet10_E18 = "";
	String sheet10_F18 = "";
	String sheet10_G18 = "";
	String sheet10_H18 = "";
	String sheet10_H20 = "";
	String sheet10_A31 = "";
	String sheet10_C31 = "";
	String sheet10_D31 = "";
	String sheet10_E31 = "";
	String sheet10_F31 = "";
	String sheet10_G31 = "";
	String sheet10_H31 = "";
	String sheet10_A32 = "";
	String sheet10_C32 = "";
	String sheet10_D32 = "";
	String sheet10_E32 = "";
	String sheet10_F32 = "";
	String sheet10_G32 = "";
	String sheet10_H32 = "";
	String sheet10_A33 = "";
	String sheet10_D33 = "";
	String sheet10_E33 = "";
	String sheet10_F33 = "";
	String sheet10_G33 = "";
	String sheet10_H33 = "";
	String sheet10_A34 = "";
	String sheet10_D34 = "";
	String sheet10_E34 = "";
	String sheet10_F34 = "";
	String sheet10_G34 = "";
	String sheet10_H34 = "";
	String sheet10_A35 = "";
	String sheet10_D35 = "";
	String sheet10_E35 = "";
	String sheet10_F35 = "";
	String sheet10_G35 = "";
	String sheet10_H35 = "";
	String sheet10_A36 = "";
	String sheet10_H36 = "";
	String AI_CHART_OBJ3;
	String AI_CHART_OBJ4;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "79 79 79 79");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(e);
			throw e;
		}finally{    //finally 구문
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "14 56 14 14");
		initSheetVariant(26, 68, 570, 817, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromvoid1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----void1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : void1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvoid1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=749;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ3="";
			AI_CHART_OBJ4="";

			//데이터 변수 할당
			sheet10_A1="AIReport Sample Page";
			sheet10_H3="단위 : 원";
			sheet10_A14="코드";
			sheet10_C14="국가명";
			sheet10_D14="등급";
			sheet10_E14="판매수량";
			sheet10_F14="제품가격";
			sheet10_G14="총판매가격";
			sheet10_H14="순이익";
			sheet10_A15="KR-1";
			sheet10_C15="한국";
			sheet10_D15="A";
			sheet10_E15="8,000";
			sheet10_F15="￦3,000";
			sheet10_G15="￦60,000,000";
			sheet10_H15="￦9,200,000";
			sheet10_A16="KR-2";
			sheet10_D16="A";
			sheet10_E16="2,000";
			sheet10_F16="￦4,000";
			sheet10_G16="￦8,000,000";
			sheet10_H16="￦18,000,000";
			sheet10_A17="KR-3";
			sheet10_D17="A";
			sheet10_E17="4,000";
			sheet10_F17="￦1,000";
			sheet10_G17="￦12,500,000";
			sheet10_H17="￦48,000,000";
			sheet10_A18="KR-4";
			sheet10_D18="A";
			sheet10_E18="8,000";
			sheet10_F18="￦6,000";
			sheet10_G18="￦80,000,000";
			sheet10_H18="￦2,170,000";
			sheet10_H20="단위 : 원";
			sheet10_A31="코드";
			sheet10_C31="국가명";
			sheet10_D31="등급";
			sheet10_E31="판매수량";
			sheet10_F31="제품가격";
			sheet10_G31="총판매가격";
			sheet10_H31="순이익";
			sheet10_A32="PA-1";
			sheet10_C32="중국";
			sheet10_D32="A";
			sheet10_E32="2,000";
			sheet10_F32="￦1,000";
			sheet10_G32="￦20,000,000";
			sheet10_H32="￦18,000,000";
			sheet10_A33="PA-2";
			sheet10_D33="A";
			sheet10_E33="3,000";
			sheet10_F33="￦2,000";
			sheet10_G33="￦60,000,000";
			sheet10_H33="￦50,000,000";
			sheet10_A34="PA-3";
			sheet10_D34="A";
			sheet10_E34="1,600";
			sheet10_F34="￦1,500";
			sheet10_G34="￦22,500,000";
			sheet10_H34="￦20,000,000";
			sheet10_A35="PA-4";
			sheet10_D35="A";
			sheet10_E35="1,600";
			sheet10_F35="￦1,800";
			sheet10_G35="￦27,000,000";
			sheet10_H35="￦23,000,000";
			sheet10_A36="" + toDate() + "";
			sheet10_H36="#PAGE / #TOTALPAGE";
			getChartDataAI_CHART_OBJ3( );
			getChartDataAI_CHART_OBJ4( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvoid1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----void1 스크립트 문 출력 함수----
	private void writeScriptvoid1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos, 544, 40, sheet10_A1, "sheet10_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+60, 15, 15, "", "sheet10_A3", "cell_style_1");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+60, 45, 15, "", "sheet10_B3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+60, 65, 15, "", "sheet10_C3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+60, 65, 15, "", "sheet10_D3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+60, 65, 15, "", "sheet10_E3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+60, 65, 15, "", "sheet10_F3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+60, 110, 15, "", "sheet10_G3", "cell_style_2");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+60, 100, 15, sheet10_H3, "sheet10_H3", "cell_style_3");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+60, 14, 15, "", "sheet10_J3", "cell_style_4");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+75, 15, 20, "", "sheet10_A4", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+75, 14, 20, "", "sheet10_J4", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+95, 15, 20, "", "sheet10_A5", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+95, 14, 20, "", "sheet10_J5", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+115, 15, 20, "", "sheet10_A6", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+115, 14, 20, "", "sheet10_J6", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+135, 15, 20, "", "sheet10_A7", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+135, 14, 20, "", "sheet10_J7", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+155, 15, 20, "", "sheet10_A8", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+155, 14, 20, "", "sheet10_J8", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+175, 15, 20, "", "sheet10_A9", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+175, 14, 20, "", "sheet10_J9", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+195, 15, 20, "", "sheet10_A10", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+195, 14, 20, "", "sheet10_J10", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+215, 15, 20, "", "sheet10_A11", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+215, 14, 20, "", "sheet10_J11", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+235, 15, 20, "", "sheet10_A12", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+235, 45, 20, "", "sheet10_B12", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+235, 65, 20, "", "sheet10_C12", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+235, 65, 20, "", "sheet10_D12", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+235, 65, 20, "", "sheet10_E12", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+235, 65, 20, "", "sheet10_F12", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+235, 110, 20, "", "sheet10_G12", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+235, 50, 20, "", "sheet10_H12", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+480, nYCurPos+235, 50, 20, "", "sheet10_I12", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+235, 14, 20, "", "sheet10_J12", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+270, 60, 20, sheet10_A14, "sheet10_A14", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+270, 65, 20, sheet10_C14, "sheet10_C14", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+270, 65, 20, sheet10_D14, "sheet10_D14", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+270, 65, 20, sheet10_E14, "sheet10_E14", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+270, 65, 20, sheet10_F14, "sheet10_F14", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+270, 110, 20, sheet10_G14, "sheet10_G14", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+270, 114, 20, sheet10_H14, "sheet10_H14", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+290, 60, 20, sheet10_A15, "sheet10_A15", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+290, 65, 80, sheet10_C15, "sheet10_C15", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+290, 65, 20, sheet10_D15, "sheet10_D15", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+290, 65, 20, sheet10_E15, "sheet10_E15", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+290, 65, 20, sheet10_F15, "sheet10_F15", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+290, 110, 20, sheet10_G15, "sheet10_G15", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+290, 114, 20, sheet10_H15, "sheet10_H15", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+310, 60, 20, sheet10_A16, "sheet10_A16", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+310, 65, 20, sheet10_D16, "sheet10_D16", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+310, 65, 20, sheet10_E16, "sheet10_E16", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+310, 65, 20, sheet10_F16, "sheet10_F16", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+310, 110, 20, sheet10_G16, "sheet10_G16", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+310, 114, 20, sheet10_H16, "sheet10_H16", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+330, 60, 20, sheet10_A17, "sheet10_A17", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+330, 65, 20, sheet10_D17, "sheet10_D17", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+330, 65, 20, sheet10_E17, "sheet10_E17", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+330, 65, 20, sheet10_F17, "sheet10_F17", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+330, 110, 20, sheet10_G17, "sheet10_G17", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+330, 114, 20, sheet10_H17, "sheet10_H17", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+350, 60, 20, sheet10_A18, "sheet10_A18", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+350, 65, 20, sheet10_D18, "sheet10_D18", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+350, 65, 20, sheet10_E18, "sheet10_E18", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+350, 65, 20, sheet10_F18, "sheet10_F18", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+350, 110, 20, sheet10_G18, "sheet10_G18", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+350, 114, 20, sheet10_H18, "sheet10_H18", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+410, 15, 15, "", "sheet10_A20", "cell_style_15");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+410, 45, 15, "", "sheet10_B20", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+410, 65, 15, "", "sheet10_C20", "cell_style_17");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+410, 65, 15, "", "sheet10_D20", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+410, 65, 15, "", "sheet10_E20", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+410, 65, 15, "", "sheet10_F20", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+410, 110, 15, "", "sheet10_G20", "cell_style_16");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+410, 100, 15, sheet10_H20, "sheet10_H20", "cell_style_18");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+410, 14, 15, "", "sheet10_J20", "cell_style_19");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+425, 15, 20, "", "sheet10_A21", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+425, 14, 20, "", "sheet10_J21", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+445, 15, 20, "", "sheet10_A22", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+445, 14, 20, "", "sheet10_J22", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+465, 15, 20, "", "sheet10_A23", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+465, 14, 20, "", "sheet10_J23", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+485, 15, 20, "", "sheet10_A24", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+485, 14, 20, "", "sheet10_J24", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+505, 15, 20, "", "sheet10_A25", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+505, 14, 20, "", "sheet10_J25", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+525, 15, 20, "", "sheet10_A26", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+525, 14, 20, "", "sheet10_J26", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+545, 15, 20, "", "sheet10_A27", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+545, 14, 20, "", "sheet10_J27", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+565, 15, 20, "", "sheet10_A28", "cell_style_5");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+565, 14, 20, "", "sheet10_J28", "cell_style_6");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+585, 15, 20, "", "sheet10_A29", "cell_style_7");
		objectWrite(CELL_OBJECT, nXCurPos+15, nYCurPos+585, 45, 20, "", "sheet10_B29", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+585, 65, 20, "", "sheet10_C29", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+585, 65, 20, "", "sheet10_D29", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+585, 65, 20, "", "sheet10_E29", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+585, 65, 20, "", "sheet10_F29", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+585, 110, 20, "", "sheet10_G29", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+585, 50, 20, "", "sheet10_H29", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+480, nYCurPos+585, 50, 20, "", "sheet10_I29", "cell_style_8");
		objectWrite(CELL_OBJECT, nXCurPos+530, nYCurPos+585, 14, 20, "", "sheet10_J29", "cell_style_9");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+620, 60, 20, sheet10_A31, "sheet10_A31", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+620, 65, 20, sheet10_C31, "sheet10_C31", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+620, 65, 20, sheet10_D31, "sheet10_D31", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+620, 65, 20, sheet10_E31, "sheet10_E31", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+620, 65, 20, sheet10_F31, "sheet10_F31", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+620, 110, 20, sheet10_G31, "sheet10_G31", "cell_style_11");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+620, 114, 20, sheet10_H31, "sheet10_H31", "cell_style_10");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+640, 60, 20, sheet10_A32, "sheet10_A32", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+60, nYCurPos+640, 65, 80, sheet10_C32, "sheet10_C32", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+640, 65, 20, sheet10_D32, "sheet10_D32", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+640, 65, 20, sheet10_E32, "sheet10_E32", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+640, 65, 20, sheet10_F32, "sheet10_F32", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+640, 110, 20, sheet10_G32, "sheet10_G32", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+640, 114, 20, sheet10_H32, "sheet10_H32", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+660, 60, 20, sheet10_A33, "sheet10_A33", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+660, 65, 20, sheet10_D33, "sheet10_D33", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+660, 65, 20, sheet10_E33, "sheet10_E33", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+660, 65, 20, sheet10_F33, "sheet10_F33", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+660, 110, 20, sheet10_G33, "sheet10_G33", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+660, 114, 20, sheet10_H33, "sheet10_H33", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+680, 60, 20, sheet10_A34, "sheet10_A34", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+680, 65, 20, sheet10_D34, "sheet10_D34", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+680, 65, 20, sheet10_E34, "sheet10_E34", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+680, 65, 20, sheet10_F34, "sheet10_F34", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+680, 110, 20, sheet10_G34, "sheet10_G34", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+680, 114, 20, sheet10_H34, "sheet10_H34", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+700, 60, 20, sheet10_A35, "sheet10_A35", "cell_style_12");
		objectWrite(CELL_OBJECT, nXCurPos+125, nYCurPos+700, 65, 20, sheet10_D35, "sheet10_D35", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+190, nYCurPos+700, 65, 20, sheet10_E35, "sheet10_E35", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+255, nYCurPos+700, 65, 20, sheet10_F35, "sheet10_F35", "cell_style_13");
		objectWrite(CELL_OBJECT, nXCurPos+320, nYCurPos+700, 110, 20, sheet10_G35, "sheet10_G35", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+700, 114, 20, sheet10_H35, "sheet10_H35", "cell_style_14");
		objectWrite(CELL_OBJECT, nXCurPos, nYCurPos+720, 125, 29, sheet10_A36, "sheet10_A36", "cell_style_20");
		objectWrite(CELL_OBJECT, nXCurPos+430, nYCurPos+720, 114, 29, sheet10_H36, "sheet10_H36", "cell_style_21");
		objectWrite(DRAW_OBJECT, nXCurPos+15, nYCurPos+75, 514, 175, AI_CHART_OBJ3, "AI_CHART_OBJ3", "draw_style_0");
		objectWrite(DRAW_OBJECT, nXCurPos+15, nYCurPos+425, 515, 172, AI_CHART_OBJ4, "AI_CHART_OBJ4", "draw_style_1");
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.NexacroDataSetHandler){
					((com.activeintra.util.uds.NexacroDataSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(Exception e){
				//e.printStackTrace();
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//----AI_CHART_OBJ3 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ3( ) throws Exception{
		//데이터 설정
		AI_CHART_OBJ3="\t총판매가\t순이익\r\nKR-1\t6000\t920\r\nKR-2\t800\t1800\r\nKR-3\t1250\t4800\r\nKR-3\t8000\t216.5\r\n\r\n";
	}

	//----AI_CHART_OBJ4 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ4( ) throws Exception{
		//데이터 설정
		AI_CHART_OBJ4="\t총판매가격\t순이익\r\nPA-1\t2000\t1800\r\nPA-2\t6000\t5000\r\nPA-3\t2250\t2000\r\nPA-4\t2700\t2300\r\n\r\n";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight){
		//GetPrintHeight_AutoCode
		int ch;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		printWidth = printWidth*100;

		for (int i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
				}
			} else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;

				if (ch==13) {
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}
			} else {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}
			}
		}

		if (height>printHeight) {
			height=height-printHeight;
		}else{
			height=0;
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight){
		//GetPrintHeightEx_AutoCode
		int ch;
		int i;
		int len = 95;
		int []width = new int[1];
		width[0] = 0;
		int asciiWidth = 0;
		int linePitch = (int)(fontSize*1.4);
		int height = linePitch;
		int size = data.length();
		int ascIndex=0;
		boolean bSplit=false;
		strSplitData[0]="";
		strSplitData[1]="";
		printWidth = printWidth*100;

		for (i = 0; i < size; i++) {
			ch = data.charAt(i);

			if(ch<32 && !(ch==10 || ch==20 || ch==13)){
				continue;
			}

			if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
				if(asciiWidth==0){
					ascIndex=i;
				}

				asciiWidth += charWidth[ch-32];
				if (i==size-1){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
				}
			}else if (ch==10 || ch==20 || ch==13) {
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth = 0;
				}

				width[0] = 0;
				height += linePitch;
				if (ch==13){
					if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
						i++;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					if(i!=size-1){
						bSplit=true;
						i++;
					}
					break;
				}
			}else{
				if(asciiWidth>0){
					height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						i=ascIndex;
						break;
					}
					asciiWidth=0;
				}

				if(ch>=32 && ch<=127){
					width[0] += charWidth[ch-32];
					if (width[0] > printWidth) {
						if (ch==32)
						{
							width[0] = 0;
						}
						else
						{
							width[0] = charWidth[ch-32];
						}
						height += linePitch;
					}
				}else{
					width[0] += charWidth[len];
					if (width[0] > printWidth) {
						width[0] = charWidth[len];
						height += linePitch;
					}
				}

				if(height>nExtHeight){
					height=nExtHeight;
					bSplit=true;
					break;
				}
			}
		}

		if(bSplit){
			strSplitData[0]=data.substring(0, i);
			strSplitData[1]=data.substring(i);
		}

		height = (int)MAX((long)height,(long)nMaxHeight);
		return height;
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|4|manager_sample.style|보고서 (2015/5/14 9:0:21)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}
}
%>
